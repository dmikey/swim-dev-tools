var swim_platform =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function () {

	/*** Variables ***/

	  var win = window,
	    doc = document,
	    attrProto = {
	      setAttribute: Element.prototype.setAttribute,
	      removeAttribute: Element.prototype.removeAttribute
	    },
	    hasShadow = Element.prototype.createShadowRoot,
	    container = doc.createElement('div'),
	    noop = function(){},
	    trueop = function(){ return true; },
	    regexReplaceCommas = /,/g,
	    regexCamelToDash = /([a-z])([A-Z])/g,
	    regexPseudoParens = /\(|\)/g,
	    regexPseudoCapture = /:(\w+)\u276A(.+?(?=\u276B))|:(\w+)/g,
	    regexDigits = /(\d+)/g,
	    keypseudo = {
	      action: function (pseudo, event) {
	        return pseudo.value.match(regexDigits).indexOf(String(event.keyCode)) > -1 == (pseudo.name == 'keypass') || null;
	      }
	    },
	    /*
	      - The prefix object generated here is added to the xtag object as xtag.prefix later in the code
	      - Prefix provides a variety of prefix variations for the browser in which your code is running
	      - The 4 variations of prefix are as follows:
	        * prefix.dom: the correct prefix case and form when used on DOM elements/style properties
	        * prefix.lowercase: a lowercase version of the prefix for use in various user-code situations
	        * prefix.css: the lowercase, dashed version of the prefix
	        * prefix.js: addresses prefixed APIs present in global and non-Element contexts
	    */
	    prefix = (function () {
	      var keys = Object.keys(window).join();
	      var pre = ((keys.match(/,(ms)/) || keys.match(/,(moz)/) || keys.match(/,(O)/)) || [null, 'webkit'])[1].toLowerCase();
	      return {
	        dom: pre == 'ms' ? 'MS' : pre,
	        lowercase: pre,
	        css: '-' + pre + '-',
	        js: pre == 'ms' ? pre : pre.charAt(0).toUpperCase() + pre.substring(1)
	      };
	    })(),
	    matchSelector = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype[prefix.lowercase + 'MatchesSelector'];

	/*** Functions ***/

	// Utilities

	  /*
	    This is an enhanced typeof check for all types of objects. Where typeof would normaly return
	    'object' for many common DOM objects (like NodeLists and HTMLCollections).
	    - For example: typeOf(document.children) will correctly return 'htmlcollection'
	  */
	  var typeCache = {},
	      typeString = typeCache.toString,
	      typeRegexp = /\s([a-zA-Z]+)/;
	  function typeOf(obj) {
	    var type = typeString.call(obj);
	    return typeCache[type] || (typeCache[type] = type.match(typeRegexp)[1].toLowerCase());
	  }

	  function clone(item, type){
	    var fn = clone[type || typeOf(item)];
	    return fn ? fn(item) : item;
	  }
	    clone.object = function(src){
	      var obj = {};
	      for (var key in src) obj[key] = clone(src[key]);
	      return obj;
	    };
	    clone.array = function(src){
	      var i = src.length, array = new Array(i);
	      while (i--) array[i] = clone(src[i]);
	      return array;
	    };

	  /*
	    The toArray() method allows for conversion of any object to a true array. For types that
	    cannot be converted to an array, the method returns a 1 item array containing the passed-in object.
	  */
	  var unsliceable = { 'undefined': 1, 'null': 1, 'number': 1, 'boolean': 1, 'string': 1, 'function': 1 };
	  function toArray(obj){
	    return unsliceable[typeOf(obj)] ? [obj] : Array.prototype.slice.call(obj, 0);
	  }

	// DOM

	  var str = '';
	  function query(element, selector){
	    return (selector || str).length ? toArray(element.querySelectorAll(selector)) : [];
	  }

	// Pseudos

	  function parsePseudo(fn){fn();}

	// Mixins

	  function mergeOne(source, key, current){
	    var type = typeOf(current);
	    if (type == 'object' && typeOf(source[key]) == 'object') xtag.merge(source[key], current);
	    else source[key] = clone(current, type);
	    return source;
	  }

	  function mergeMixin(tag, original, mixin, name) {
	    var key, keys = {};
	    for (var z in original) keys[z.split(':')[0]] = z;
	    for (z in mixin) {
	      key = keys[z.split(':')[0]];
	      if (typeof original[key] == 'function') {
	        if (!key.match(':mixins')) {
	          original[key + ':mixins'] = original[key];
	          delete original[key];
	          key = key + ':mixins';
	        }
	        original[key].__mixin__ = xtag.applyPseudos(z + (z.match(':mixins') ? '' : ':mixins'), mixin[z], tag.pseudos, original[key].__mixin__);
	      }
	      else {
	        original[z] = mixin[z];
	        delete original[key];
	      }
	    }
	  }

	  var uniqueMixinCount = 0;
	  function addMixin(tag, original, mixin){
	    for (var z in mixin){
	      original[z + ':__mixin__(' + (uniqueMixinCount++) + ')'] = xtag.applyPseudos(z, mixin[z], tag.pseudos);
	    }
	  }

	  function resolveMixins(mixins, output){
	    var index = mixins.length;
	    while (index--){
	      output.unshift(mixins[index]);
	      if (xtag.mixins[mixins[index]].mixins) resolveMixins(xtag.mixins[mixins[index]].mixins, output);
	    }
	    return output;
	  }

	  function applyMixins(tag) {
	    resolveMixins(tag.mixins, []).forEach(function(name){
	      var mixin = xtag.mixins[name];
	      for (var type in mixin) {
	        var item = mixin[type],
	            original = tag[type];
	        if (!original) tag[type] = item;
	        else {
	          switch (type){
	            case 'mixins': break;
	            case 'events': addMixin(tag, original, item); break;
	            case 'accessors':
	            case 'prototype':
	              for (var z in item) {
	                if (!original[z]) original[z] = item[z];
	                else mergeMixin(tag, original[z], item[z], name);
	              }
	              break;
	            default: mergeMixin(tag, original, item, name);
	          }
	        }
	      }
	    });
	    return tag;
	  }

	// Events

	  function delegateAction(pseudo, event) {
	    var match,
	        target = event.target,
	        root = event.currentTarget;
	    while (!match && target && target != root) {
	      if (target.tagName && matchSelector.call(target, pseudo.value)) match = target;
	      target = target.parentNode;
	    }
	    if (!match && root.tagName && matchSelector.call(root, pseudo.value)) match = root;
	    return match ? pseudo.listener = pseudo.listener.bind(match) : null;
	  }

	  function touchFilter(event){
	    return event.button === 0;
	  }

	  function writeProperty(key, event, base, desc){
	    if (desc) event[key] = base[key];
	    else Object.defineProperty(event, key, {
	      writable: true,
	      enumerable: true,
	      value: base[key]
	    });
	  }

	  var skipProps = {};
	  for (var z in doc.createEvent('CustomEvent')) skipProps[z] = 1;
	  function inheritEvent(event, base){
	    var desc = Object.getOwnPropertyDescriptor(event, 'target');
	    for (var z in base) {
	      if (!skipProps[z]) writeProperty(z, event, base, desc);
	    }
	    event.baseEvent = base;
	  }

	// Accessors

	  function modAttr(element, attr, name, value, method){
	    attrProto[method].call(element, name, attr && attr.boolean ? '' : value);
	  }

	  function syncAttr(element, attr, name, value, method){
	    if (attr && (attr.property || attr.selector)) {
	      var nodes = attr.property ? [element.xtag[attr.property]] : attr.selector ? xtag.query(element, attr.selector) : [],
	          index = nodes.length;
	      while (index--) nodes[index][method](name, value);
	    }
	  }

	  function attachProperties(tag, prop, z, accessor, attr, name){
	    var key = z.split(':'), type = key[0];
	    if (type == 'get') {
	      key[0] = prop;
	      tag.prototype[prop].get = xtag.applyPseudos(key.join(':'), accessor[z], tag.pseudos, accessor[z]);
	    }
	    else if (type == 'set') {
	      key[0] = prop;
	      var setter = tag.prototype[prop].set = xtag.applyPseudos(key.join(':'), attr ? function(value){
	        var old, method = 'setAttribute';
	        if (attr.boolean){
	          value = !!value;
	          old = this.hasAttribute(name);
	          if (!value) method = 'removeAttribute';
	        }
	        else {
	          value = attr.validate ? attr.validate.call(this, value) : value;
	          old = this.getAttribute(name);
	        }
	        modAttr(this, attr, name, value, method);
	        accessor[z].call(this, value, old);
	        syncAttr(this, attr, name, value, method);
	      } : accessor[z] ? function(value){
	        accessor[z].call(this, value);
	      } : null, tag.pseudos, accessor[z]);

	      if (attr) attr.setter = accessor[z];
	    }
	    else tag.prototype[prop][z] = accessor[z];
	  }

	  function parseAccessor(tag, prop){
	    tag.prototype[prop] = {};
	    var accessor = tag.accessors[prop],
	        attr = accessor.attribute,
	        name;

	    if (attr) {
	      name = attr.name = (attr ? (attr.name || prop.replace(regexCamelToDash, '$1-$2')) : prop).toLowerCase();
	      attr.key = prop;
	      tag.attributes[name] = attr;
	    }

	    for (var z in accessor) attachProperties(tag, prop, z, accessor, attr, name);

	    if (attr) {
	      if (!tag.prototype[prop].get) {
	        var method = (attr.boolean ? 'has' : 'get') + 'Attribute';
	        tag.prototype[prop].get = function(){
	          return this[method](name);
	        };
	      }
	      if (!tag.prototype[prop].set) tag.prototype[prop].set = function(value){
	        value = attr.boolean ? !!value : attr.validate ? attr.validate.call(this, value) : value;
	        var method = attr.boolean ? (value ? 'setAttribute' : 'removeAttribute') : 'setAttribute';
	        modAttr(this, attr, name, value, method);
	        syncAttr(this, attr, name, value, method);
	      };
	    }
	  }

	  var unwrapComment = /\/\*!?(?:\@preserve)?[ \t]*(?:\r\n|\n)([\s\S]*?)(?:\r\n|\n)\s*\*\//;
	  function parseMultiline(fn){
	    return typeof fn == 'function' ? unwrapComment.exec(fn.toString())[1] : fn;
	  }

	/*** X-Tag Object Definition ***/

	  var xtag = {
	    tags: {},
	    defaultOptions: {
	      pseudos: [],
	      mixins: [],
	      events: {},
	      methods: {},
	      accessors: {},
	      lifecycle: {},
	      attributes: {},
	      'prototype': {
	        xtag: {
	          get: function(){
	            return this.__xtag__ ? this.__xtag__ : (this.__xtag__ = { data: {} });
	          }
	        }
	      }
	    },
	    register: function (name, options) {
	      var _name;
	      if (typeof name == 'string') _name = name.toLowerCase();
	      else throw 'First argument must be a Custom Element string name';
	      xtag.tags[_name] = options || {};

	      var basePrototype = options.prototype;
	      delete options.prototype;
	      var tag = xtag.tags[_name].compiled = applyMixins(xtag.merge({}, xtag.defaultOptions, options));
	      var proto = tag.prototype;
	      var lifecycle = tag.lifecycle;

	      for (var z in tag.events) tag.events[z] = xtag.parseEvent(z, tag.events[z]);
	      for (z in lifecycle) lifecycle[z.split(':')[0]] = xtag.applyPseudos(z, lifecycle[z], tag.pseudos, lifecycle[z]);
	      for (z in tag.methods) proto[z.split(':')[0]] = { value: xtag.applyPseudos(z, tag.methods[z], tag.pseudos, tag.methods[z]), enumerable: true };
	      for (z in tag.accessors) parseAccessor(tag, z);

	      if (tag.shadow) tag.shadow = tag.shadow.nodeName ? tag.shadow : xtag.createFragment(tag.shadow);
	      if (tag.content) tag.content = tag.content.nodeName ? tag.content.innerHTML : parseMultiline(tag.content);
	      var created = lifecycle.created;
	      var finalized = lifecycle.finalized;
	      proto.createdCallback = {
	        enumerable: true,
	        value: function(){
	          var element = this;
	          if (tag.shadow && hasShadow) this.createShadowRoot().appendChild(tag.shadow.cloneNode(true));
	          if (tag.content) this.appendChild(document.createElement('div')).outerHTML = tag.content;
	          var output = created ? created.apply(this, arguments) : null;
	          xtag.addEvents(this, tag.events);
	          for (var name in tag.attributes) {
	            var attr = tag.attributes[name],
	                hasAttr = this.hasAttribute(name),
	                hasDefault = attr.def !== undefined;
	            if (hasAttr || attr.boolean || hasDefault) {
	              this[attr.key] = attr.boolean ? hasAttr : !hasAttr && hasDefault ? attr.def : this.getAttribute(name);
	            }
	          }
	          tag.pseudos.forEach(function(obj){
	            obj.onAdd.call(element, obj);
	          });
	          this.xtagComponentReady = true;
	          if (finalized) finalized.apply(this, arguments);
	          return output;
	        }
	      };

	      var inserted = lifecycle.inserted;
	      var removed = lifecycle.removed;
	      if (inserted || removed) {
	        proto.attachedCallback = { value: function(){
	          if (removed) this.xtag.__parentNode__ = this.parentNode;
	          if (inserted) return inserted.apply(this, arguments);
	        }, enumerable: true };
	      }
	      if (removed) {
	        proto.detachedCallback = { value: function(){
	          var args = toArray(arguments);
	          args.unshift(this.xtag.__parentNode__);
	          var output = removed.apply(this, args);
	          delete this.xtag.__parentNode__;
	          return output;
	        }, enumerable: true };
	      }
	      if (lifecycle.attributeChanged) proto.attributeChangedCallback = { value: lifecycle.attributeChanged, enumerable: true };

	      proto.setAttribute = {
	        writable: true,
	        enumerable: true,
	        value: function (name, value){
	          var old;
	          var _name = name.toLowerCase();
	          var attr = tag.attributes[_name];
	          if (attr) {
	            old = this.getAttribute(_name);
	            value = attr.boolean ? '' : attr.validate ? attr.validate.call(this, value) : value;
	          }
	          modAttr(this, attr, _name, value, 'setAttribute');
	          if (attr) {
	            if (attr.setter) attr.setter.call(this, attr.boolean ? true : value, old);
	            syncAttr(this, attr, _name, value, 'setAttribute');
	          }
	        }
	      };

	      proto.removeAttribute = {
	        writable: true,
	        enumerable: true,
	        value: function (name){
	          var _name = name.toLowerCase();
	          var attr = tag.attributes[_name];
	          var old = this.hasAttribute(_name);
	          modAttr(this, attr, _name, '', 'removeAttribute');
	          if (attr) {
	            if (attr.setter) attr.setter.call(this, attr.boolean ? false : undefined, old);
	            syncAttr(this, attr, _name, '', 'removeAttribute');
	          }
	        }
	      };

	      var definition = {};
	      var instance = basePrototype instanceof win.HTMLElement;
	      var extended = tag['extends'] && (definition['extends'] = tag['extends']);

	      if (basePrototype) Object.getOwnPropertyNames(basePrototype).forEach(function(z){
	        var prop = proto[z];
	        var desc = instance ? Object.getOwnPropertyDescriptor(basePrototype, z) : basePrototype[z];
	        if (prop) {
	          for (var y in desc) {
	            if (typeof desc[y] == 'function' && prop[y]) prop[y] = xtag.wrap(desc[y], prop[y]);
	            else prop[y] = desc[y];
	          }
	        }
	        proto[z] = prop || desc;
	      });

	      definition['prototype'] = Object.create(
	        extended ? Object.create(doc.createElement(extended).constructor).prototype : win.HTMLElement.prototype,
	        proto
	      );

	      return doc.registerElement(_name, definition);
	    },

	    /* Exposed Variables */

	    mixins: {},
	    prefix: prefix,
	    captureEvents: { focus: 1, blur: 1, scroll: 1, DOMMouseScroll: 1 },
	    customEvents: {
	      animationstart: {
	        attach: [prefix.dom + 'AnimationStart']
	      },
	      animationend: {
	        attach: [prefix.dom + 'AnimationEnd']
	      },
	      transitionend: {
	        attach: [prefix.dom + 'TransitionEnd']
	      },
	      move: {
	        attach: ['pointermove']
	      },
	      enter: {
	        attach: ['pointerenter']
	      },
	      leave: {
	        attach: ['pointerleave']
	      },
	      scrollwheel: {
	        attach: ['DOMMouseScroll', 'mousewheel'],
	        condition: function(event){
	          event.delta = event.wheelDelta ? event.wheelDelta / 40 : Math.round(event.detail / 3.5 * -1);
	          return true;
	        }
	      },
	      tap: {
	        attach: ['pointerdown', 'pointerup'],
	        condition: function(event, custom){
	          if (event.type == 'pointerdown') {
	            custom.startX = event.clientX;
	            custom.startY = event.clientY;
	          }
	          else if (event.button === 0 &&
	                   Math.abs(custom.startX - event.clientX) < 10 &&
	                   Math.abs(custom.startY - event.clientY) < 10) return true;
	        }
	      },
	      tapstart: {
	        attach: ['pointerdown'],
	        condition: touchFilter
	      },
	      tapend: {
	        attach: ['pointerup'],
	        condition: touchFilter
	      },
	      tapmove: {
	        attach: ['pointerdown'],
	        condition: function(event, custom){
	          if (event.type == 'pointerdown') {
	            var listener = custom.listener.bind(this);
	            if (!custom.tapmoveListeners) custom.tapmoveListeners = xtag.addEvents(document, {
	              pointermove: listener,
	              pointerup: listener,
	              pointercancel: listener
	            });
	          }
	          else if (event.type == 'pointerup' || event.type == 'pointercancel') {
	            xtag.removeEvents(document, custom.tapmoveListeners);
	            custom.tapmoveListeners = null;
	          }
	          return true;
	        }
	      },
	      taphold: {
	        attach: ['pointerdown', 'pointerup'],
	        condition: function(event, custom){
	          if (event.type == 'pointerdown') {
	            (custom.pointers = custom.pointers || {})[event.pointerId] = setTimeout(
	              xtag.fireEvent.bind(null, this, 'taphold'),
	              custom.duration || 1000
	            );
	          }
	          else if (event.type == 'pointerup') {
	            if (custom.pointers) {
	              clearTimeout(custom.pointers[event.pointerId]);
	              delete custom.pointers[event.pointerId];
	            }
	          }
	          else return true;
	        }
	      }
	    },
	    pseudos: {
	      __mixin__: {},
	      mixins: {
	        onCompiled: function(fn, pseudo){
	          var mixin = pseudo.source && pseudo.source.__mixin__ || pseudo.source;
	          if (mixin) switch (pseudo.value) {
	            case null: case '': case 'before': return function(){
	              mixin.apply(this, arguments);
	              return fn.apply(this, arguments);
	            };
	            case 'after': return function(){
	              var returns = fn.apply(this, arguments);
	              mixin.apply(this, arguments);
	              return returns;
	            };
	            case 'none': return fn;
	          }
	          else return fn;
	        }
	      },
	      keypass: keypseudo,
	      keyfail: keypseudo,
	      delegate: {
	        action: delegateAction
	      },
	      preventable: {
	        action: function (pseudo, event) {
	          return !event.defaultPrevented;
	        }
	      },
	      duration: {
	        onAdd: function(pseudo){
	          pseudo.source.duration = Number(pseudo.value);
	        }
	      },
	      capture: {
	        onCompiled: function(fn, pseudo){
	          if (pseudo.source) pseudo.source.capture = true;
	        }
	      }
	    },

	    /* UTILITIES */

	    clone: clone,
	    typeOf: typeOf,
	    toArray: toArray,

	    wrap: function (original, fn) {
	      return function(){
	        var output = original.apply(this, arguments);
	        fn.apply(this, arguments);
	        return output;
	      };
	    },
	    /*
	      Recursively merges one object with another. The first argument is the destination object,
	      all other objects passed in as arguments are merged from right to left, conflicts are overwritten
	    */
	    merge: function(source, k, v){
	      if (typeOf(k) == 'string') return mergeOne(source, k, v);
	      for (var i = 1, l = arguments.length; i < l; i++){
	        var object = arguments[i];
	        for (var key in object) mergeOne(source, key, object[key]);
	      }
	      return source;
	    },

	    /*
	      ----- This should be simplified! -----
	      Generates a random ID string
	    */
	    uid: function(){
	      return Math.random().toString(36).substr(2,10);
	    },

	    /* DOM */

	    query: query,

	    skipTransition: function(element, fn, bind){
	      var prop = prefix.js + 'TransitionProperty';
	      element.style[prop] = element.style.transitionProperty = 'none';
	      var callback = fn ? fn.call(bind || element) : null;
	      return xtag.skipFrame(function(){
	        element.style[prop] = element.style.transitionProperty = '';
	        if (callback) callback.call(bind || element);
	      });
	    },

	    requestFrame: (function(){
	      var raf = win.requestAnimationFrame ||
	                win[prefix.lowercase + 'RequestAnimationFrame'] ||
	                function(fn){ return win.setTimeout(fn, 20); };
	      return function(fn){ return raf(fn); };
	    })(),

	    cancelFrame: (function(){
	      var cancel = win.cancelAnimationFrame ||
	                   win[prefix.lowercase + 'CancelAnimationFrame'] ||
	                   win.clearTimeout;
	      return function(id){ return cancel(id); };
	    })(),

	    skipFrame: function(fn){
	      var id = xtag.requestFrame(function(){ id = xtag.requestFrame(fn); });
	      return id;
	    },

	    matchSelector: function (element, selector) {
	      return matchSelector.call(element, selector);
	    },

	    set: function (element, method, value) {
	      element[method] = value;
	      if (window.CustomElements) CustomElements.upgradeAll(element);
	    },

	    innerHTML: function(el, html){
	      xtag.set(el, 'innerHTML', html);
	    },

	    hasClass: function (element, klass) {
	      return element.className.split(' ').indexOf(klass.trim())>-1;
	    },

	    addClass: function (element, klass) {
	      var list = element.className.trim().split(' ');
	      klass.trim().split(' ').forEach(function (name) {
	        if (!~list.indexOf(name)) list.push(name);
	      });
	      element.className = list.join(' ').trim();
	      return element;
	    },

	    removeClass: function (element, klass) {
	      var classes = klass.trim().split(' ');
	      element.className = element.className.trim().split(' ').filter(function (name) {
	        return name && !~classes.indexOf(name);
	      }).join(' ');
	      return element;
	    },

	    toggleClass: function (element, klass) {
	      return xtag[xtag.hasClass(element, klass) ? 'removeClass' : 'addClass'].call(null, element, klass);
	    },

	    /*
	      Runs a query on only the children of an element
	    */
	    queryChildren: function (element, selector) {
	      var id = element.id,
	          attr = '#' + (element.id = id || 'x_' + xtag.uid()) + ' > ',
	          parent = element.parentNode || !container.appendChild(element);
	      selector = attr + (selector + '').replace(regexReplaceCommas, ',' + attr);
	      var result = element.parentNode.querySelectorAll(selector);
	      if (!id) element.removeAttribute('id');
	      if (!parent) container.removeChild(element);
	      return toArray(result);
	    },

	    /*
	      Creates a document fragment with the content passed in - content can be
	      a string of HTML, an element, or an array/collection of elements
	    */
	    createFragment: function(content) {
	      var template = document.createElement('template');
	      if (content) {
	        if (content.nodeName) toArray(arguments).forEach(function(e){
	          template.content.appendChild(e);
	        });
	        else template.innerHTML = parseMultiline(content);
	      }
	      return document.importNode(template.content, true);
	    },

	    /*
	      Removes an element from the DOM for more performant node manipulation. The element
	      is placed back into the DOM at the place it was taken from.
	    */
	    manipulate: function(element, fn){
	      var next = element.nextSibling,
	          parent = element.parentNode,
	          returned = fn.call(element) || element;
	      if (next) parent.insertBefore(returned, next);
	      else parent.appendChild(returned);
	    },

	    /* PSEUDOS */

	    applyPseudos: function(key, fn, target, source) {
	      var listener = fn,
	          pseudos = {};
	      if (key.match(':')) {
	        var matches = [],
	            valueFlag = 0;
	        key.replace(regexPseudoParens, function(match){
	          if (match == '(') return ++valueFlag == 1 ? '\u276A' : '(';
	          return !--valueFlag ? '\u276B' : ')';
	        }).replace(regexPseudoCapture, function(z, name, value, solo){
	          matches.push([name || solo, value]);
	        });
	        var i = matches.length;
	        while (i--) parsePseudo(function(){
	          var name = matches[i][0],
	              value = matches[i][1];
	          if (!xtag.pseudos[name]) throw "pseudo not found: " + name + " " + value;
	          value = (value === '' || typeof value == 'undefined') ? null : value;
	          var pseudo = pseudos[i] = Object.create(xtag.pseudos[name]);
	          pseudo.key = key;
	          pseudo.name = name;
	          pseudo.value = value;
	          pseudo['arguments'] = (value || '').split(',');
	          pseudo.action = pseudo.action || trueop;
	          pseudo.source = source;
	          pseudo.onAdd = pseudo.onAdd || noop;
	          pseudo.onRemove = pseudo.onRemove || noop;
	          var original = pseudo.listener = listener;
	          listener = function(){
	            var output = pseudo.action.apply(this, [pseudo].concat(toArray(arguments)));
	            if (output === null || output === false) return output;
	            output = pseudo.listener.apply(this, arguments);
	            pseudo.listener = original;
	            return output;
	          };
	          if (!target) pseudo.onAdd.call(fn, pseudo);
	          else target.push(pseudo);
	        });
	      }
	      for (var z in pseudos) {
	        if (pseudos[z].onCompiled) listener = pseudos[z].onCompiled(listener, pseudos[z]) || listener;
	      }
	      return listener;
	    },

	    removePseudos: function(target, pseudos){
	      pseudos.forEach(function(obj){
	        obj.onRemove.call(target, obj);
	      });
	    },

	  /*** Events ***/

	    parseEvent: function(type, fn) {
	      var pseudos = type.split(':'),
	          key = pseudos.shift(),
	          custom = xtag.customEvents[key],
	          event = xtag.merge({
	            type: key,
	            stack: noop,
	            condition: trueop,
	            capture: xtag.captureEvents[key],
	            attach: [],
	            _attach: [],
	            pseudos: '',
	            _pseudos: [],
	            onAdd: noop,
	            onRemove: noop
	          }, custom || {});
	      event.attach = toArray(event.base || event.attach);
	      event.chain = key + (event.pseudos.length ? ':' + event.pseudos : '') + (pseudos.length ? ':' + pseudos.join(':') : '');
	      var stack = xtag.applyPseudos(event.chain, fn, event._pseudos, event);
	      event.stack = function(e){
	        e.currentTarget = e.currentTarget || this;
	        var detail = e.detail || {};
	        if (!detail.__stack__) return stack.apply(this, arguments);
	        else if (detail.__stack__ == stack) {
	          e.stopPropagation();
	          e.cancelBubble = true;
	          return stack.apply(this, arguments);
	        }
	      };
	      event.listener = function(e){
	        var args = toArray(arguments),
	            output = event.condition.apply(this, args.concat([event]));
	        if (!output) return output;
	        // The second condition in this IF is to address the following Blink regression: https://code.google.com/p/chromium/issues/detail?id=367537
	        // Remove this when affected browser builds with this regression fall below 5% marketshare
	        if (e.type != key && (e.baseEvent && e.type != e.baseEvent.type)) {
	          xtag.fireEvent(e.target, key, {
	            baseEvent: e,
	            detail: output !== true && (output.__stack__ = stack) ? output : { __stack__: stack }
	          });
	        }
	        else return event.stack.apply(this, args);
	      };
	      event.attach.forEach(function(name) {
	        event._attach.push(xtag.parseEvent(name, event.listener));
	      });
	      return event;
	    },

	    addEvent: function (element, type, fn, capture) {
	      var event = typeof fn == 'function' ? xtag.parseEvent(type, fn) : fn;
	      event._pseudos.forEach(function(obj){
	        obj.onAdd.call(element, obj);
	      });
	      event._attach.forEach(function(obj) {
	        xtag.addEvent(element, obj.type, obj);
	      });
	      event.onAdd.call(element, event, event.listener);
	      element.addEventListener(event.type, event.stack, capture || event.capture);
	      return event;
	    },

	    addEvents: function (element, obj) {
	      var events = {};
	      for (var z in obj) {
	        events[z] = xtag.addEvent(element, z, obj[z]);
	      }
	      return events;
	    },

	    removeEvent: function (element, type, event) {
	      event = event || type;
	      event.onRemove.call(element, event, event.listener);
	      xtag.removePseudos(element, event._pseudos);
	      event._attach.forEach(function(obj) {
	        xtag.removeEvent(element, obj);
	      });
	      element.removeEventListener(event.type, event.stack);
	    },

	    removeEvents: function(element, obj){
	      for (var z in obj) xtag.removeEvent(element, obj[z]);
	    },

	    fireEvent: function(element, type, options){
	      var event = doc.createEvent('CustomEvent');
	      options = options || {};
	      event.initCustomEvent(type,
	        options.bubbles !== false,
	        options.cancelable !== false,
	        options.detail
	      );
	      if (options.baseEvent) inheritEvent(event, options.baseEvent);
	      element.dispatchEvent(event);
	    }

	  };

	  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (xtag), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  else if (typeof module !== 'undefined' && module.exports) module.exports = xtag;
	  else win.xtag = xtag;

	  doc.addEventListener('WebComponentsReady', function(){
	    xtag.fireEvent(doc.body, 'DOMComponentsLoaded');
	  });

	})();


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module, _) {/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.4';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      reLeadingDot = /^\./,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
	      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `map.set` because it's not chainable in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }

	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    // Don't return `set.add` because it's not chainable in IE 11.
	    set.add(value);
	    return set;
	  }

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
	        symIterator = Symbol ? Symbol.iterator : undefined,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;

	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;

	      var isCommon = newValue === undefined;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined;
	          if (newValue === undefined) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;

	        if (newValue === undefined) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (reLeadingDot.test(string)) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;

	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }

	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(args) {
	      args.push(undefined, customDefaultsAssignIn);
	      return apply(assignInWith, undefined, args);
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, customDefaultsMerge);
	      return apply(mergeWith, undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;

	      if (pattern === undefined) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)(module), __webpack_require__(2)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, $) {__webpack_require__(14);
	tag('x-mdl-progress-bar', {
	  template: __webpack_require__(18),
	  methods: {
	    setProgress: function(value) {
	        $('.mdl-progress', this)[0].MaterialProgress.setProgress(value);
	    }
	  }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(7)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Draw) {'use strict';

	var xtag = __webpack_require__(1);
	var guid = __webpack_require__(12).guid;
	var _ = __webpack_require__(2);

	module.exports = function (tagName, def) {
	    // creates an xtag from a definition file
	    // use a singleton store, so that the state can be scraped, or restored, etc
	    var dispatcher = __webpack_require__(9);
	    var uniqueTagName;
	    var methods = def.methods || {};
	    methods.template = _.template(def.template);

	    methods.draw = function () {
	        if (def.draw) Draw.call(this, def.draw.bind(this));
	    };

	    var newDef = _.merge({
	        content: methods.template(def.defaults),
	        lifecycle: {
	            created: function created() {
	                this.guid = guid();
	                uniqueTagName = tagName + '-' + this.guid;
	                if (dispatcher) dispatcher[uniqueTagName] = dispatcher[uniqueTagName] || {};
	                if (def.defaults) dispatcher[uniqueTagName] = def.defaults;
	                if (def.created) def.created.apply(this, arguments);
	            },
	            inserted: function inserted() {
	                if (def.inserted) def.inserted.apply(this, arguments);
	                this.draw();
	            },
	            attributeChanged: function attributeChanged(attrName, oldValue, newValue) {
	                dispatcher[uniqueTagName][attrName] = newValue;
	                if (def.attributeChanged) def.attributeChanged.apply(this, arguments);
	            }
	        },
	        methods: methods,
	        accessors: def.accessors
	    }, def);

	    return xtag.register(tagName, newDef);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($, Store, _) {'use strict';

	var frames = [];

	var drawTimer;
	var lastFrameIndex = 0;

	var drawDirty = false;
	var drawFn = function drawFn() {
	    var startDate = new Date();
	    requestAnimationFrame(function () {

	        if (lastFrameIndex == frames.length - 1) {
	            drawDirty = false;
	            lastFrameIndex = 0;
	        }

	        var startingFrameIndex = lastFrameIndex;

	        for (var i = startingFrameIndex; i < frames.length; i++) {

	            var isVisible = $(frames[i].element).is(':visible');

	            // for backwards compatibility, assume state is dirty
	            var isStateDirty = true;
	            var state = frames[i].stateId && Store.get(frames[i].stateId);

	            //if state exists
	            if (state) {
	                isStateDirty = state.dirty;
	            }

	            // do some work
	            if (isStateDirty && isVisible) {

	                //console.log('drawing for: ', i, frames[i].stateId, ' ', isStateDirty);
	                frames[i](state);
	                Store.dirty(frames[i].stateId, false);
	            }

	            // Do your operations
	            var endDate = new Date();
	            var seconds = (endDate.getTime() - startDate.getTime()) / 1000;

	            lastFrameIndex = i;
	        }
	        drawTimer = setTimeout(drawFn, 1000 / 24);
	    });
	};

	// draw at 24 fps
	drawTimer = setTimeout(drawFn, 1000 / 24);

	module.exports = function draw(fn) {
	    // if this is a function, push it to frames, and debounce it
	    // 48 FPS
	    if (typeof fn == 'function') {
	        var drawMethod = _.debounce(fn, 1000 / 48); // only execute a draw fn twice per frame max
	        drawMethod.stateId = this && this.guid || -1;
	        drawMethod.element = this;
	        frames.push(drawMethod);
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7), __webpack_require__(8), __webpack_require__(2)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.2.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2017-03-20T18:59Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.2.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }

	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }

	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( ">tbody", elem )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;

		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;

		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with computed style
		var valueIsBorderBox,
			styles = getStyles( elem ),
			val = curCSS( elem, name, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if ( val === "auto" ) {
			val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var doc, docElem, rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( jQuery.isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Dispatcher) {'use strict';

	var Worker = __webpack_require__(10);
	var utils = __webpack_require__(12);
	var worker = new Worker();
	var _ = __webpack_require__(2);
	var Lawnchair = __webpack_require__(13);
	var timers = {};
	var connections = {};
	var _store = {};

	var focused = true;

	window.onfocus = function () {
	    focused = true;
	};
	window.onblur = function () {
	    focused = false;
	};

	worker.onmessage = function (event) {
	    var msg = JSON.parse(event.data);
	    msg.meta = connections[msg.index].meta;
	    _store[connections[msg.index].node + connections[msg.index].lane] = msg;
	    Dispatcher.dispatch(msg.dispatchAction, msg);
	};

	module.exports = {
	    // Store.connect({
	    //  host: 'ws://localhost:9001/?token=abcd',
	    //  node: 'reader/', // or []
	    //  lane: 'currentConnectionState', // or []
	    //  event: ''
	    // });
	    connect: function connect(opts) {
	        var guid = utils.guid();
	        var node = typeof opts.node == 'function' ? opts.node() : opts.node;
	        var lane = typeof opts.lane == 'function' ? opts.lane() : opts.lane;

	        // keep track of the opts that come so we know who to communicate with
	        // when we get messages back from the worker thread		  
	        connections[guid] = opts;

	        worker.postMessage(JSON.stringify({
	            index: guid,
	            node: node,
	            lane: lane,
	            event: opts.event,
	            sync: opts.sync,
	            host: opts.host,
	            action: 'downlink'
	        }));
	    },

	    query: function query(queryString, dispatchAction) {
	        worker.postMessage(JSON.stringify({
	            action: 'query',
	            query: queryString,
	            dispatchAction: dispatchAction
	        }));
	    },
	    dirty: function dirty(key, value) {
	        if (_store[key]) {
	            _store[key].dirty = value;
	        }
	    },
	    put: function put(key, value) {
	        // cheap for now, anytime data is put here, dirty
	        // diff it todo
	        // puts should queue by key and flush when appropriate
	        if (!value) {
	            return;
	        }

	        var _value = _store[key] || {};
	        _store[key] = utils.mix.call(_value, value);

	        if (_store[key]) {
	            _store[key].dirty = true; // draw.js will set the dirty state after draw
	        }
	    },

	    get: function get(key) {
	        return _store[key];
	    },

	    // todo: offload these timers into webworkers if possible, so that they can run
	    // on an independent thread, and then send state back to the UI to draw
	    timer: function timer(callback, delay) {
	        var guid = utils.guid();
	        var fn = function fn() {
	            if (document.hidden === false) _.merge(_store, callback());
	            timers[guid] = setTimeout(fn, delay);
	        };

	        timers[guid] = setTimeout(fn, delay);

	        return timers[guid];
	    },

	    clearTimer: function clearTimer(timer) {
	        clearTimeout(timers[guid]);
	    }
	};

	var readyStateCheckInterval = window.setInterval(function () {
	    //attach a ready state listener to fire off our first updates when the dom is available
	    if (document.readyState === 'complete') {
	        window.clearInterval(readyStateCheckInterval);
	        // Access it later... Yes even after a page refresh!
	        var Lawnchair = __webpack_require__(13);
	        var store = new Lawnchair({
	            name: 'ui_state'
	        }, function (store) {
	            store.get('storage', function (me) {
	                _store = me.storage;
	            });
	        });
	    }
	}, 10);

	window.addEventListener("unload", function () {
	    var Lawnchair = __webpack_require__(13);
	    var store = new Lawnchair({
	        name: 'ui_state'
	    }, function (store) {

	        // save ui state store
	        var me = {
	            key: 'storage',
	            storage: _store
	        };
	        store.save(me);
	    });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';

	// shallow dispatcher
	var listeners = [];
	var after = {};
	module.exports = {
	    dispatch: function dispatch(action, data) {

	        console.log('dispatching: ', action);
	        for (var i = 0; i < listeners.length; i++) {
	            if (typeof listeners[i] === 'function') {
	                listeners[i].call(this, action, data);
	                // if there are any actions waiting to dispatch after this
	                // one has completed then do it
	                if (after[action]) {
	                    var afters = after[action];
	                    after = {};
	                    $.each(afters, function (idx, val) {
	                        dispatch(val.action, val.data);
	                    });
	                }
	            }
	        }
	    },
	    subscribe: function subscribe(callback) {
	        if (typeof callback === 'function') listeners.push(callback);
	    },
	    dispatchAfter: function dispatchAfter(afterAction, action, data) {

	        var afterStack = after[afterAction] || {};

	        afterStack[action] = {
	            action: action,
	            data: data
	        };

	        after[afterAction] = afterStack;
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
		return __webpack_require__(11)("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Swim) {'use strict';\n\n\tvar jsonQuery = __webpack_require__(10);\n\n\tvar connections = {};\n\tvar data = {\n\t    table: []\n\t};\n\n\tonmessage = function onmessage(event) {\n\t    var opts = JSON.parse(event.data);\n\n\t    if (opts.action === 'downlink') {\n\t        var host;\n\t        var i;\n\t        var connection;\n\t        var connection;\n\n\t        (function () {\n\t            var swimEventHandler = function swimEventHandler(msg, dispatchAction) {\n\n\t                msg.dispatchAction = dispatchAction;\n\t                msg.index = opts.index;\n\n\t                if (msg.body) {\n\t                    for (var i = 0; i < msg.body.length; i++) {\n\t                        for (var key in msg.body[i]) {\n\t                            if (msg.body[i].hasOwnProperty(key)) {\n\t                                msg[key] = msg.body[i][key];\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\n\t                postMessage(JSON.stringify(msg));\n\t                data.table.push(msg);\n\t            };\n\n\t            host = connections[opts.host] || Swim.downlink().host(opts.host);\n\n\t            connections[opts.host] = host;\n\n\t            if (opts.node instanceof Array) {\n\n\t                // if node is a list of nodes, lets connect to all of them\n\t                // we should check lanes as well to give this more flexability\n\t                for (i = 0; i < opts.node.length; i++) {\n\t                    connection = host[opts.node[i] + opts.lane] || host.node(opts.node[i]);\n\n\n\t                    connection.lane(opts.lane).onEvent(function () {\n\t                        if (opts.event) swimEventHandler(msg, opts.event);\n\t                    }).onSync(function (msg) {\n\t                        if (opts.sync) swimEventHandler(msg, opts.sync);\n\t                    }).sync();\n\t                    host[opts.node[i] + opts.lane] = connection;\n\t                }\n\t            } else {\n\t                // otherwise just connect to one\n\t                connection = host[opts.node + opts.lane] || host.node(opts.node);\n\n\n\t                connection.lane(opts.lane).onEvent(function (msg) {\n\t                    //console.log('event', msg)\n\t                    if (opts.event) swimEventHandler(msg, opts.event);\n\t                }).onSync(function (msg) {\n\t                    //console.log('sync', msg)\n\t                    if (opts.sync) swimEventHandler(msg, opts.sync);\n\t                }).sync();\n\t                host[opts.node + opts.lane] = connection;\n\t            }\n\t        })();\n\t    }\n\n\t    if (opts.action == 'unlink') {}\n\n\t    if (opts.action === 'query') {\n\t        var queryReturn = jsonQuery(opts.query, {\n\t            data: data\n\t        });\n\t        queryReturn.dispatchAction = opts.dispatchAction;\n\t        postMessage(JSON.stringify(queryReturn));\n\t    }\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n\tvar config = __webpack_require__(2);\n\tvar recon = global.recon || __webpack_require__(3);\n\tvar proto = __webpack_require__(5);\n\tvar WebSocket = global.WebSocket || __webpack_require__(7).w3cwebsocket;\n\n\n\tfunction Client(options) {\n\t  options = options || {};\n\t  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n\t  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n\t  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n\t}\n\tObject.defineProperty(Client.prototype, 'onChannelConnect', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onConnect === 'function') {\n\t      this.onConnect(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Client.prototype, 'onChannelDisconnect', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onDisconnect === 'function') {\n\t      this.onDisconnect(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Client.prototype, 'onChannelError', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onError === 'function') {\n\t      this.onError(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Client.prototype, 'onChannelAuthorize', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onAuthorize === 'function') {\n\t      this.onAuthorize(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Client.prototype, 'onChannelDeauthorize', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onDeauthorize === 'function') {\n\t      this.onDeauthorize(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {\n\t  value: function (name, args) {\n\t    var hostUri, nodeUri, laneUri, options;\n\t    if (args.length === 2) {\n\t      options = {};\n\t      laneUri = args[1];\n\t      nodeUri = args[0];\n\t      hostUri = Client.extractHostUri(nodeUri);\n\t    } else if (args.length === 3) {\n\t      if (typeof args[2] === 'object') {\n\t        options = args[2];\n\t        laneUri = args[1];\n\t        nodeUri = args[0];\n\t        hostUri = Client.extractHostUri(nodeUri);\n\t      } else {\n\t        hostUri = args[0];\n\t        nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n\t        laneUri = args[2];\n\t        options = {};\n\t      }\n\t    } else {\n\t      hostUri = args[0];\n\t      nodeUri = Client.resolveNodeUri(hostUri, args[1]);\n\t      laneUri = args[2];\n\t      options = args[3];\n\t    }\n\t    var channel = this.getOrCreateChannel(hostUri);\n\t    return channel[name](nodeUri, laneUri, options);\n\t  },\n\t  configurable: true\n\t});\n\tClient.prototype.getOrCreateChannel = function (hostUri) {\n\t  var channel = this.channels[hostUri];\n\t  if (channel === undefined) {\n\t    if (this.options.noWebSocket || /^http/.test(hostUri)) {\n\t      channel = new HttpSocketChannel(this, hostUri, this.options);\n\t    } else {\n\t      channel = new WebSocketChannel(this, hostUri, this.options);\n\t    }\n\t    this.channels[hostUri] = channel;\n\t  }\n\t  return channel;\n\t};\n\tClient.prototype.authorize = function (hostUri, credentials) {\n\t  var channel = this.getOrCreateChannel(hostUri);\n\t  channel.authorize(credentials);\n\t};\n\tClient.prototype.downlink = function () {\n\t  return new DownlinkBuilder(null, this);\n\t};\n\tClient.prototype.link = function () {\n\t  return this.callChannelWithLinkArgs('link', arguments);\n\t};\n\tClient.prototype.sync = function () {\n\t  return this.callChannelWithLinkArgs('sync', arguments);\n\t};\n\tClient.prototype.syncList = function () {\n\t  return this.callChannelWithLinkArgs('syncList', arguments);\n\t};\n\tClient.prototype.syncMap = function () {\n\t  return this.callChannelWithLinkArgs('syncMap', arguments);\n\t};\n\tClient.prototype.command = function () {\n\t  var hostUri, nodeUri, laneUri, body;\n\t  if (arguments.length === 3) {\n\t    body = arguments[2];\n\t    laneUri = arguments[1];\n\t    nodeUri = arguments[0];\n\t    hostUri = Client.extractHostUri(nodeUri);\n\t  } else {\n\t    hostUri = arguments[0];\n\t    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n\t    laneUri = arguments[2];\n\t    body = arguments[3];\n\t  }\n\t  var channel = this.getOrCreateChannel(hostUri);\n\t  channel.command(nodeUri, laneUri, body);\n\t};\n\tClient.prototype.host = function (hostUri) {\n\t  var channel = this.getOrCreateChannel(hostUri);\n\t  return new HostScope(channel, hostUri);\n\t};\n\tClient.prototype.node = function () {\n\t  var hostUri, nodeUri;\n\t  if (arguments.length === 1) {\n\t    nodeUri = arguments[0];\n\t    hostUri = Client.extractHostUri(nodeUri);\n\t  } else {\n\t    hostUri = arguments[0];\n\t    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n\t  }\n\t  var channel = this.getOrCreateChannel(hostUri);\n\t  return new NodeScope(channel, hostUri, nodeUri);\n\t};\n\tClient.prototype.lane = function () {\n\t  var hostUri, nodeUri, laneUri;\n\t  if (arguments.length === 2) {\n\t    laneUri = arguments[1];\n\t    nodeUri = arguments[0];\n\t    hostUri = Client.extractHostUri(nodeUri);\n\t  } else {\n\t    hostUri = arguments[0];\n\t    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);\n\t    laneUri = arguments[2];\n\t  }\n\t  var channel = this.getOrCreateChannel(hostUri);\n\t  return new LaneScope(channel, hostUri, nodeUri, laneUri);\n\t};\n\tClient.prototype.close = function () {\n\t  var channels = this.channels;\n\t  Object.defineProperty(this, 'channels', {value: {}, configurable: true});\n\t  for (var hostUri in channels) {\n\t    var channel = channels[hostUri];\n\t    channel.close();\n\t  }\n\t};\n\tClient.extractHostUri = function (nodeUri) {\n\t  var uri = recon.uri.parse(nodeUri);\n\t  var scheme = uri.scheme;\n\t  if (scheme === 'swim') scheme = 'ws';\n\t  else if (scheme === 'swims') scheme = 'wss';\n\t  return recon.uri.stringify({\n\t    scheme: scheme,\n\t    authority: uri.authority\n\t  });\n\t};\n\tClient.resolveNodeUri = function (hostUri, nodeUri) {\n\t  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));\n\t};\n\n\n\tfunction Scope(channel) {\n\t  Object.defineProperty(this, 'channel', {value: channel});\n\t  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n\t  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});\n\t  channel.registerDelegate(this);\n\t}\n\tObject.defineProperty(Scope.prototype, 'isConnected', {\n\t  get: function () {\n\t    return this.channel.isConnected;\n\t  },\n\t  enumerable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'isAuthorized', {\n\t  get: function () {\n\t    return this.channel.isAuthorized;\n\t  },\n\t  enumerable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'session', {\n\t  get: function () {\n\t    return this.channel.session;\n\t  },\n\t  enumerable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'onChannelConnect', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onConnect === 'function') {\n\t      this.onConnect(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'onChannelDisconnect', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onDisconnect === 'function') {\n\t      this.onDisconnect(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'onChannelError', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onError === 'function') {\n\t      this.onError(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'onChannelAuthorize', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onAuthorize === 'function') {\n\t      this.onAuthorize(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Scope.prototype, 'onChannelDeauthorize', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onDeauthorize === 'function') {\n\t      this.onDeauthorize(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tScope.prototype.registerDownlink = function (downlink) {\n\t  var scope = this;\n\t  Object.defineProperty(downlink, 'onChannelClose', {\n\t    value: function () {\n\t      scope.unregisterDownlink(downlink);\n\t      downlink.__proto__.onChannelClose.call(downlink);\n\t    },\n\t    configurable: true\n\t  });\n\t  this.downlinks.push(downlink);\n\t};\n\tScope.prototype.unregisterDownlink = function (downlink) {\n\t  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {\n\t    if (downlink === this.downlinks[i]) {\n\t      this.downlinks.splice(i, 1);\n\t      return;\n\t    }\n\t  }\n\t};\n\tScope.prototype.close = function () {\n\t  this.channel.unregisterDelegate(this);\n\t  var downlinks = this.downlinks;\n\t  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n\t  for (var i = 0, n = downlinks.length; i < n; i += 1) {\n\t    var downlink = downlinks[i];\n\t    downlink.close();\n\t  }\n\t};\n\n\n\tfunction HostScope(channel, hostUri) {\n\t  Scope.call(this, channel);\n\t  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n\t  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n\t}\n\tHostScope.prototype = Object.create(Scope.prototype);\n\tHostScope.prototype.constructor = HostScope;\n\tHostScope.prototype.authorize = function (credentials) {\n\t  this.channel.authorize(credentials);\n\t};\n\tHostScope.prototype.downlink = function () {\n\t  return new DownlinkBuilder(this.channel, this).host(this.hostUri);\n\t};\n\tHostScope.prototype.link = function (nodeUri, laneUri, options) {\n\t  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tHostScope.prototype.sync = function (nodeUri, laneUri, options) {\n\t  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tHostScope.prototype.syncList = function (nodeUri, laneUri, options) {\n\t  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tHostScope.prototype.syncMap = function (nodeUri, laneUri, options) {\n\t  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tHostScope.prototype.command = function (nodeUri, laneUri, body) {\n\t  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);\n\t};\n\tHostScope.prototype.node = function (nodeUri) {\n\t  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));\n\t};\n\tHostScope.prototype.lane = function (nodeUri, laneUri) {\n\t  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);\n\t};\n\n\n\tfunction NodeScope(channel, hostUri, nodeUri) {\n\t  Scope.call(this, channel);\n\t  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n\t  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n\t  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n\t}\n\tNodeScope.prototype = Object.create(Scope.prototype);\n\tNodeScope.prototype.constructor = NodeScope;\n\tNodeScope.prototype.downlink = function () {\n\t  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);\n\t};\n\tNodeScope.prototype.link = function (laneUri, options) {\n\t  var downlink = this.channel.link(this.nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tNodeScope.prototype.sync = function (laneUri, options) {\n\t  var downlink = this.channel.sync(this.nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tNodeScope.prototype.syncList = function (laneUri, options) {\n\t  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tNodeScope.prototype.syncMap = function (laneUri, options) {\n\t  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tNodeScope.prototype.command = function (laneUri, body) {\n\t  this.channel.command(this.nodeUri, laneUri, body);\n\t};\n\tNodeScope.prototype.lane = function (laneUri) {\n\t  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);\n\t};\n\n\n\tfunction LaneScope(channel, hostUri, nodeUri, laneUri) {\n\t  Scope.call(this, channel);\n\t  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n\t  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n\t  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n\t  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});\n\t}\n\tLaneScope.prototype = Object.create(Scope.prototype);\n\tLaneScope.prototype.constructor = LaneScope;\n\tLaneScope.prototype.downlink = function () {\n\t  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);\n\t};\n\tLaneScope.prototype.link = function (options) {\n\t  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tLaneScope.prototype.sync = function (options) {\n\t  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tLaneScope.prototype.syncList = function (options) {\n\t  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tLaneScope.prototype.syncMap = function (options) {\n\t  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tLaneScope.prototype.command = function (body) {\n\t  this.channel.command(this.nodeUri, this.laneUri, body);\n\t};\n\n\n\tfunction Channel(client, hostUri, options) {\n\t  options = options || {};\n\t  Object.defineProperty(this, 'client', {value: client, configurable: true});\n\t  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n\t  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n\t  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});\n\t  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});\n\t  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});\n\t  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});\n\t  Object.defineProperty(this, 'delegates', {value: [], configurable: true});\n\t  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n\t  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});\n\t  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});\n\t  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});\n\t  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});\n\t  Object.defineProperty(this, 'socket', {value: null, writable: true});\n\t}\n\tObject.defineProperty(Channel.prototype, 'protocols', {\n\t  get: function () {\n\t    return this.options.protocols;\n\t  }\n\t});\n\tObject.defineProperty(Channel.prototype, 'maxReconnectTimeout', {\n\t  get: function () {\n\t    return this.options.maxReconnectTimeout || 30000;\n\t  }\n\t});\n\tObject.defineProperty(Channel.prototype, 'idleTimeout', {\n\t  get: function () {\n\t    return this.options.idleTimeout || 1000;\n\t  }\n\t});\n\tObject.defineProperty(Channel.prototype, 'sendBufferSize', {\n\t  get: function () {\n\t    return this.options.sendBufferSize || 1024;\n\t  }\n\t});\n\tChannel.prototype.resolve = function (unresolvedUri) {\n\t  return this.uriCache.resolve(unresolvedUri);\n\t};\n\tChannel.prototype.unresolve = function (resolvedUri) {\n\t  return this.uriCache.unresolve(resolvedUri);\n\t};\n\tChannel.prototype.authorize = function (credentials) {\n\t  if (recon.equal(credentials, this.credentials)) return;\n\t  this.credentials = credentials;\n\t  if (this.isConnected) {\n\t    var request = new proto.AuthRequest(credentials);\n\t    this.push(request);\n\t  } else {\n\t    this.open();\n\t  }\n\t};\n\tChannel.prototype.link = function (nodeUri, laneUri, options) {\n\t  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tChannel.prototype.sync = function (nodeUri, laneUri, options) {\n\t  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tChannel.prototype.syncList = function (nodeUri, laneUri, options) {\n\t  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tChannel.prototype.syncMap = function (nodeUri, laneUri, options) {\n\t  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tChannel.prototype.command = function (nodeUri, laneUri, body) {\n\t  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);\n\t  this.push(message);\n\t};\n\tChannel.prototype.registerDelegate = function (delegate) {\n\t  this.delegates.push(delegate);\n\t};\n\tChannel.prototype.unregisterDelegate = function (delegate) {\n\t  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n\t    if (this.delegates[i] === delegate) {\n\t      this.delegates.splice(i, 1);\n\t    }\n\t  }\n\t};\n\tChannel.prototype.registerDownlink = function (downlink) {\n\t  this.clearIdle();\n\t  var nodeUri = downlink.nodeUri;\n\t  var laneUri = downlink.laneUri;\n\t  var nodeDownlinks = this.downlinks[nodeUri] || {};\n\t  var laneDownlinks = nodeDownlinks[laneUri] || [];\n\t  laneDownlinks.push(downlink);\n\t  nodeDownlinks[laneUri] = laneDownlinks;\n\t  this.downlinks[nodeUri] = nodeDownlinks;\n\t  if (this.isConnected) {\n\t    downlink.onChannelConnect({hostUri: this.hostUri});\n\t  } else {\n\t    this.open();\n\t  }\n\t};\n\tChannel.prototype.unregisterDownlink = function (downlink) {\n\t  var nodeUri = downlink.nodeUri;\n\t  var laneUri = downlink.laneUri;\n\t  var nodeDownlinks = this.downlinks[nodeUri];\n\t  if (nodeDownlinks) {\n\t    var laneDownlinks = nodeDownlinks[laneUri];\n\t    if (laneDownlinks) {\n\t      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        if (laneDownlinks[i] === downlink) {\n\t          laneDownlinks.splice(i, 1);\n\t          if (laneDownlinks.length === 0) {\n\t            delete nodeDownlinks[laneUri];\n\t            if (Object.keys(nodeDownlinks).length === 0) {\n\t              delete this.downlinks[nodeUri];\n\t              this.watchIdle();\n\t            }\n\t            if (this.isConnected) {\n\t              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);\n\t              downlink.onUnlinkRequest(request);\n\t              this.push(request);\n\t            }\n\t          }\n\t          downlink.onChannelClose();\n\t        }\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onEnvelope = function (envelope) {\n\t  if (envelope.isEventMessage) {\n\t    this.onEventMessage(envelope);\n\t  } else if (envelope.isCommandMessage) {\n\t    this.onCommandMessage(envelope);\n\t  } else if (envelope.isLinkRequest) {\n\t    this.onLinkRequest(envelope);\n\t  } else if (envelope.isLinkedResponse) {\n\t    this.onLinkedResponse(envelope);\n\t  } else if (envelope.isSyncRequest) {\n\t    this.onSyncRequest(envelope);\n\t  } else if (envelope.isSyncedResponse) {\n\t    this.onSyncedResponse(envelope);\n\t  } else if (envelope.isUnlinkRequest) {\n\t    this.onUnlinkRequest(envelope);\n\t  } else if (envelope.isUnlinkedResponse) {\n\t    this.onUnlinkedResponse(envelope);\n\t  } else if (envelope.isAuthRequest) {\n\t    this.onAuthRequest(envelope);\n\t  } else if (envelope.isAuthedResponse) {\n\t    this.onAuthedResponse(envelope);\n\t  } else if (envelope.isDeauthRequest) {\n\t    this.onDeauthRequest(envelope);\n\t  } else if (envelope.isDeauthedResponse) {\n\t    this.onDeauthedResponse(envelope);\n\t  }\n\t};\n\tChannel.prototype.onEventMessage = function (message) {\n\t  var nodeUri = this.resolve(message.node);\n\t  var laneUri = message.lane;\n\t  var nodeDownlinks = this.downlinks[nodeUri];\n\t  if (nodeDownlinks) {\n\t    var laneDownlinks = nodeDownlinks[laneUri];\n\t    if (laneDownlinks) {\n\t      var resolvedMessage = message.withAddress(nodeUri);\n\t      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onEventMessage(resolvedMessage);\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onCommandMessage = function (message) {\n\t  // TODO: Support client services.\n\t};\n\tChannel.prototype.onLinkRequest = function (request) {\n\t  // TODO: Support client services.\n\t};\n\tChannel.prototype.onLinkedResponse = function (response) {\n\t  var nodeUri = this.resolve(response.node);\n\t  var laneUri = response.lane;\n\t  var nodeDownlinks = this.downlinks[nodeUri];\n\t  if (nodeDownlinks) {\n\t    var laneDownlinks = nodeDownlinks[laneUri];\n\t    if (laneDownlinks) {\n\t      var resolvedResponse = response.withAddress(nodeUri);\n\t      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onLinkedResponse(resolvedResponse);\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onSyncRequest = function (request) {\n\t  // TODO: Support client services.\n\t};\n\tChannel.prototype.onSyncedResponse = function (response) {\n\t  var nodeUri = this.resolve(response.node);\n\t  var laneUri = response.lane;\n\t  var nodeDownlinks = this.downlinks[nodeUri];\n\t  if (nodeDownlinks) {\n\t    var laneDownlinks = nodeDownlinks[laneUri];\n\t    if (laneDownlinks) {\n\t      var resolvedResponse = response.withAddress(nodeUri);\n\t      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onSyncedResponse(resolvedResponse);\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onUnlinkRequest = function (request) {\n\t  // TODO: Support client services.\n\t};\n\tChannel.prototype.onUnlinkedResponse = function (response) {\n\t  var nodeUri = this.resolve(response.node);\n\t  var laneUri = response.lane;\n\t  var nodeDownlinks = this.downlinks[nodeUri];\n\t  if (nodeDownlinks) {\n\t    var laneDownlinks = nodeDownlinks[laneUri];\n\t    if (laneDownlinks) {\n\t      delete nodeDownlinks[laneUri];\n\t      if (Object.keys(nodeDownlinks).length === 0) {\n\t        delete this.downlinks[nodeUri];\n\t      }\n\t      var resolvedResponse = response.withAddress(nodeUri);\n\t      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onUnlinkedResponse(resolvedResponse);\n\t        downlink.onChannelClose();\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onAuthRequest = function (request) {\n\t  // TODO: Support client services.\n\t};\n\tChannel.prototype.onAuthedResponse = function (response) {\n\t  this.isAuthorized = true;\n\t  this.session = response.body;\n\t  var info = {hostUri: this.hostUri, session: this.session};\n\t  this.client.onChannelAuthorize(info);\n\t  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n\t    var delegate = this.delegates[i];\n\t    delegate.onChannelAuthorize(info);\n\t  }\n\t};\n\tChannel.prototype.onDeauthRequest = function (request) {\n\t  // TODO: Support client services.\n\t};\n\tChannel.prototype.onDeauthedResponse = function (response) {\n\t  this.isAuthorized = false;\n\t  this.session = null;\n\t  var info = {hostUri: this.hostUri, session: response.body};\n\t  this.client.onChannelDeauthorize(info);\n\t  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n\t    var delegate = this.delegates[i];\n\t    delegate.onChannelDeauthorize(info);\n\t  }\n\t};\n\tChannel.prototype.onConnect = function () {\n\t  var info = {hostUri: this.hostUri};\n\t  this.client.onChannelConnect(info);\n\t  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n\t    var delegate = this.delegates[i];\n\t    delegate.onChannelConnect(info);\n\t  }\n\t  for (var nodeUri in this.downlinks) {\n\t    var nodeDownlinks = this.downlinks[nodeUri];\n\t    for (var laneUri in nodeDownlinks) {\n\t      var laneDownlinks = nodeDownlinks[laneUri];\n\t      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onChannelConnect(info);\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onDisconnect = function () {\n\t  var info = {hostUri: this.hostUri};\n\t  this.client.onChannelDisconnect(info);\n\t  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n\t    var delegate = this.delegates[i];\n\t    delegate.onChannelDisconnect(info);\n\t  }\n\t  for (var nodeUri in this.downlinks) {\n\t    var nodeDownlinks = this.downlinks[nodeUri];\n\t    for (var laneUri in nodeDownlinks) {\n\t      var laneDownlinks = nodeDownlinks[laneUri].slice();\n\t      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onChannelDisconnect(info);\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.onError = function () {\n\t  var info = {hostUri: this.hostUri};\n\t  this.client.onChannelError(info);\n\t  for (var i = 0, n = this.delegates.length; i < n; i += 1) {\n\t    var delegate = this.delegates[i];\n\t    delegate.onChannelError(info);\n\t  }\n\t  for (var nodeUri in this.downlinks) {\n\t    var nodeDownlinks = this.downlinks[nodeUri];\n\t    for (var laneUri in nodeDownlinks) {\n\t      var laneDownlinks = nodeDownlinks[laneUri];\n\t      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onChannelError(info);\n\t      }\n\t    }\n\t  }\n\t};\n\tChannel.prototype.reconnect = function () {\n\t  if (this.reconnectTimer) return;\n\t  if (!this.reconnectTimeout) {\n\t    var jitter = 1000 * Math.random();\n\t    this.reconnectTimeout = 500 + jitter;\n\t  } else {\n\t    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;\n\t    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);\n\t  }\n\t  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);\n\t};\n\tChannel.prototype.clearReconnect = function () {\n\t  if (this.reconnectTimer) {\n\t    clearTimeout(this.reconnectTimer);\n\t    this.reconnectTimer = null;\n\t    this.reconnectTimeout = 0;\n\t  }\n\t};\n\tChannel.prototype.clearIdle = function () {\n\t  if (this.idleTimer) {\n\t    clearTimeout(this.idleTimer);\n\t    this.idleTimer = null;\n\t  }\n\t};\n\tChannel.prototype.watchIdle = function () {\n\t  if (this.isConnected && this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n\t    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);\n\t  }\n\t};\n\tChannel.prototype.checkIdle = function () {\n\t  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {\n\t    this.close();\n\t  }\n\t};\n\tChannel.prototype.close = function () {\n\t  var downlinks = this.downlinks;\n\t  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});\n\t  for (var nodeUri in downlinks) {\n\t    var nodeDownlinks = downlinks[nodeUri];\n\t    for (var laneUri in nodeDownlinks) {\n\t      var laneDownlinks = nodeDownlinks[laneUri];\n\t      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {\n\t        var downlink = laneDownlinks[i];\n\t        downlink.onChannelClose();\n\t      }\n\t    }\n\t  }\n\t};\n\n\n\tfunction WebSocketChannel(client, hostUri, options) {\n\t  Channel.call(this, client, hostUri, options);\n\t}\n\tWebSocketChannel.prototype = Object.create(Channel.prototype);\n\tWebSocketChannel.prototype.constructor = WebSocketChannel;\n\tObject.defineProperty(WebSocketChannel.prototype, 'isConnected', {\n\t  get: function () {\n\t    return this.socket && this.socket.readyState === this.socket.OPEN;\n\t  },\n\t  enumerable: true\n\t});\n\tWebSocketChannel.prototype.open = function () {\n\t  this.clearReconnect();\n\t  if (!this.socket) {\n\t    this.socket = this.protocols ?\n\t      new WebSocket(this.hostUri, this.protocols) :\n\t      new WebSocket(this.hostUri);\n\t    this.socket.onopen = this.onWebSocketOpen.bind(this);\n\t    this.socket.onmessage = this.onWebSocketMessage.bind(this);\n\t    this.socket.onerror = this.onWebSocketError.bind(this);\n\t    this.socket.onclose = this.onWebSocketClose.bind(this);\n\t  }\n\t};\n\tWebSocketChannel.prototype.close = function () {\n\t  this.clearReconnect();\n\t  this.clearIdle();\n\t  if (this.socket) {\n\t    this.socket.close();\n\t    this.socket = null;\n\t  }\n\t  Channel.prototype.close.call(this);\n\t};\n\tWebSocketChannel.prototype.push = function (envelope) {\n\t  if (this.isConnected) {\n\t    this.clearIdle();\n\t    var text = proto.stringify(envelope);\n\t    this.socket.send(text);\n\t    this.watchIdle();\n\t  } else if (envelope.isCommandMessage) {\n\t    if (this.sendBuffer.length < this.sendBufferSize) {\n\t      this.sendBuffer.push(envelope);\n\t    } else {\n\t      // TODO\n\t    }\n\t    this.open();\n\t  }\n\t};\n\tWebSocketChannel.prototype.onWebSocketOpen = function () {\n\t  if (this.credentials) {\n\t    var request = new proto.AuthRequest(this.credentials);\n\t    this.push(request);\n\t  }\n\t  this.onConnect();\n\t  var envelope;\n\t  while ((envelope = this.sendBuffer.shift())) {\n\t    this.push(envelope);\n\t  }\n\t  this.watchIdle();\n\t};\n\tWebSocketChannel.prototype.onWebSocketMessage = function (message) {\n\t  var data = message.data;\n\t  if (typeof data === 'string') {\n\t    var envelope = proto.parse(data);\n\t    if (envelope) {\n\t      this.onEnvelope(envelope);\n\t    }\n\t  }\n\t};\n\tWebSocketChannel.prototype.onWebSocketError = function () {\n\t  this.onError();\n\t  this.clearIdle();\n\t  if (this.socket) {\n\t    this.socket.onopen = null;\n\t    this.socket.onmessage = null;\n\t    this.socket.onerror = null;\n\t    this.socket.onclose = null;\n\t    this.socket.close();\n\t    this.socket = null;\n\t  }\n\t};\n\tWebSocketChannel.prototype.onWebSocketClose = function () {\n\t  this.isAuthorized = false;\n\t  this.session = null;\n\t  this.socket = null;\n\t  this.onDisconnect();\n\t  this.clearIdle();\n\t  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n\t    this.reconnect();\n\t  }\n\t};\n\n\n\tfunction HttpSocketChannel(client, hostUri, options) {\n\t  Channel.call(this, client, hostUri, options);\n\t  Object.defineProperty(this, 'channelId', {value: null, writable: true});\n\t  Object.defineProperty(this, 'parser', {value: null, writable: true});\n\t  Object.defineProperty(this, 'offset', {value: 0, writable: true});\n\t  Object.defineProperty(this, 'sendTimer', {value: null, writable: true});\n\t}\n\tHttpSocketChannel.prototype = Object.create(Channel.prototype);\n\tHttpSocketChannel.prototype.constructor = HttpSocketChannel;\n\tObject.defineProperty(HttpSocketChannel.prototype, 'sendDelay', {\n\t  get: function () {\n\t    return this.options.sendDelay || 100;\n\t  }\n\t});\n\tObject.defineProperty(HttpSocketChannel.prototype, 'isConnected', {\n\t  get: function () {\n\t    return this.socket && this.socket.readyState >= 1;\n\t  },\n\t  enumerable: true\n\t});\n\tHttpSocketChannel.prototype.throttleSend = function () {\n\t  if (!this.sendTimer) {\n\t    this.sendTimer = setTimeout(this.send.bind(this), this.sendDelay);\n\t  }\n\t};\n\tHttpSocketChannel.prototype.clearSend = function () {\n\t  if (this.sendTimer) {\n\t    clearTimeout(this.sendTimer);\n\t    this.sendTimer = null;\n\t  }\n\t};\n\tHttpSocketChannel.prototype.open = function () {\n\t  this.clearReconnect();\n\t  if (!this.socket) {\n\t    this.socket = new XMLHttpRequest();\n\t    this.socket.open('POST', this.hostUri);\n\t    this.socket.onreadystatechange = this.onHttpSocketChange.bind(this);\n\t    this.socket.onloadstart = this.onHttpSocketOpen.bind(this);\n\t    this.socket.onprogress = this.onHttpSocketData.bind(this);\n\t    this.socket.onload = this.onHttpSocketData.bind(this);\n\t    this.socket.onerror = this.onHttpSocketError.bind(this);\n\t    this.socket.onloadend = this.onHttpSocketClose.bind(this);\n\t    this.socket.setRequestHeader('X-Swim-Connection', 'Upgrade');\n\t    this.socket.send();\n\t  }\n\t};\n\tHttpSocketChannel.prototype.close = function () {\n\t  this.clearReconnect();\n\t  this.clearIdle();\n\t  this.clearSend();\n\t  if (this.socket) {\n\t    this.socket.abort();\n\t    this.socket = null;\n\t  }\n\t  Channel.prototype.close.call(this);\n\t};\n\tHttpSocketChannel.prototype.send = function () {\n\t  this.clearSend();\n\t  if (!this.channelId) {\n\t    this.throttleSend();\n\t    return;\n\t  }\n\t  var request = new XMLHttpRequest();\n\t  request.open('POST', this.hostUri);\n\t  request.setRequestHeader('X-Swim-Channel', this.channelId);\n\t  this.watchIdle();\n\t  var body = '';\n\t  var envelope;\n\t  while ((envelope = this.sendBuffer.shift())) {\n\t    body = body + proto.stringify(envelope) + '\\n';\n\t  }\n\t  request.send(body);\n\t};\n\tHttpSocketChannel.prototype.push = function (envelope) {\n\t  if (this.isConnected) {\n\t    this.clearIdle();\n\t    this.sendBuffer.push(envelope);\n\t    this.throttleSend();\n\t  } else if (envelope.isCommandMessage) {\n\t    if (this.sendBuffer.length < this.sendBufferSize) {\n\t      this.sendBuffer.push(envelope);\n\t    } else {\n\t      // TODO\n\t    }\n\t    this.open();\n\t  }\n\t};\n\tHttpSocketChannel.prototype.onHttpSocketOpen = function () {\n\t  this.parser = new recon.BlockParser();\n\t  this.offset = 0;\n\t  this.onConnect();\n\t  this.watchIdle();\n\t};\n\tHttpSocketChannel.prototype.onHttpSocketChange = function () {\n\t  if (this.socket.readyState === 2) {\n\t    this.channelId = this.socket.getResponseHeader('X-Swim-Channel');\n\t    if (!this.channelId) {\n\t      this.socket.abort();\n\t    }\n\t  }\n\t}\n\tHttpSocketChannel.prototype.onHttpSocketData = function () {\n\t  var input = new LineIterator(this.socket.responseText, this.offset, true);\n\t  while ((!input.isInputEmpty() || input.isInputDone()) && this.parser.isCont()) {\n\t    var next = this.parser;\n\t    while ((!input.isEmpty() || input.isDone()) && next.isCont()) {\n\t      next = next.feed(input);\n\t    }\n\t    if (!input.isInputEmpty() && input.head() === 10/*'\\n'*/) {\n\t      input.step();\n\t    }\n\t    this.offset = input.index;\n\t    if (next.isDone()) {\n\t      var envelope = proto.decode(next.state());\n\t      if (envelope) {\n\t        this.onEnvelope(envelope);\n\t      }\n\t      this.parser = new recon.BlockParser();\n\t    } else if (next.isError()) {\n\t      // TODO\n\t      this.parser = new recon.BlockParser();\n\t      break;\n\t    } else {\n\t      this.parser = next;\n\t    }\n\t  }\n\t};\n\tHttpSocketChannel.prototype.onHttpSocketError = function () {\n\t  this.onError();\n\t  this.clearIdle();\n\t};\n\tHttpSocketChannel.prototype.onHttpSocketClose = function () {\n\t  this.isAuthorized = false;\n\t  this.session = null;\n\t  this.socket = null;\n\t  this.onDisconnect();\n\t  this.clearIdle();\n\t  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {\n\t    this.reconnect();\n\t  }\n\t};\n\n\n\tfunction LineIterator(string, index, more) {\n\t  recon.StringIterator.call(this, string, index, more);\n\t}\n\tLineIterator.prototype = Object.create(recon.StringIterator.prototype);\n\tLineIterator.prototype.constructor = LineIterator;\n\tLineIterator.prototype.isDone = function () {\n\t  return this.index >= this.string.length && !this.more ||\n\t    this.index < this.string.length && this.head() === 10 /*'\\n'*/;\n\t};\n\tLineIterator.prototype.isEmpty = function () {\n\t  return this.index >= this.string.length || this.head() === 10 /*'\\n'*/;\n\t};\n\tLineIterator.prototype.isInputDone = function () {\n\t  return recon.StringIterator.prototype.isDone.call(this);\n\t};\n\tLineIterator.prototype.isInputEmpty = function () {\n\t  return recon.StringIterator.prototype.isEmpty.call(this);\n\t};\n\n\n\tfunction DownlinkBuilder(channel, scope) {\n\t  Object.defineProperty(this, 'channel', {value: channel, configurable: true});\n\t  Object.defineProperty(this, 'scope', {value: scope, configurable: true});\n\t  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});\n\t  this.options = {};\n\t}\n\tDownlinkBuilder.prototype.host = function (hostUri) {\n\t  if (!arguments.length) return this.hostUri;\n\t  this.hostUri = hostUri;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.node = function (nodeUri) {\n\t  if (!arguments.length) return this.nodeUri;\n\t  this.nodeUri = nodeUri;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.lane = function (laneUri) {\n\t  if (!arguments.length) return this.laneUri;\n\t  this.laneUri = laneUri;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.prio = function (prio) {\n\t  if (!arguments.length) return this.options.prio;\n\t  this.options.prio = prio;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.keepAlive = function (keepAlive) {\n\t  if (!arguments.length) return this.options.keepAlive;\n\t  this.options.keepAlive = keepAlive;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.delegate = function (delegate) {\n\t  if (!arguments.length) return this.options.delegate;\n\t  this.options.delegate = delegate;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onEvent = function (callback) {\n\t  if (!arguments.length) return this.proxy.onEvent;\n\t  this.proxy.onEvent = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onCommand = function (callback) {\n\t  if (!arguments.length) return this.proxy.onCommand;\n\t  this.proxy.onCommand = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onLink = function (callback) {\n\t  if (!arguments.length) return this.proxy.onLink;\n\t  this.proxy.onLink = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onLinked = function (callback) {\n\t  if (!arguments.length) return this.proxy.onLinked;\n\t  this.proxy.onLinked = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onSync = function (callback) {\n\t  if (!arguments.length) return this.proxy.onSync;\n\t  this.proxy.onSync = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onSynced = function (callback) {\n\t  if (!arguments.length) return this.proxy.onSynced;\n\t  this.proxy.onSynced = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onUnlink = function (callback) {\n\t  if (!arguments.length) return this.proxy.onUnlink;\n\t  this.proxy.onUnlink = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onUnlinked = function (callback) {\n\t  if (!arguments.length) return this.proxy.onUnlinked;\n\t  this.proxy.onUnlinked = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onConnect = function (callback) {\n\t  if (!arguments.length) return this.proxy.onConnect;\n\t  this.proxy.onConnect = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onDisconnect = function (callback) {\n\t  if (!arguments.length) return this.proxy.onDisconnect;\n\t  this.proxy.onDisconnect = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onError = function (callback) {\n\t  if (!arguments.length) return this.proxy.onError;\n\t  this.proxy.onError = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.onClose = function (callback) {\n\t  if (!arguments.length) return this.proxy.onClose;\n\t  this.proxy.onClose = callback;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.primaryKey = function (primaryKey) {\n\t  if (!arguments.length) return this.options.primaryKey;\n\t  this.options.primaryKey = primaryKey;\n\t  return this;\n\t};\n\tDownlinkBuilder.prototype.sortBy = function (sortBy) {\n\t  if (!arguments.length) return this.options.sortBy;\n\t  this.options.sortBy = sortBy;\n\t  return this;\n\t};\n\tObject.defineProperty(DownlinkBuilder.prototype, 'normalize', {\n\t  value: function () {\n\t    if (this.hostUri) {\n\t      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);\n\t    } else {\n\t      this.hostUri = Client.extractHostUri(this.nodeUri);\n\t    }\n\t    if (!this.channel) {\n\t      // If channel is null then scope references a Client.\n\t      Object.defineProperty(this, 'channel', {\n\t        value: this.scope.getOrCreateChannel(this.hostUri),\n\t        configurable: true\n\t      });\n\t      Object.defineProperty(this, 'scope', {value: null, configurable: true});\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {\n\t  value: function (downlink) {\n\t    for (var key in this.proxy) {\n\t      downlink[key] = this.proxy[key];\n\t    }\n\t    this.channel.registerDownlink(downlink);\n\t    if (this.scope) {\n\t      this.scope.registerDownlink(downlink);\n\t    }\n\t  },\n\t  configure: true\n\t});\n\tDownlinkBuilder.prototype.link = function () {\n\t  this.normalize();\n\t  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tDownlinkBuilder.prototype.sync = function () {\n\t  this.normalize();\n\t  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tDownlinkBuilder.prototype.syncList = function () {\n\t  this.normalize();\n\t  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\tDownlinkBuilder.prototype.syncMap = function () {\n\t  this.normalize();\n\t  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);\n\t  this.registerDownlink(downlink);\n\t  return downlink;\n\t};\n\n\n\tfunction Downlink(channel, hostUri, nodeUri, laneUri, options) {\n\t  options = options || {};\n\t  Object.defineProperty(this, 'channel', {value: channel});\n\t  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});\n\t  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});\n\t  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});\n\t  Object.defineProperty(this, 'options', {value: options, enumerable: true});\n\t  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});\n\t}\n\tObject.defineProperty(Downlink.prototype, 'prio', {\n\t  get: function () {\n\t    return this.options.prio || 0.0;\n\t  }\n\t});\n\tObject.defineProperty(Downlink.prototype, 'keepAlive', {\n\t  get: function () {\n\t    return this.options.keepAlive || false;\n\t  },\n\t  set: function (keepAlive) {\n\t    this.options.keepAlive = keepAlive;\n\t  }\n\t});\n\tObject.defineProperty(Downlink.prototype, 'isConnected', {\n\t  get: function () {\n\t    return this.channel.isConnected;\n\t  },\n\t  enumerable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'isAuthorized', {\n\t  get: function () {\n\t    return this.channel.isAuthorized;\n\t  },\n\t  enumerable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'session', {\n\t  get: function () {\n\t    return this.channel.session;\n\t  },\n\t  enumerable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onEventMessage', {\n\t  value: function (message) {\n\t    if (typeof this.delegate.onEvent === 'function') {\n\t      this.delegate.onEvent(message);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onCommandMessage', {\n\t  value: function (message) {\n\t    if (typeof this.delegate.onCommand === 'function') {\n\t      this.delegate.onCommand(message);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onLinkRequest', {\n\t  value: function (request) {\n\t    if (typeof this.delegate.onLink === 'function') {\n\t      this.delegate.onLink(request);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onLinkedResponse', {\n\t  value: function (response) {\n\t    if (typeof this.delegate.onLinked === 'function') {\n\t      this.delegate.onLinked(response);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onSyncRequest', {\n\t  value: function (request) {\n\t    if (typeof this.delegate.onSync === 'function') {\n\t      this.delegate.onSync(request);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onSyncedResponse', {\n\t  value: function (response) {\n\t    if (typeof this.delegate.onSynced === 'function') {\n\t      this.delegate.onSynced(response);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onUnlinkRequest', {\n\t  value: function (request) {\n\t    if (typeof this.delegate.onUnlink === 'function') {\n\t      this.delegate.onUnlink(request);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {\n\t  value: function (response) {\n\t    if (typeof this.delegate.onUnlinked === 'function') {\n\t      this.delegate.onUnlinked(response);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onChannelConnect', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onConnect === 'function') {\n\t      this.delegate.onConnect(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onChannelDisconnect', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onDisconnect === 'function') {\n\t      this.delegate.onDisconnect(info);\n\t    }\n\t    if (!this.keepAlive) {\n\t      this.close();\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onChannelError', {\n\t  value: function (info) {\n\t    if (typeof this.delegate.onError === 'function') {\n\t      this.delegate.onError(info);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(Downlink.prototype, 'onChannelClose', {\n\t  value: function () {\n\t    if (typeof this.delegate.onClose === 'function') {\n\t      this.delegate.onClose();\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tDownlink.prototype.command = function (body) {\n\t  this.channel.command(this.nodeUri, this.laneUri, body);\n\t};\n\tDownlink.prototype.close = function () {\n\t  this.channel.unregisterDownlink(this);\n\t};\n\n\n\tfunction LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n\t  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n\t}\n\tLinkedDownlink.prototype = Object.create(Downlink.prototype);\n\tLinkedDownlink.prototype.constructor = LinkedDownlink;\n\tObject.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {\n\t  value: function (info) {\n\t    Downlink.prototype.onChannelConnect.call(this, info);\n\t    var nodeUri = this.channel.unresolve(this.nodeUri);\n\t    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);\n\t    this.onLinkRequest(request);\n\t    this.channel.push(request);\n\t  },\n\t  configurable: true\n\t});\n\n\n\tfunction SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {\n\t  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n\t}\n\tSyncedDownlink.prototype = Object.create(Downlink.prototype);\n\tSyncedDownlink.prototype.constructor = SyncedDownlink;\n\tObject.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {\n\t  value: function (info) {\n\t    Downlink.prototype.onChannelConnect.call(this, info);\n\t    var nodeUri = this.channel.unresolve(this.nodeUri);\n\t    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);\n\t    this.onSyncRequest(request);\n\t    this.channel.push(request);\n\t  },\n\t  configurable: true\n\t});\n\n\n\tfunction ListDownlink(channel, hostUri, nodeUri, laneUri, options) {\n\t  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n\t  Object.defineProperty(this, 'state', {value: [], configurable: true});\n\t}\n\tListDownlink.prototype = Object.create(SyncedDownlink.prototype);\n\tListDownlink.prototype.constructor = ListDownlink;\n\tObject.defineProperty(ListDownlink.prototype, 'onEventMessage', {\n\t  value: function (message) {\n\t    var tag = recon.tag(message.body);\n\t    var head, index, value;\n\t    if (tag === '@update') {\n\t      head = recon.head(message.body);\n\t      index = recon.get(head, 'index');\n\t      value = recon.tail(message.body);\n\t      this.remoteUpdate(index, value);\n\t    } else if (tag === '@insert') {\n\t      head = recon.head(message.body);\n\t      index = recon.get(head, 'index');\n\t      value = recon.tail(message.body);\n\t      this.remoteInsert(index, value);\n\t    } else if (tag === '@move') {\n\t      head = recon.head(message.body);\n\t      var from = recon.get(head, 'from');\n\t      var to = recon.get(head, 'to');\n\t      value = recon.tail(message.body);\n\t      this.remoteMove(from, to, value);\n\t    } else if (tag === '@remove' || tag === '@delete') {\n\t      head = recon.head(message.body);\n\t      index = recon.get(head, 'index');\n\t      value = recon.tail(message.body);\n\t      this.remoteRemove(index, value);\n\t    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n\t      this.remoteClear();\n\t    } else {\n\t      this.remoteAppend(message.body);\n\t    }\n\t    SyncedDownlink.prototype.onEventMessage.call(this, message);\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'remoteAppend', {\n\t  value: function (value) {\n\t    this.state.push(value);\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'remoteUpdate', {\n\t  value: function (index, value) {\n\t    this.state[index] = value;\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'remoteInsert', {\n\t  value: function (index, value) {\n\t    if (!recon.equal(this.state[index], value)) {\n\t      this.state.splice(index, 0, value);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'remoteMove', {\n\t  value: function (fromIndex, toIndex, value) {\n\t    if (!recon.equal(this.state[toIndex], value)) {\n\t      this.state.splice(fromIndex, 1);\n\t      this.state.splice(toIndex, 0, value);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'remoteRemove', {\n\t  value: function (index, value) {\n\t    if (recon.equal(this.state[index], value)) {\n\t      this.state.splice(index, 1);\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'remoteClear', {\n\t  value: function (index, value) {\n\t    Object.defineProperty(this, 'state', {value: [], configurable: true});\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(ListDownlink.prototype, 'length', {\n\t  get: function () {\n\t    return this.state.length;\n\t  },\n\t  configurable: true,\n\t  enumerable: true\n\t});\n\tListDownlink.prototype.get = function (index) {\n\t  return this.state[index];\n\t};\n\tListDownlink.prototype.set = function (index, value) {\n\t  value = recon(value !== undefined ? value : this.get(index));\n\t  this.state[index] = value;\n\t  var nodeUri = this.channel.unresolve(this.nodeUri);\n\t  var body = recon.concat(recon({'@update': recon({index: index})}), value);\n\t  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t  this.onCommandMessage(message);\n\t  this.channel.push(message);\n\t};\n\tListDownlink.prototype.push = function () {\n\t  var nodeUri = this.channel.unresolve(this.nodeUri);\n\t  for (var i = 0, n = arguments.length; i < n; i += 1) {\n\t    var value = recon(arguments[i]);\n\t    this.state.push(value);\n\t    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t  return this.state.length;\n\t};\n\tListDownlink.prototype.pop = function () {\n\t  var value = this.state.pop();\n\t  var index = this.state.length;\n\t  if (value !== undefined) {\n\t    var nodeUri = this.channel.unresolve(this.nodeUri);\n\t    var body = recon.concat(recon({'@remove': recon({index: index})}), value);\n\t    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t  return value;\n\t};\n\tListDownlink.prototype.unshift = function () {\n\t  var nodeUri = this.channel.unresolve(this.nodeUri);\n\t  for (var i = arguments.length - 1; i >= 0; i -= 1) {\n\t    var value = recon(arguments[i]);\n\t    this.state.unshift(value);\n\t    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);\n\t    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t  return this.state.length;\n\t};\n\tListDownlink.prototype.shift = function () {\n\t  var value = this.state.shift();\n\t  if (value !== undefined) {\n\t    var nodeUri = this.channel.unresolve(this.nodeUri);\n\t    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);\n\t    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t  return value;\n\t};\n\tListDownlink.prototype.move = function (fromIndex, toIndex) {\n\t  var removed = this.state.splice(fromIndex, 1);\n\t  if (removed.length === 1) {\n\t    var value = removed[0];\n\t    this.state.splice(toIndex, 0, value);\n\t    var nodeUri = this.channel.unresolve(this.nodeUri);\n\t    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);\n\t    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t};\n\tListDownlink.prototype.splice = function () {\n\t  var start = arguments[0];\n\t  var deleteCount = arguments[1];\n\t  var nodeUri = this.channel.unresolve(this.nodeUri);\n\t  var removed = [];\n\t  var i, n, value, body, message;\n\t  for (i = start; i < start + deleteCount; i += 1) {\n\t    value = this.state[i];\n\t    if (value !== undefined) {\n\t      removed.push(value);\n\t      this.state.splice(start, 1);\n\t      body = recon.concat(recon({'@remove': recon({index: start})}), value);\n\t      message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t      this.onCommandMessage(message);\n\t      this.channel.push(message);\n\t    }\n\t  }\n\t  for (i = 2, n = arguments.length; i < n; i += 1) {\n\t    var index = start + i - 2;\n\t    value = recon(arguments[i]);\n\t    this.state.splice(index, 0, value);\n\t    body = recon.concat(recon({'@insert': recon({index: index})}), value);\n\t    message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t  return removed;\n\t};\n\tListDownlink.prototype.clear = function () {\n\t  Object.defineProperty(this, 'state', {value: [], configurable: true});\n\t  var nodeUri = this.channel.unresolve(this.nodeUri);\n\t  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n\t  this.onCommandMessage(message);\n\t  this.channel.push(message);\n\t  return this;\n\t};\n\tListDownlink.prototype.forEach = function (callback, thisArg) {\n\t  for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t    var value = this.state[i];\n\t    callback.call(thisArg, value, i, this);\n\t  }\n\t};\n\n\n\tfunction MapDownlink(channel, hostUri, nodeUri, laneUri, options) {\n\t  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);\n\t  Object.defineProperty(this, 'state', {value: [], configurable: true});\n\t  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n\t  this.primaryKey = MapDownlink.primaryKeyOption(this.options);\n\t  this.sortBy = MapDownlink.sortByOption(this.options);\n\t}\n\tMapDownlink.prototype = Object.create(SyncedDownlink.prototype);\n\tMapDownlink.prototype.constructor = MapDownlink;\n\tObject.defineProperty(MapDownlink.prototype, 'onEventMessage', {\n\t  value: function (message) {\n\t    var tag = recon.tag(message.body);\n\t    var head, key, value;\n\t    if (tag === '@update') {\n\t      head = recon.head(message.body);\n\t      key = recon.get(head, 'key');\n\t      value = recon.tail(message.body);\n\t      this.remoteSet(key, value);\n\t    } else if (tag === '@remove' || tag === '@delete') {\n\t      head = recon.head(message.body);\n\t      key = recon.get(head, 'key');\n\t      if (key === undefined && this.primaryKey) {\n\t        key = this.primaryKey(message.body);\n\t      }\n\t      if (key !== undefined) {\n\t        this.remoteDelete(key);\n\t      }\n\t    } else if (tag === '@clear' && recon.size(message.body) === 1) {\n\t      this.remoteClear();\n\t    } else if (this.primaryKey) {\n\t      value = message.body;\n\t      key = this.primaryKey(value);\n\t      if (key !== undefined) {\n\t        this.remoteSet(key, value);\n\t      }\n\t    }\n\t    SyncedDownlink.prototype.onEventMessage.call(this, message);\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(MapDownlink.prototype, 'remoteSet', {\n\t  value: function (key, value) {\n\t    Object.defineProperty(value, '$key', {value: key, configurable: true});\n\t    if (typeof key === 'string') {\n\t      this.table[key] = value;\n\t    }\n\t    for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t      if (recon.equal(key, this.state[i].$key)) {\n\t        this.state[i] = value;\n\t        break;\n\t      }\n\t    }\n\t    if (i === n) {\n\t      this.state.push(value);\n\t    }\n\t    this.sort();\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(MapDownlink.prototype, 'remoteDelete', {\n\t  value: function (key) {\n\t    if (typeof key === 'string') {\n\t      delete this.table[key];\n\t    }\n\t    for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t      if (recon.equal(key, this.state[i].$key)) {\n\t        this.state.splice(i, 1);\n\t        return;\n\t      }\n\t    }\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(MapDownlink.prototype, 'remoteClear', {\n\t  value: function (key) {\n\t    Object.defineProperty(this, 'state', {value: [], configurable: true});\n\t    Object.defineProperty(this, 'table', {value: {}, configurable: true});\n\t  },\n\t  configurable: true\n\t});\n\tObject.defineProperty(MapDownlink.prototype, 'size', {\n\t  get: function () {\n\t    return this.state.length;\n\t  },\n\t  configurable: true,\n\t  enumerable: true\n\t});\n\tMapDownlink.prototype.has = function (key) {\n\t  if (typeof key === 'string') {\n\t    return this.table[key] !== undefined;\n\t  } else {\n\t    for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t      if (recon.equal(key, this.state[i].$key)) {\n\t        return true;\n\t      }\n\t    }\n\t  }\n\t  return false;\n\t};\n\tMapDownlink.prototype.get = function (key) {\n\t  if (typeof key === 'string') {\n\t    return this.table[key];\n\t  } else {\n\t    for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t      var value = this.state[i];\n\t      if (recon.equal(key, value.$key)) {\n\t        return value;\n\t      }\n\t    }\n\t  }\n\t};\n\tMapDownlink.prototype.set = function (key, value) {\n\t  value = recon(value !== undefined ? value : this.get(key));\n\t  Object.defineProperty(value, '$key', {value: key, configurable: true});\n\t  if (typeof key === 'string') {\n\t    this.table[key] = value;\n\t  }\n\t  var oldValue;\n\t  for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t    if (recon.equal(key, this.state[i].$key)) {\n\t      oldValue = this.state[i];\n\t      this.state[i] = value;\n\t      break;\n\t    }\n\t  }\n\t  if (i === n) {\n\t    this.state.push(value);\n\t  }\n\t  this.sort();\n\t  if (!recon.equal(value, oldValue)) {\n\t    var nodeUri = this.channel.unresolve(this.nodeUri);\n\t    var body;\n\t    if (this.primaryKey) {\n\t      body = recon(value);\n\t    } else {\n\t      body = recon.concat(recon({'@update': {key: key}}), recon(value));\n\t    }\n\t    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t    this.onCommandMessage(message);\n\t    this.channel.push(message);\n\t  }\n\t  return this;\n\t};\n\tMapDownlink.prototype.delete = function (key) {\n\t  if (typeof key === 'string') {\n\t    delete this.table[key];\n\t  }\n\t  for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t    var value = this.state[i];\n\t    if (recon.equal(key, value.$key)) {\n\t      this.state.splice(i, 1);\n\t      var nodeUri = this.channel.unresolve(this.nodeUri);\n\t      var body;\n\t      if (this.primaryKey) {\n\t        body = recon.concat(recon({'@remove': null}), value);\n\t      } else {\n\t        body = recon({'@remove': {key: key}});\n\t      }\n\t      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);\n\t      this.onCommandMessage(message);\n\t      this.channel.push(message);\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t};\n\tMapDownlink.prototype.clear = function () {\n\t  Object.defineProperty(this, 'state', {value: [], configurable: true});\n\t  Object.defineProperty(this, 'table', {value: {}, configurable: true});\n\t  var nodeUri = this.channel.unresolve(this.nodeUri);\n\t  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);\n\t  this.onCommandMessage(message);\n\t  this.channel.push(message);\n\t  return this;\n\t};\n\tMapDownlink.prototype.sort = function () {\n\t  if (this.sortBy) {\n\t    this.state.sort(this.sortBy);\n\t  }\n\t};\n\tMapDownlink.prototype.keys = function () {\n\t  var keys = [];\n\t  for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t    var key = this.state[i].$key;\n\t    if (key !== undefined) {\n\t      keys.push(key);\n\t    }\n\t  }\n\t  return keys;\n\t};\n\tMapDownlink.prototype.values = function () {\n\t  return this.state;\n\t};\n\tMapDownlink.prototype.forEach = function (callback, thisArg) {\n\t  for (var i = 0, n = this.state.length; i < n; i += 1) {\n\t    var value = this.state[i];\n\t    var key = value.$key;\n\t    callback.call(thisArg, value, key, this);\n\t  }\n\t};\n\tMapDownlink.primaryKeyOption = function (options) {\n\t  if (typeof options.primaryKey === 'function') {\n\t    return options.primaryKey;\n\t  } else if (typeof options.primaryKey === 'string') {\n\t    var keys = options.primaryKey.split('.');\n\t    return function (value) {\n\t      for (var i = 0, n = keys.length; i < n; i += 1) {\n\t        var key = keys[i];\n\t        value = recon.get(value, key);\n\t      }\n\t      return value;\n\t    };\n\t  } else {\n\t    return undefined;\n\t  }\n\t};\n\tMapDownlink.sortByOption = function (options) {\n\t  if (typeof options.sortBy === 'function') {\n\t    return options.sortBy;\n\t  } else if (typeof options.sortBy === 'string') {\n\t    var keys = options.sortBy.split('.');\n\t    return function (x, y) {\n\t      for (var i = 0, n = keys.length; i < n; i += 1) {\n\t        var key = keys[i];\n\t        x = recon.get(x, key);\n\t        y = recon.get(y, key);\n\t        return recon.compare(x, y);\n\t      }\n\t    };\n\t  }\n\t};\n\n\n\tfunction UriCache(baseUri, size) {\n\t  size = size || 32;\n\t  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});\n\t  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});\n\t  Object.defineProperty(this, 'size', {value: size, enumerable: true});\n\t  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});\n\t  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});\n\t}\n\tUriCache.prototype.resolve = function (unresolvedUri) {\n\t  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);\n\t  var cacheEntry = this.resolveCache[hashBucket];\n\t  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {\n\t    return cacheEntry.resolved;\n\t  } else {\n\t    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));\n\t    this.resolveCache[hashBucket] = {\n\t      unresolved: unresolvedUri,\n\t      resolved: resolvedUri\n\t    };\n\t    return resolvedUri;\n\t  }\n\t};\n\tUriCache.prototype.unresolve = function (resolvedUri) {\n\t  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);\n\t  var cacheEntry = this.unresolveCache[hashBucket];\n\t  if (cacheEntry && cacheEntry.resolved === resolvedUri) {\n\t    return cacheEntry.unresolved;\n\t  } else {\n\t    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));\n\t    this.unresolveCache[hashBucket] = {\n\t      unresolved: unresolvedUri,\n\t      resolved: resolvedUri\n\t    };\n\t    return unresolvedUri;\n\t  }\n\t};\n\tUriCache.rotl = function (value, distance) {\n\t  return (value << distance) | (value >>> (32 - distance));\n\t};\n\tUriCache.mix = function (code, value) {\n\t  // MurmurHash3 mix function\n\t  value *= 0xcc9e2d51;\n\t  value = UriCache.rotl(value, 15);\n\t  value *= 0x1b873593;\n\t  code ^= value;\n\t  code = UriCache.rotl(code, 13);\n\t  code = code * 5 + 0xe6546b64;\n\t  return code;\n\t};\n\tUriCache.mash = function (code) {\n\t  // MurmurHash3 finalize function\n\t  code ^= code >>> 16;\n\t  code *= 0x85ebca6b;\n\t  code ^= code >>> 13;\n\t  code *= 0xc2b2ae35;\n\t  code ^= code >>> 16;\n\t  return code;\n\t};\n\tUriCache.hash = function (string) {\n\t  var code = 0;\n\t  for (var i = 0, n = string.length; i < n; i += 1) {\n\t    code = UriCache.mix(code, string.charAt(i));\n\t  }\n\t  code = UriCache.mash(code);\n\t  return code;\n\t};\n\n\n\tvar swim = new Client();\n\tswim.client = function (options) {\n\t  return new Client(options);\n\t};\n\tswim.config = config;\n\tswim.Client = Client;\n\tswim.Scope = Scope;\n\tswim.HostScope = HostScope;\n\tswim.NodeScope = NodeScope;\n\tswim.LaneScope = LaneScope;\n\tswim.Channel = Channel;\n\tswim.DownlinkBuilder = DownlinkBuilder;\n\tswim.Downlink = Downlink;\n\tswim.LinkedDownlink = LinkedDownlink;\n\tswim.SyncedDownlink = SyncedDownlink;\n\tswim.ListDownlink = ListDownlink;\n\tswim.MapDownlink = MapDownlink;\n\n\tmodule.exports = swim;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"version\": \"0.4.8\"\n\t};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar config = __webpack_require__(4);\n\n\tfunction parse(string) {\n\t  var input = new StringIterator(string);\n\t  var result = new DocumentParser().run(input);\n\t  return result.state();\n\t}\n\n\tfunction stringify(value, options) {\n\t  var writer = new ReconWriter();\n\t  if (options && options.block === false) writer.writeValue(value);\n\t  else writer.writeBlock(value);\n\t  return writer.state();\n\t}\n\n\tfunction base64(string) {\n\t  if (string === undefined) return new Uint8Array(0);\n\t  var data = new DataBuilder();\n\t  var cs = new StringIterator(string);\n\t  while (!cs.isEmpty()) {\n\t    data.appendBase64Char(cs.head());\n\t    cs.step();\n\t  }\n\t  return data.state();\n\t}\n\n\tfunction isRecord(item) {\n\t  return Array.isArray(item) && !(item instanceof Uint8Array);\n\t}\n\n\tfunction isObject(item) {\n\t  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);\n\t}\n\n\tfunction isField(item) {\n\t  return item !== null && typeof item === 'object' && !Array.isArray(item) && !(item instanceof Uint8Array);\n\t}\n\n\tfunction isAttr(item) {\n\t  if (!isField(item)) return false;\n\t  var keys = Object.keys(item);\n\t  var n = keys.length;\n\t  if (n === 0) return false;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var key = keys[i];\n\t    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;\n\t  }\n\t  return true;\n\t}\n\n\tfunction isBlockSafe(record) {\n\t  for (var i = 0, n = record.length; i < n; i += 1) {\n\t    if (isAttr(record[i])) return false;\n\t  }\n\t  return true;\n\t}\n\n\tfunction isMarkupSafe(record) {\n\t  var n = record.length;\n\t  if (n === 0 || !isAttr(record[0])) return false;\n\t  for (var i = 1; i < n; i += 1) {\n\t    if (isAttr(record[i])) return false;\n\t  }\n\t  return true;\n\t}\n\n\tfunction size(value) {\n\t  if (isRecord(value)) return value.length;\n\t  else if (isObject(value)) return Object.keys(value).length;\n\t  else return 0;\n\t}\n\n\tfunction head(value) {\n\t  if (isRecord(value)) {\n\t    var header = value[0];\n\t    if (isField(header)) {\n\t      if (header.$key) return header.$value;\n\t      else return header[Object.keys(header)[0]];\n\t    }\n\t    else return header;\n\t  }\n\t  else if (isObject(value)) return value[Object.keys(value)[0]];\n\t  else return value;\n\t}\n\n\tfunction tail(value) {\n\t  var i, n, builder;\n\t  if (isRecord(value)) {\n\t    builder = new RecordBuilder();\n\t    for (i = 1, n = value.length; i < n; i += 1) {\n\t      builder.appendItem(value[i]);\n\t    }\n\t    return builder.state();\n\t  }\n\t  else if (isObject(value)) {\n\t    var keys = Object.keys(value);\n\t    for (i = 1, n = keys.length; i < n; i += 1) {\n\t      var key = keys[i];\n\t      builder.appendField(key, value[key]);\n\t    }\n\t    return builder.state();\n\t  }\n\t}\n\n\tfunction tag(value) {\n\t  if (isRecord(value)) {\n\t    var header = value[0];\n\t    if (isField(header)) return header.$key || Object.keys(header)[0];\n\t  }\n\t  else if (isObject(value)) return Object.keys(value)[0];\n\t}\n\n\tfunction has(record, key) {\n\t  return get(record, key) !== undefined;\n\t}\n\n\tfunction get(record, key) {\n\t  var i, n, item, value;\n\t  if (typeof key === 'string') {\n\t    value = record[key];\n\t    if (value !== undefined) return value;\n\t    for (i = 0, n = record.length; i < n; i += 1) {\n\t      item = record[i];\n\t      if (isField(item)) {\n\t        if (item[key] !== undefined) return item[key];\n\t        else if (equal(item.$key, key)) return item.$value;\n\t      }\n\t    }\n\t  }\n\t  else {\n\t    for (i = 0, n = record.length; i < n; i += 1) {\n\t      item = record[i];\n\t      if (isField(item)) {\n\t        if (equal(item.$key, key)) return item.$value;\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction set(record, key, value) {\n\t  value = coerceValue(value);\n\t  if (isRecord(record)) setRecord(record, key, value);\n\t  else if (isObject(record)) setObject(record, key, value);\n\t}\n\tfunction setRecord(record, key, value) {\n\t  var updated = false;\n\t  var field;\n\t  for (var i = 0, n = record.length; i < n; i += 1) {\n\t    var item = record[i];\n\t    if (isField(item)) {\n\t      if (item[key] !== undefined) {\n\t        item[key] = value;\n\t        updated = true;\n\t      }\n\t      else if (equal(item.$key, key)) {\n\t        item.$value = value;\n\t        updated = true;\n\t      }\n\t    }\n\t  }\n\t  if (typeof key === 'string') {\n\t    if (!updated) {\n\t      field = {};\n\t      field[key] = value;\n\t      record.push(field);\n\t    }\n\t    record[key] = value;\n\t  }\n\t  else if (!updated) {\n\t    field = {};\n\t    field.$key = key;\n\t    field.$value = value;\n\t    record.push(field);\n\t  }\n\t}\n\tfunction setObject(record, key, value) {\n\t  if (typeof key === 'string') {\n\t    record[key] = value;\n\t  }\n\t}\n\n\tfunction remove(record, key) {\n\t  if (isRecord(record)) removeRecord(record, key);\n\t  else if (isObject(record)) removeObject(record, key);\n\t}\n\tfunction removeRecord(record, key) {\n\t  for (var i = 0, n = record.length; i < n; i += 1) {\n\t    var item = record[i];\n\t    if (isField(item)) {\n\t      if (item[key] !== undefined) {\n\t        delete item[key];\n\t        delete record[key];\n\t        if (Object.keys(item).length === 0) {\n\t          record.splice(i, 1);\n\t          i -= 1;\n\t          n -= 1;\n\t        }\n\t      }\n\t      else if (equal(item.$key, key)) {\n\t        record.splice(i, 1);\n\t        i -= 1;\n\t        n -= 1;\n\t      }\n\t    }\n\t  }\n\t}\n\tfunction removeObject(record, key) {\n\t  if (typeof key === 'string') {\n\t    delete record[key];\n\t  }\n\t}\n\n\tfunction keys(record) {\n\t  if (isRecord(record)) {\n\t    var keys = [];\n\t    for (var i = 0, n = record.length; i < n; i += 1) {\n\t      var item = record[i];\n\t      if (isField(item)) {\n\t        var key = item.$key;\n\t        if (key !== undefined) keys.push(key);\n\t        else Array.prototype.push.apply(keys, Object.keys(item));\n\t      }\n\t    }\n\t    return keys;\n\t  }\n\t  else if (isObject(record)) {\n\t    return Object.keys(record);\n\t  }\n\t  else {\n\t    return [];\n\t  }\n\t}\n\n\tfunction values(record) {\n\t  var values = [];\n\t  var key;\n\t  if (isRecord(record)) {\n\t    for (var i = 0, n = record.length; i < n; i += 1) {\n\t      var item = record[i];\n\t      if (isField(item)) {\n\t        key = item.$key;\n\t        if (key !== undefined) {\n\t          values.push(item.$value);\n\t        }\n\t        else {\n\t          for (key in item) {\n\t            values.push(item[key]);\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        values.push(item);\n\t      }\n\t    }\n\t  }\n\t  else if (isObject(record)) {\n\t    for (key in record) {\n\t      values.push(record[key]);\n\t    }\n\t  }\n\t  return values;\n\t}\n\n\tfunction forEach(record, callback, thisArg) {\n\t  var key, value;\n\t  if (isRecord(record)) {\n\t    for (var i = 0, n = record.length; i < n; i += 1) {\n\t      var item = record[i];\n\t      if (isField(item)) {\n\t        key = item.$key;\n\t        if (key !== undefined) {\n\t          value = item.$value;\n\t          callback.call(thisArg, value, key, record);\n\t        }\n\t        else {\n\t          for (key in item) {\n\t            value = item[key];\n\t            callback.call(thisArg, value, key, record);\n\t          }\n\t        }\n\t      }\n\t      else {\n\t        callback.call(thisArg, item, undefined, record);\n\t      }\n\t    }\n\t  }\n\t  else if (isObject(record)) {\n\t    for (key in record) {\n\t      value = record[key];\n\t      callback.call(thisArg, value, key, record);\n\t    }\n\t  }\n\t}\n\n\tfunction concat(x, y) {\n\t  var builder = new RecordBuilder();\n\t  if (isRecord(x)) builder.appendRecord(x);\n\t  else if (isObject(x)) builder.appendFields(x);\n\t  else if (x !== undefined) builder.appendItem(x);\n\t  if (isRecord(y)) builder.appendRecord(y);\n\t  else if (isObject(y)) builder.appendFields(y);\n\t  else if (y !== undefined) builder.appendItem(y);\n\t  return builder.state();\n\t}\n\n\tfunction equal(x, y) {\n\t  if (x === y) return true;\n\t  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);\n\t  if (isField(x) && isField(y)) return equalFields(x, y);\n\t  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);\n\t  return false;\n\t}\n\tfunction equalRecord(x, y) {\n\t  var n = x.length;\n\t  if (n !== y.length) return false;\n\t  for (var i = 0; i < n; i += 1) {\n\t    if (!equal(x[i], y[i])) return false;\n\t  }\n\t  return true;\n\t}\n\tfunction equalFields(x, y) {\n\t  var xKeys = Object.keys(x);\n\t  var yKeys = Object.keys(y);\n\t  var n = xKeys.length;\n\t  if (n !== yKeys.length) return false;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var key = xKeys[i];\n\t    if (!equal(x[key], y[key])) return false;\n\t  }\n\t  return true;\n\t}\n\tfunction equalData(x, y) {\n\t  var n = x.length;\n\t  if (n !== y.length) return false;\n\t  for (var i = 0; i < n; i += 1) {\n\t    if (x[i] !== y[i]) return false;\n\t  }\n\t  return true;\n\t}\n\n\tfunction compare(x, y) {\n\t  if (x === true) x = 'true';\n\t  else if (x === false) x = 'false';\n\t  if (y === true) y = 'true';\n\t  else if (y === false) y = 'false';\n\n\t  if (x === undefined) {\n\t    if (y === undefined) return 0;\n\t    else return 1;\n\t  }\n\t  else if (x === null) {\n\t    if (y === undefined) return -1;\n\t    else if (y === null) return 0;\n\t    else return 1;\n\t  }\n\t  else if (typeof x === 'number') {\n\t    if (y === undefined || y === null) return -1;\n\t    else if (typeof y === 'number') return x < y ? -1 : x > y ? 1 : 0;\n\t    else return 1;\n\t  }\n\t  else if (typeof x === 'string') {\n\t    if (y === undefined || y === null || typeof y === 'number') return -1;\n\t    else if (typeof y === 'string') return x < y ? -1 : x > y ? 1 : 0;\n\t    else return 1;\n\t  }\n\t  else if (x instanceof Uint8Array) {\n\t    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') return -1;\n\t    else if (y instanceof Uint8Array) return compareData(x, y);\n\t    else return 1;\n\t  }\n\t  else if (Array.isArray(x)) {\n\t    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n\t        y instanceof Uint8Array) return -1;\n\t    else if (Array.isArray(y)) return compareRecord(x, y);\n\t    else return 1;\n\t  }\n\t  else {\n\t    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||\n\t        y instanceof Uint8Array || Array.isArray(y)) return -1;\n\t    else return compareFields(x, y);\n\t  }\n\t}\n\tfunction compareRecord(x, y) {\n\t  var p = x.length;\n\t  var q = y.length;\n\t  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n\t    order = compare(x[i], y[i]);\n\t  }\n\t  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n\t}\n\tfunction compareFields(x, y) {\n\t  var xKeys = Object.keys(x);\n\t  var yKeys = Object.keys(y);\n\t  var p = xKeys.length;\n\t  var q = yKeys.length;\n\t  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n\t    var xKey = xKeys[i];\n\t    var yKey = yKeys[i];\n\t    order = compareName(xKey, yKey);\n\t    if (order === 0) order = compare(x[xKey], y[yKey]);\n\t  }\n\t  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n\t}\n\tfunction compareName(x, y) {\n\t  var p = x.length;\n\t  var q = y.length;\n\t  if (p > 0 && q > 0) {\n\t    var x0 = x.charCodeAt(0);\n\t    var y0 = y.charCodeAt(0);\n\t    if (x0 === 64/*'@'*/ && y0 !== 64/*'@'*/) return -1;\n\t    else if (x0 !== 64/*'@'*/ && y0 === 64/*'@'*/) return 1;\n\t    else return x < y ? -1 : x > y ? 1 : 0;\n\t  }\n\t  else if (p > 0) return 1;\n\t  else if (q > 0) return -1;\n\t  else return 0;\n\t}\n\tfunction compareData(x, y) {\n\t  var p = x.length;\n\t  var q = y.length;\n\t  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {\n\t    order = x[i] - y[i];\n\t  }\n\t  return order > 0 ? 1 : order < 0 ? -1 : p > q ? 1 : p < q ? -1 : 0;\n\t}\n\n\tfunction coerce() {\n\t  if (arguments.length === 1) return coerceValue(arguments[0]);\n\t  else if (arguments.length > 1) return coerceRecord(arguments);\n\t}\n\tfunction coerceValue(value) {\n\t  if (isRecord(value)) return coerceRecord(value);\n\t  else if (isObject(value)) return coerceObject(value);\n\t  else return value;\n\t}\n\tfunction coerceRecord(items) {\n\t  var record = [];\n\t  var i, n;\n\t  for (i = 0, n = items.length; i < n; i += 1) {\n\t    record.push(items[i]);\n\t  }\n\t  var keys = Object.keys(items);\n\t  for (i = 0, n = keys.length; i < n; i += 1) {\n\t    var key = keys[i];\n\t    if (isNaN(parseInt(key)) && key.length > 0 && key.charCodeAt(0) !== 36/*'$'*/) {\n\t      var value = coerceValue(items[key]);\n\t      set(record, key, value);\n\t    }\n\t  }\n\t  return record;\n\t}\n\tfunction coerceObject(fields) {\n\t  var keys = Object.keys(fields);\n\t  var n = keys.length;\n\t  var record = new Array(n);\n\t  for (var i = 0; i < n; i += 1) {\n\t    var key = keys[i];\n\t    var value = coerceValue(fields[key]);\n\t    var field = {};\n\t    field[key] = value;\n\t    record[i] = field;\n\t    record[key] = value;\n\t  }\n\t  return record;\n\t}\n\n\n\tfunction RecordBuilder() {\n\t  this.items = [];\n\t}\n\tRecordBuilder.prototype.appendItem = function (item) {\n\t  if (isField(item)) this.appendFields(item);\n\t  else this.appendValue(item);\n\t};\n\tRecordBuilder.prototype.appendFields = function (fields) {\n\t  var keys = Object.keys(fields);\n\t  for (var i = 0, n = keys.length; i < n; i += 1) {\n\t    var key = keys[i];\n\t    var value = fields[key];\n\t    this.appendField(key, value);\n\t  }\n\t};\n\tRecordBuilder.prototype.appendField = function (key, value) {\n\t  var field = {};\n\t  if (typeof key === 'string') {\n\t    field[key] = value;\n\t    this.items.push(field);\n\t    this.items[key] = value;\n\t  }\n\t  else {\n\t    field.$key = key;\n\t    field.$value = value;\n\t    this.items.push(field);\n\t  }\n\t};\n\tRecordBuilder.prototype.appendValue = function (value) {\n\t  this.items.push(value);\n\t};\n\tRecordBuilder.prototype.appendRecord = function (record) {\n\t  for (var i = 0, n = record.length; i < n; i += 1) {\n\t    this.appendItem(record[i]);\n\t  }\n\t};\n\tRecordBuilder.prototype.state = function () {\n\t  return this.items;\n\t};\n\n\n\tfunction ValueBuilder() {\n\t  this.items = null;\n\t  this.value = null;\n\t}\n\tValueBuilder.prototype.appendItem = function (item) {\n\t  if (isField(item)) this.appendField(item);\n\t  else this.appendValue(item);\n\t};\n\tValueBuilder.prototype.appendFields = function (fields) {\n\t  var keys = Object.keys(fields);\n\t  for (var i = 0, n = keys.length; i < n; i += 1) {\n\t    var key = keys[i];\n\t    var value = fields[key];\n\t    this.appendField(key, value);\n\t  }\n\t};\n\tValueBuilder.prototype.appendField = function (key, value) {\n\t  if (this.items === null) {\n\t    this.items = [];\n\t    if (this.value !== null) {\n\t      this.items.push(this.value);\n\t      this.value = null;\n\t    }\n\t  }\n\t  var field = {};\n\t  if (typeof key === 'string') {\n\t    field[key] = value;\n\t    this.items.push(field);\n\t    this.items[key] = value;\n\t  }\n\t  else {\n\t    field.$key = key;\n\t    field.$value = value;\n\t    this.items.push(field);\n\t  }\n\t};\n\tValueBuilder.prototype.appendValue = function (value) {\n\t  if (this.items !== null) this.items.push(value);\n\t  else if (this.value === null) this.value = value;\n\t  else {\n\t    this.items = [];\n\t    this.items.push(this.value);\n\t    this.value = null;\n\t    this.items.push(value);\n\t  }\n\t};\n\tValueBuilder.prototype.state = function () {\n\t  if (this.value !== null) return this.value;\n\t  else if (this.items !== null) return this.items;\n\t};\n\n\n\tfunction StringIterator(string, index, more) {\n\t  this.string = string || '';\n\t  this.index = index || 0;\n\t  this.more = more || false;\n\t}\n\tStringIterator.prototype.isDone = function () {\n\t  return this.isEmpty() && !this.more;\n\t};\n\tStringIterator.prototype.isEmpty = function () {\n\t  return this.index >= this.string.length;\n\t};\n\tStringIterator.prototype.head = function () {\n\t  var c1 = this.string.charCodeAt(this.index);\n\t  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF\n\t  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n\t    var c2 = this.string.charCodeAt(this.index + 1);\n\t    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n\t      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;\n\t    else return 0xFFFD;\n\t  }\n\t  else return 0xFFFD;\n\t};\n\tStringIterator.prototype.step = function () {\n\t  var c1 = this.string.charCodeAt(this.index);\n\t  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF\n\t    this.index += 1;\n\t  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800\n\t    var c2 = this.string.charCodeAt(this.index + 1);\n\t    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF\n\t      this.index += 2;\n\t    else this.index += 1;\n\t  }\n\t  else this.index += 1;\n\t};\n\tStringIterator.prototype.dup = function () {\n\t  return new StringIterator(this.string, this.index, this.more);\n\t};\n\n\tStringIterator.Done = {\n\t  isDone: function () {\n\t    return true;\n\t  },\n\t  isEmpty: function () {\n\t    return true;\n\t  },\n\t  head: function () {\n\t    throw 'head of empty iterator';\n\t  },\n\t  step: function () {\n\t    throw 'empty iterator step';\n\t  }\n\t};\n\tStringIterator.Done.prototype = Object.create(StringIterator.prototype);\n\n\n\tfunction StringIteratee() {}\n\tStringIteratee.prototype.isCont = function () {\n\t  return true;\n\t};\n\tStringIteratee.prototype.isDone = function () {\n\t  return false;\n\t};\n\tStringIteratee.prototype.isError = function () {\n\t  return false;\n\t};\n\tStringIteratee.prototype.feed = function (input) {\n\t  return this;\n\t};\n\tStringIteratee.prototype.run = function (input) {\n\t  var next = this;\n\t  do next = next.feed(input);\n\t  while (!input.isEmpty() && next.isCont());\n\t  if (input.isEmpty() && !input.isDone() && next.isCont()) {\n\t    next = next.feed(StringIterator.Done);\n\t  }\n\t  return next;\n\t};\n\tStringIteratee.prototype.state = function () {};\n\n\tStringIteratee.Done = function (value) {\n\t  StringIteratee.call(this);\n\t  this.value = value;\n\t};\n\tStringIteratee.Done.prototype = Object.create(StringIteratee.prototype);\n\tStringIteratee.Done.prototype.constructor = StringIteratee.Done;\n\tStringIteratee.Done.prototype.isCont = function () {\n\t  return false;\n\t};\n\tStringIteratee.Done.prototype.isDone = function () {\n\t  return true;\n\t};\n\tStringIteratee.Done.prototype.feed = function (input) {\n\t  return this;\n\t};\n\tStringIteratee.Done.prototype.state = function () {\n\t  return this.value;\n\t};\n\n\tStringIteratee.Error = function (error) {\n\t  StringIteratee.call(this);\n\t  if (typeof error.found === 'number') error.found = String.fromCharCode(error.found);\n\t  this.error = error;\n\t};\n\tStringIteratee.Error.prototype = Object.create(StringIteratee.prototype);\n\tStringIteratee.Error.prototype.constructor = StringIteratee.Error;\n\tStringIteratee.Error.prototype.isCont = function () {\n\t  return false;\n\t};\n\tStringIteratee.Error.prototype.isError = function () {\n\t  return true;\n\t};\n\tStringIteratee.Error.prototype.feed = function (input) {\n\t  return this;\n\t};\n\tStringIteratee.Error.prototype.state = function () {\n\t  throw this.error;\n\t};\n\n\tStringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');\n\n\n\tfunction StringBuilder(s) {\n\t  this.string = s || '';\n\t}\n\tStringBuilder.prototype.append = function (c) {\n\t  if ((c >= 0x0000 && c <= 0xD7FF) ||\n\t      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF\n\t    this.string += String.fromCharCode(c);\n\t  }\n\t  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n\t    var u = c - 0x10000;\n\t    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));\n\t  }\n\t  else { // invalid code point\n\t    this.string += String.fromCharCode(0xFFFD);\n\t  }\n\t};\n\tStringBuilder.prototype.appendString = function (s) {\n\t  var cs = new StringIterator(s);\n\t  while (!cs.isEmpty()) {\n\t    this.append(cs.head());\n\t    cs.step();\n\t  }\n\t};\n\tStringBuilder.prototype.state = function () {\n\t  return this.string;\n\t};\n\n\n\tfunction DataBuilder() {\n\t  this.buffer = null;\n\t  this.offset = 0;\n\t  this.aliased = true;\n\t  this.p = 0;\n\t  this.q = 0;\n\t  this.r = 0;\n\t  this.s = 0;\n\t}\n\tDataBuilder.prototype.prepare = function (size) {\n\t  function expand(base, size) {\n\t    var n = Math.max(base, size) - 1;\n\t    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;\n\t    return n + 1;\n\t  }\n\t  if (this.aliased || size > this.buffer.length) {\n\t    var array = new Uint8Array(expand(256, size));\n\t    if (this.buffer) array.set(this.buffer);\n\t    this.buffer = array;\n\t    this.aliased = false;\n\t  }\n\t};\n\tDataBuilder.prototype.appendByte = function (value) {\n\t  this.prepare(this.offset + 1);\n\t  this.buffer[this.offset] = value;\n\t  this.offset += 1;\n\t};\n\tDataBuilder.prototype.decodeBase64Digit = function (c) {\n\t  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;\n\t  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;\n\t  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;\n\t  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;\n\t  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;\n\t};\n\tDataBuilder.prototype.decodeBase64Quantum = function () {\n\t  var x = this.decodeBase64Digit(this.p);\n\t  var y = this.decodeBase64Digit(this.q);\n\t  if (this.r !== 61/*'='*/) {\n\t    var z = this.decodeBase64Digit(this.r);\n\t    if (this.s !== 61/*'='*/) {\n\t      var w = this.decodeBase64Digit(this.s);\n\t      this.appendByte((x << 2) | (y >>> 4));\n\t      this.appendByte((y << 4) | (z >>> 2));\n\t      this.appendByte((z << 6) | w);\n\t    }\n\t    else {\n\t      this.appendByte((x << 2) | (y >>> 4));\n\t      this.appendByte((y << 4) | (z >>> 2));\n\t    }\n\t  }\n\t  else {\n\t    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';\n\t    this.appendByte((x << 2) | (y >>> 4));\n\t  }\n\t};\n\tDataBuilder.prototype.appendBase64Char = function (c) {\n\t  if (this.p === 0) this.p = c;\n\t  else if (this.q === 0) this.q = c;\n\t  else if (this.r === 0) this.r = c;\n\t  else {\n\t    this.s = c;\n\t    this.decodeBase64Quantum();\n\t    this.s = 0;\n\t    this.r = 0;\n\t    this.q = 0;\n\t    this.p = 0;\n\t  }\n\t};\n\tDataBuilder.prototype.state = function (value) {\n\t  if (!this.buffer) this.buffer = new Uint8Array(0);\n\t  else if (this.buffer.length !== this.offset) {\n\t    var array = new Uint8Array(this.offset);\n\t    array.set(this.buffer.subarray(0, this.offset));\n\t    this.buffer = array;\n\t  }\n\t  this.aliased = true;\n\t  return this.buffer;\n\t};\n\n\n\tfunction isSpace(c) {\n\t  return c === 0x20 || c === 0x9;\n\t}\n\tfunction isNewline(c) {\n\t  return c === 0xA || c === 0xD;\n\t}\n\tfunction isWhitespace(c) {\n\t  return isSpace(c) || isNewline(c);\n\t}\n\tfunction isNameStartChar(c) {\n\t  return (\n\t    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n\t    c === 95/*'_'*/ ||\n\t    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n\t    c >= 0xC0 && c <= 0xD6 ||\n\t    c >= 0xD8 && c <= 0xF6 ||\n\t    c >= 0xF8 && c <= 0x2FF ||\n\t    c >= 0x370 && c <= 0x37D ||\n\t    c >= 0x37F && c <= 0x1FFF ||\n\t    c >= 0x200C && c <= 0x200D ||\n\t    c >= 0x2070 && c <= 0x218F ||\n\t    c >= 0x2C00 && c <= 0x2FEF ||\n\t    c >= 0x3001 && c <= 0xD7FF ||\n\t    c >= 0xF900 && c <= 0xFDCF ||\n\t    c >= 0xFDF0 && c <= 0xFFFD ||\n\t    c >= 0x10000 && c <= 0xEFFFF);\n\t}\n\tfunction isNameChar(c) {\n\t  return (\n\t    c === 45/*'-'*/ ||\n\t    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n\t    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n\t    c === 95/*'_'*/ ||\n\t    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n\t    c === 0xB7 ||\n\t    c >= 0xC0 && c <= 0xD6 ||\n\t    c >= 0xD8 && c <= 0xF6 ||\n\t    c >= 0xF8 && c <= 0x37D ||\n\t    c >= 0x37F && c <= 0x1FFF ||\n\t    c >= 0x200C && c <= 0x200D ||\n\t    c >= 0x203F && c <= 0x2040 ||\n\t    c >= 0x2070 && c <= 0x218F ||\n\t    c >= 0x2C00 && c <= 0x2FEF ||\n\t    c >= 0x3001 && c <= 0xD7FF ||\n\t    c >= 0xF900 && c <= 0xFDCF ||\n\t    c >= 0xFDF0 && c <= 0xFFFD ||\n\t    c >= 0x10000 && c <= 0xEFFFF);\n\t}\n\tfunction isBase64Char(c) {\n\t  return (\n\t    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n\t    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n\t    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n\t    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n\t    c === 47/*'/'*/ || c === 95/*'_'*/);\n\t}\n\n\n\tfunction DocumentParser(value) {\n\t  StringIteratee.call(this);\n\t  this.value = value || new BlockParser();\n\t}\n\tDocumentParser.prototype = Object.create(StringIteratee.prototype);\n\tDocumentParser.prototype.constructor = DocumentParser;\n\tDocumentParser.prototype.feed = function (input) {\n\t  var value = this.value;\n\t  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t  if (value.isError()) return value;\n\t  if (value.isDone()) {\n\t    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});\n\t    else if (input.isDone()) return value;\n\t  }\n\t  return new DocumentParser(value);\n\t};\n\n\n\tfunction BlockParser(builder, key, value, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.key = key || null;\n\t  this.value = value || null;\n\t  this.s = s || 1;\n\t}\n\tBlockParser.prototype = Object.create(StringIteratee.prototype);\n\tBlockParser.prototype.constructor = BlockParser;\n\tBlockParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var value = this.value;\n\t  var key = this.key;\n\t  var builder = this.builder || new ValueBuilder();\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 1) {\n\t      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n\t      if (!input.isEmpty()) {\n\t        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||\n\t            c === 34/*'\"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)\n\t          s = 2;\n\t        else return new StringIteratee.Error({expected: 'block value', found: c});\n\t      }\n\t      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n\t    }\n\t    if (s === 2) {\n\t      key = key || new BlockValueParser();\n\t      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n\t      if (key.isDone()) s = 3;\n\t      else if (key.isError()) return key;\n\t    }\n\t    if (s === 3) {\n\t      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n\t      if (!input.isEmpty()) {\n\t        if (c === 58/*':'*/) {\n\t          input.step();\n\t          s = 4;\n\t        }\n\t        else {\n\t          builder.appendValue(key.state());\n\t          key = null;\n\t          s = 6;\n\t        }\n\t      }\n\t      else if (input.isDone()) {\n\t        builder.appendValue(key.state());\n\t        return new StringIteratee.Done(builder.state());\n\t      }\n\t    }\n\t    if (s === 4) {\n\t      while (!input.isEmpty() && isSpace(input.head())) input.step();\n\t      if (!input.isEmpty()) s = 5;\n\t      else if (input.isDone()) {\n\t        builder.appendField(key.state(), null);\n\t        return new StringIteratee.Done(builder.state());\n\t      }\n\t    }\n\t    if (s === 5) {\n\t      value = value || new BlockValueParser();\n\t      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t      if (value.isDone()) {\n\t        builder.appendField(key.state(), value.state());\n\t        key = null;\n\t        value = null;\n\t        s = 6;\n\t      }\n\t      else if (value.isError()) return value;\n\t    }\n\t    if (s === 6) {\n\t      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n\t      if (!input.isEmpty()) {\n\t        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n\t          input.step();\n\t          s = 1;\n\t        }\n\t        else return new StringIteratee.Done(builder.state());\n\t      }\n\t      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n\t    }\n\t  }\n\t  return new BlockParser(builder, key, value, s);\n\t};\n\n\n\tfunction AttrParser(ident, value, s) {\n\t  StringIteratee.call(this);\n\t  this.ident = ident || null;\n\t  this.value = value || new BlockParser();\n\t  this.s = s || 1;\n\t}\n\tAttrParser.prototype = Object.create(StringIteratee.prototype);\n\tAttrParser.prototype.constructor = AttrParser;\n\tAttrParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var value = this.value;\n\t  var ident = this.ident;\n\t  var field;\n\t  if (s === 1) {\n\t    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n\t      input.step();\n\t      s = 2;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'@\\'', found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 2) {\n\t    if (!ident) ident = new IdentParser(new StringBuilder('@'));\n\t    ident = ident.feed(input);\n\t    if (ident.isDone()) s = 3;\n\t    else if (ident.isError()) return ident;\n\t  }\n\t  if (s === 3) {\n\t    if (!input.isEmpty() && input.head() === 40/*'('*/) {\n\t      input.step();\n\t      s = 4;\n\t    }\n\t    else if (!input.isEmpty() || input.isDone()) {\n\t      field = {};\n\t      field[ident.state()] = null;\n\t      return new StringIteratee.Done(field);\n\t    }\n\t  }\n\t  if (s === 4) {\n\t    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n\t    if (!input.isEmpty()) {\n\t      if (c === 41/*')'*/) {\n\t        input.step();\n\t        field = {};\n\t        field[ident.state()] = null;\n\t        return new StringIteratee.Done(field);\n\t      }\n\t      else s = 5;\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 5) {\n\t    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t    if (value.isDone()) s = 6;\n\t    else if (value.isError()) return value;\n\t  }\n\t  if (s === 6) {\n\t    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n\t    if (!input.isEmpty()) {\n\t      if (c === 41/*')'*/) {\n\t        input.step();\n\t        field = {};\n\t        field[ident.state()] = value.state();\n\t        return new StringIteratee.Done(field);\n\t      }\n\t      else return new StringIteratee.Error({expected: '\\')\\'', found: c});\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  return new AttrParser(ident, value, s);\n\t};\n\n\n\tfunction BlockValueParser(builder, field, value, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.field = field || null;\n\t  this.value = value || null;\n\t  this.s = s || 1;\n\t}\n\tBlockValueParser.prototype = Object.create(StringIteratee.prototype);\n\tBlockValueParser.prototype.constructor = BlockValueParser;\n\tBlockValueParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var value = this.value;\n\t  var field = this.field;\n\t  var builder = this.builder;\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 1) {\n\t      if (!input.isEmpty()) {\n\t        c = input.head();\n\t        if (c === 64/*'@'*/) {\n\t          field = new AttrParser();\n\t          s = 2;\n\t        }\n\t        else if (c === 123/*'{'*/) {\n\t          builder = builder || new RecordBuilder();\n\t          value = new RecordParser(builder);\n\t          s = 5;\n\t        }\n\t        else if (c === 91/*'['*/) {\n\t          builder = builder || new RecordBuilder();\n\t          value = new MarkupParser(builder);\n\t          s = 5;\n\t        }\n\t        else if (isNameStartChar(c)) {\n\t          value = new IdentParser();\n\t          s = 4;\n\t        }\n\t        else if (c === 34/*'\"'*/) {\n\t          value = new StringParser();\n\t          s = 4;\n\t        }\n\t        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n\t          value = new NumberParser();\n\t          s = 4;\n\t        }\n\t        else if (c === 37/*'%'*/) {\n\t          value = new DataParser();\n\t          s = 4;\n\t        }\n\t        else if (!builder) return new StringIteratee.Done(undefined);\n\t        else return new StringIteratee.Done(builder.state());\n\t      }\n\t      else if (input.isDone()) {\n\t        if (!builder) return new StringIteratee.Done(undefined);\n\t        else return new StringIteratee.Done(builder.state());\n\t      }\n\t    }\n\t    if (s === 2) {\n\t      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n\t      if (field.isDone()) {\n\t        builder = builder || new ValueBuilder();\n\t        builder.appendFields(field.state());\n\t        field = null;\n\t        s = 3;\n\t      }\n\t      else if (field.isError()) return field;\n\t    }\n\t    if (s === 3) {\n\t      while (!input.isEmpty() && isSpace(input.head())) input.step();\n\t      if (!input.isEmpty()) s = 1;\n\t      else if (input.isDone()) return new StringIteratee.Done(builder.state());\n\t    }\n\t    if (s === 4) {\n\t      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t      if (value.isDone()) {\n\t        builder = builder || new ValueBuilder();\n\t        builder.appendValue(value.state());\n\t        value = null;\n\t        s = 6;\n\t      }\n\t      else if (value.isError()) return value;\n\t    }\n\t    if (s === 5) {\n\t      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t      if (value.isDone()) {\n\t        value = null;\n\t        s = 6;\n\t      }\n\t      else if (value.isError()) return value;\n\t    }\n\t    if (s === 6) {\n\t      while (!input.isEmpty() && isSpace(input.head())) input.step();\n\t      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;\n\t      else return new StringIteratee.Done(builder.state());\n\t    }\n\t  }\n\t  return new BlockValueParser(builder, field, value, s);\n\t};\n\n\n\tfunction InlineValueParser(builder, field, value, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.field = field || null;\n\t  this.value = value || null;\n\t  this.s = s || 1;\n\t}\n\tInlineValueParser.prototype = Object.create(StringIteratee.prototype);\n\tInlineValueParser.prototype.constructor = InlineValueParser;\n\tInlineValueParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var value = this.value;\n\t  var field = this.field;\n\t  var builder = this.builder;\n\t  if (s === 1) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 64/*'@'*/) {\n\t        field = new AttrParser();\n\t        s = 2;\n\t      }\n\t      else if (c === 123/*'{'*/) {\n\t        if (builder) {\n\t          value = new RecordParser(builder);\n\t          s = 5;\n\t        }\n\t        else {\n\t          value = new RecordParser();\n\t          s = 4;\n\t        }\n\t      }\n\t      else if (c === 91/*'['*/) {\n\t        if (builder) {\n\t          value = new MarkupParser(builder);\n\t          s = 5;\n\t        }\n\t        else {\n\t          value = new MarkupParser();\n\t          s = 4;\n\t        }\n\t      }\n\t      else if (!builder) return new StringIteratee.Done(null);\n\t      else return new StringIteratee.Done(builder.state());\n\t    }\n\t    else if (input.isDone()) {\n\t      if (!builder) return new StringIteratee.Done(null);\n\t      else return new StringIteratee.Done(builder.state());\n\t    }\n\t  }\n\t  if (s === 2) {\n\t    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);\n\t    if (field.isDone()) {\n\t      builder = builder || new ValueBuilder();\n\t      builder.appendFields(field.state());\n\t      field = null;\n\t      s = 3;\n\t    }\n\t    else if (field.isError()) return field;\n\t  }\n\t  if (s === 3) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 123/*'{'*/) {\n\t        value = new RecordParser(builder);\n\t        s = 5;\n\t      }\n\t      else if (c === 91/*'['*/) {\n\t        value = new MarkupParser(builder);\n\t        s = 5;\n\t      }\n\t      else return new StringIteratee.Done(builder.state());\n\t    }\n\t    else if (input.isDone()) return new StringIteratee.Done(builder.state());\n\t  }\n\t  if (s === 4) {\n\t    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t    if (value.isDone()) {\n\t      builder = builder || new ValueBuilder();\n\t      builder.appendValue(value.state());\n\t      return new StringIteratee.Done(builder.state());\n\t    }\n\t    else if (value.isError()) return value;\n\t  }\n\t  if (s === 5) {\n\t    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t    if (value.isDone()) return new StringIteratee.Done(builder.state());\n\t    else if (value.isError()) return value;\n\t  }\n\t  return new InlineValueParser(builder, field, value, s);\n\t};\n\n\n\tfunction RecordParser(builder, key, value, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.key = key || null;\n\t  this.value = value || null;\n\t  this.s = s || 1;\n\t}\n\tRecordParser.prototype = Object.create(StringIteratee.prototype);\n\tRecordParser.prototype.constructor = RecordParser;\n\tRecordParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var value = this.value;\n\t  var key = this.key;\n\t  var builder = this.builder || new RecordBuilder();\n\t  if (s === 1) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 123/*'{'*/) {\n\t        input.step();\n\t        s = 2;\n\t      }\n\t      else return new StringIteratee.Error({expected: '\\'{\\'', found: c});\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 2) {\n\t      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();\n\t      if (!input.isEmpty()) {\n\t        if (c === 125/*'}'*/) {\n\t          input.step();\n\t          return new StringIteratee.Done(builder.state());\n\t        }\n\t        else s = 3;\n\t      }\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      key = key || new BlockValueParser();\n\t      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);\n\t      if (key.isDone()) s = 4;\n\t      else if (key.isError()) return key;\n\t    }\n\t    if (s === 4) {\n\t      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n\t      if (!input.isEmpty()) {\n\t        if (c === 58/*':'*/) {\n\t          input.step();\n\t          s = 5;\n\t        }\n\t        else {\n\t          builder.appendValue(key.state());\n\t          key = null;\n\t          s = 7;\n\t        }\n\t      }\n\t      else if (input.isDone()) {\n\t        builder.appendValue(key.state());\n\t        return new StringIteratee.Done(builder.state());\n\t      }\n\t    }\n\t    if (s === 5) {\n\t      while (!input.isEmpty() && isSpace(input.head())) input.step();\n\t      if (!input.isEmpty()) s = 6;\n\t      else if (input.isDone()) {\n\t        builder.appendField(key, null);\n\t        return new StringIteratee.Done(builder.state());\n\t      }\n\t    }\n\t    if (s === 6) {\n\t      value = value || new BlockValueParser();\n\t      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t      if (value.isDone()) {\n\t        builder.appendField(key.state(), value.state());\n\t        key = null;\n\t        value = null;\n\t        s = 7;\n\t      }\n\t      else if (value.isError()) return value;\n\t    }\n\t    if (s === 7) {\n\t      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();\n\t      if (!input.isEmpty()) {\n\t        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {\n\t          input.step();\n\t          s = 2;\n\t        }\n\t        else if (c === 125/*'}'*/) {\n\t          input.step();\n\t          return new StringIteratee.Done(builder.state());\n\t        }\n\t       else return new StringIteratee.Error({expected: '\\'}\\', \\';\\', \\',\\', or newline', found: c});\n\t      }\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new RecordParser(builder, key, value, s);\n\t};\n\n\n\tfunction MarkupParser(builder, text, value, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.text = text || null;\n\t  this.value = value || null;\n\t  this.s = s || 1;\n\t}\n\tMarkupParser.prototype = Object.create(StringIteratee.prototype);\n\tMarkupParser.prototype.constructor = MarkupParser;\n\tMarkupParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var value = this.value;\n\t  var text = this.text;\n\t  var builder = this.builder;\n\t  if (s === 1) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 91/*'['*/) {\n\t        input.step();\n\t        s = 2;\n\t      }\n\t      else return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 2) {\n\t      while (!input.isEmpty() && (c = input.head(),\n\t          c !== 64/*'@'*/ &&\n\t          c !== 91/*'['*/ &&\n\t          c !== 92/*'\\\\'*/ &&\n\t          c !== 93/*']'*/ &&\n\t          c !== 123/*'{'*/ &&\n\t          c !== 125/*'}'*/)) {\n\t        input.step();\n\t        text = text || new StringBuilder();\n\t        text.append(c);\n\t      }\n\t      if (!input.isEmpty()) {\n\t        if (c === 93/*']'*/) {\n\t          input.step();\n\t          builder = builder || new RecordBuilder();\n\t          if (text) builder.appendValue(text.state());\n\t          return new StringIteratee.Done(builder.state());\n\t        }\n\t        else if (c === 64/*'@'*/) {\n\t          builder = builder || new RecordBuilder();\n\t          if (text) {\n\t            builder.appendValue(text.state());\n\t            text = null;\n\t          }\n\t          value = new InlineValueParser();\n\t          s = 3;\n\t        }\n\t        else if (c === 123/*'{'*/) {\n\t          builder = builder || new RecordBuilder();\n\t          if (text) {\n\t            builder.appendValue(text.state());\n\t            text = null;\n\t          }\n\t          value = new RecordParser(builder);\n\t          s = 4;\n\t        }\n\t        else if (c === 91/*'['*/) {\n\t          builder = builder || new RecordBuilder();\n\t          if (text) {\n\t            builder.appendValue(text.state());\n\t            text = null;\n\t          }\n\t          value = new MarkupParser(builder);\n\t          s = 4;\n\t        }\n\t        else if (c === 92/*'\\\\'*/) {\n\t          input.step();\n\t          s = 5;\n\t        }\n\t        else new StringIteratee.Error({found: c});\n\t      }\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t      if (value.isDone()) {\n\t        builder.appendValue(value.state());\n\t        value = null;\n\t        s = 2;\n\t      }\n\t      else if (value.isError()) return value;\n\t    }\n\t    if (s === 4) {\n\t      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);\n\t      if (value.isDone()) {\n\t        value = null;\n\t        s = 2;\n\t      }\n\t      else if (value.isError()) return value;\n\t    }\n\t    if (s === 5) {\n\t      if (!input.isEmpty()) {\n\t        c = input.head();\n\t        text = text || new StringBuilder();\n\t        if (c === 34/*'\"'*/ ||\n\t            c === 47/*'/'*/ ||\n\t            c === 64/*'@'*/ ||\n\t            c === 91/*'['*/ ||\n\t            c === 92/*'\\\\'*/ ||\n\t            c === 93/*']'*/ ||\n\t            c === 123/*'{'*/ ||\n\t            c === 125/*'}'*/) {\n\t          input.step();\n\t          text.append(c);\n\t          s = 2;\n\t        }\n\t        else if (c === 98/*'b'*/) {\n\t          input.step();\n\t          text.append(8/*'\\b'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 102/*'f'*/) {\n\t          input.step();\n\t          text.append(12/*'\\f'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 110/*'n'*/) {\n\t          input.step();\n\t          text.append(10/*'\\n'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 114/*'r'*/) {\n\t          input.step();\n\t          text.append(13/*'\\r'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 116/*'t'*/) {\n\t          input.step();\n\t          text.append(9/*'\\t'*/);\n\t          s = 2;\n\t        }\n\t        else return new StringIteratee.Error({expected: 'escape character', found: c});\n\t      }\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new MarkupParser(builder, text, value, s);\n\t};\n\n\n\tfunction IdentParser(builder, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.s = s || 1;\n\t}\n\tIdentParser.prototype = Object.create(StringIteratee.prototype);\n\tIdentParser.prototype.constructor = IdentParser;\n\tIdentParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var builder = this.builder;\n\t  if (s === 1) {\n\t    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {\n\t      builder = builder || new StringBuilder();\n\t      input.step();\n\t      builder.append(c);\n\t      s = 2;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 2) {\n\t    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {\n\t      input.step();\n\t      builder.append(c);\n\t    }\n\t    if (!input.isEmpty() || input.isDone()) {\n\t      var value = builder.state();\n\t      if (value === 'true') value = true;\n\t      else if (value === 'false') value = false;\n\t      return new StringIteratee.Done(value);\n\t    }\n\t  }\n\t  return new IdentParser(builder, s);\n\t};\n\n\n\tfunction StringParser(text, s) {\n\t  StringIteratee.call(this);\n\t  this.text = text || null;\n\t  this.s = s || 1;\n\t}\n\tStringParser.prototype = Object.create(StringIteratee.prototype);\n\tStringParser.prototype.constructor = StringParser;\n\tStringParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var text = this.text;\n\t  if (s === 1) {\n\t    if (!input.isEmpty() && (c = input.head(), c === 34/*'\"'*/)) {\n\t      input.step();\n\t      s = 2;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'\"\\'', found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 2) {\n\t      text = text || new StringBuilder();\n\t      while (!input.isEmpty() && (c = input.head(), c !== 34/*'\"'*/ && c !== 92/*'\\\\'*/)) {\n\t        input.step();\n\t        text.append(c);\n\t      }\n\t      if (!input.isEmpty()) {\n\t        if (c === 34/*'\"'*/) {\n\t          input.step();\n\t          return new StringIteratee.Done(text.state());\n\t        }\n\t        else if (c === 92/*'\\\\'*/) {\n\t          input.step();\n\t          s = 3;\n\t        }\n\t      }\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      if (!input.isEmpty()) {\n\t        c = input.head();\n\t        if (c === 34/*'\"'*/ ||\n\t            c === 47/*'/'*/ ||\n\t            c === 64/*'@'*/ ||\n\t            c === 91/*'['*/ ||\n\t            c === 92/*'\\\\'*/ ||\n\t            c === 93/*']'*/ ||\n\t            c === 123/*'{'*/ ||\n\t            c === 125/*'}'*/) {\n\t          input.step();\n\t          text.append(c);\n\t          s = 2;\n\t        }\n\t        else if (c === 98/*'b'*/) {\n\t          input.step();\n\t          text.append(8/*'\\b'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 102/*'f'*/) {\n\t          input.step();\n\t          text.append(12/*'\\f'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 110/*'n'*/) {\n\t          input.step();\n\t          text.append(10/*'\\n'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 114/*'r'*/) {\n\t          input.step();\n\t          text.append(13/*'\\r'*/);\n\t          s = 2;\n\t        }\n\t        else if (c === 116/*'t'*/) {\n\t          input.step();\n\t          text.append(9/*'\\t'*/);\n\t          s = 2;\n\t        }\n\t        else return new StringIteratee.Error({expected: 'escape character', found: c});\n\t      }\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new StringParser(text, s);\n\t};\n\n\n\tfunction NumberParser(builder, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.s = s || 1;\n\t}\n\tNumberParser.prototype = Object.create(StringIteratee.prototype);\n\tNumberParser.prototype.constructor = NumberParser;\n\tNumberParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var builder = this.builder || new StringBuilder();\n\t  if (s === 1) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 45/*'-'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t      }\n\t      s = 2;\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 2) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 48/*'0'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t        s = 4;\n\t      }\n\t      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t        s = 3;\n\t      }\n\t      else return new StringIteratee.Error({expected: 'digit', found: c});\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 3) {\n\t    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n\t      input.step();\n\t      builder.append(c);\n\t    }\n\t    if (!input.isEmpty()) s = 4;\n\t    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n\t  }\n\t  if (s === 4) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 46/*'.'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t        s = 5;\n\t      }\n\t      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t        s = 8;\n\t      }\n\t      else return new StringIteratee.Done(Number(builder.state()));\n\t    }\n\t    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n\t  }\n\t  if (s === 5) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t        s = 6;\n\t      }\n\t      else return new StringIteratee.Error({expected: 'digit', found: c});\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 6) {\n\t    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n\t      input.step();\n\t      builder.append(c);\n\t    }\n\t    if (!input.isEmpty()) s = 7;\n\t    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n\t  }\n\t  if (s === 7) {\n\t    c = input.head();\n\t    if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n\t      input.step();\n\t      builder.append(c);\n\t      s = 8;\n\t    }\n\t    else return new StringIteratee.Done(Number(builder.state()));\n\t  }\n\t  if (s === 8) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t      }\n\t      s = 9;\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 9) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n\t        input.step();\n\t        builder.append(c);\n\t        s = 10;\n\t      }\n\t      else return new StringIteratee.Error({expected: 'digit', found: c});\n\t    }\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 10) {\n\t    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {\n\t      input.step();\n\t      builder.append(c);\n\t    }\n\t    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));\n\t  }\n\t  return new NumberParser(builder, s);\n\t};\n\n\n\tfunction DataParser(data, s) {\n\t  StringIteratee.call(this);\n\t  this.data = data || null;\n\t  this.s = s || 1;\n\t}\n\tDataParser.prototype = Object.create(StringIteratee.prototype);\n\tDataParser.prototype.constructor = DataParser;\n\tDataParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var data = this.data || new DataBuilder();\n\t  if (s === 1) {\n\t    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {\n\t      input.step();\n\t      s = 2;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'%\\'', found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 2) {\n\t      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n\t        input.step();\n\t        data.appendBase64Char(c);\n\t        s = 3;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());\n\t    }\n\t    if (s === 3) {\n\t      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {\n\t        input.step();\n\t        data.appendBase64Char(c);\n\t        s = 4;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 4) {\n\t      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n\t        input.step();\n\t        data.appendBase64Char(c);\n\t        if (c !== 61/*'='*/) s = 5;\n\t        else s = 6;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 5) {\n\t      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {\n\t        input.step();\n\t        data.appendBase64Char(c);\n\t        if (c !== 61/*'='*/) s = 2;\n\t        else return new StringIteratee.Done(data.state());\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    else if (s === 6) {\n\t      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {\n\t        input.step();\n\t        data.appendBase64Char(c);\n\t        return new StringIteratee.Done(data.state());\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'=\\'', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new DataParser(data, s);\n\t};\n\n\n\tfunction ReconWriter(builder) {\n\t  this.builder = builder || new StringBuilder();\n\t}\n\tReconWriter.prototype.writeValue = function (value) {\n\t  if (typeof value === 'string') this.writeText(value);\n\t  else if (typeof value === 'number') this.writeNumber(value);\n\t  else if (typeof value === 'boolean') this.writeBool(value);\n\t  else if (value instanceof Uint8Array) this.writeData(value);\n\t  else if (isRecord(value)) this.writeRecord(value);\n\t  else if (isObject(value)) this.writeRecord(coerceObject(value));\n\t};\n\tReconWriter.prototype.writeItem = function (item) {\n\t  if (isField(item)) this.writeSlots(item);\n\t  else this.writeValue(item);\n\t};\n\tReconWriter.prototype.writeAttrs = function (attrs) {\n\t  var keys = Object.keys(attrs);\n\t  for (var i = 0, n = keys.length; i < n; i += 1) {\n\t    var key = keys[i];\n\t    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {\n\t      var value = attrs[key];\n\t      this.writeAttr(key.substring(1), value);\n\t    }\n\t  }\n\t};\n\tReconWriter.prototype.writeAttr = function (key, value) {\n\t  this.builder.append(64/*'@'*/);\n\t  this.writeIdent(key);\n\t  if (value !== null) {\n\t    this.builder.append(40/*'('*/);\n\t    this.writeBlock(value);\n\t    this.builder.append(41/*')'*/);\n\t  }\n\t};\n\tReconWriter.prototype.writeSlots = function (slots) {\n\t  var keys = Object.keys(slots);\n\t  var key;\n\t  var value;\n\t  var n = keys.length;\n\t  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {\n\t    key = slots.$key;\n\t    value = slots.$value;\n\t    this.writeSlot(key, value);\n\t  }\n\t  else for (var i = 0; i < n; i += 1) {\n\t    key = keys[i];\n\t    value = slots[key];\n\t    if (i > 0) this.builder.append(44/*','*/);\n\t    this.writeSlot(key, value);\n\t  }\n\t};\n\tReconWriter.prototype.writeSlot = function (key, value) {\n\t  this.writeValue(key);\n\t  this.builder.append(58/*':'*/);\n\t  if (value !== null) this.writeValue(value);\n\t};\n\tReconWriter.prototype.writeBlock = function (value) {\n\t  if (!isObject(value)) this.writeValue(value);\n\t  else {\n\t    if (!isRecord(value)) value = coerceObject(value);\n\t    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);\n\t    else {\n\t      this.builder.append(123/*'{'*/);\n\t      this.builder.append(125/*'}'*/);\n\t    }\n\t  }\n\t};\n\tReconWriter.prototype.writeRecord = function (record) {\n\t  if (record.length > 0) this.writeItems(record, false, false);\n\t  else {\n\t    this.builder.append(123/*'{'*/);\n\t    this.builder.append(125/*'}'*/);\n\t  }\n\t};\n\tReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {\n\t  var i = 0;\n\t  var n = items.length;\n\t  var inBraces = false;\n\t  var inBrackets = false;\n\t  var first = true;\n\t  while (i < n) {\n\t    var item = items[i];\n\t    i += 1;\n\t    if (inBrackets && isAttr(item)) {\n\t      if (inBraces) {\n\t        this.builder.append(125/*'}'*/);\n\t        inBraces = false;\n\t      }\n\t      this.builder.append(93/*']'*/);\n\t      inBrackets = false;\n\t    }\n\t    if (isAttr(item)) {\n\t      if (inBraces) {\n\t        this.builder.append(125/*'}'*/);\n\t        inBraces = false;\n\t      }\n\t      else if (inBrackets) {\n\t        this.builder.append(93/*']'*/);\n\t        inBrackets = false;\n\t      }\n\t      this.writeAttrs(item);\n\t      first = false;\n\t    }\n\t    else if (inBrackets && typeof item === 'string') {\n\t      if (inBraces) {\n\t        this.builder.append(125/*'}'*/);\n\t        inBraces = false;\n\t      }\n\t      this.writeMarkupText(item);\n\t    }\n\t    else if (inBraces) {\n\t      if (!first) this.builder.append(44/*','*/);\n\t      else first = false;\n\t      this.writeItem(item);\n\t    }\n\t    else if (inBrackets) {\n\t      if (isRecord(item) && isMarkupSafe(item)) {\n\t        this.writeItems(item, false, true);\n\t        if (i < n && typeof items[i] === 'string') {\n\t          this.writeMarkupText(items[i]);\n\t          i += 1;\n\t        }\n\t        else if (i < n && !isAttr(items[i])) {\n\t          this.builder.append(123/*'{'*/);\n\t          inBraces = true;\n\t          first = true;\n\t        }\n\t        else {\n\t          this.builder.append(93/*']'*/);\n\t          inBrackets = false;\n\t        }\n\t      }\n\t      else {\n\t        this.builder.append(123/*'{'*/);\n\t        this.writeItem(item);\n\t        inBraces = true;\n\t        first = false;\n\t      }\n\t    }\n\t    else if (typeof item === 'string' &&\n\t        i < n && !isField(items[i]) &&\n\t        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {\n\t      this.builder.append(91/*'['*/);\n\t      this.writeMarkupText(item);\n\t      inBrackets = true;\n\t    }\n\t    else if (inBlock && !inBraces) {\n\t      if (!first) this.builder.append(44/*','*/);\n\t      else first = false;\n\t      this.writeItem(item);\n\t    }\n\t    else if (inMarkup && typeof item === 'string' && i >= n) {\n\t      this.builder.append(91/*'['*/);\n\t      this.writeMarkupText(item);\n\t      this.builder.append(93/*']'*/);\n\t    }\n\t    else if (!inMarkup && !isField(item) && !isRecord(item) &&\n\t            (!first && i >= n || i < n && isAttr(items[i]))) {\n\t      if (!first && (typeof item === 'string' && this.isIdent(item) ||\n\t                     typeof item === 'number' ||\n\t                     typeof item === 'boolean'))\n\t        this.builder.append(32/*' '*/);\n\t      this.writeValue(item);\n\t    }\n\t    else {\n\t      this.builder.append(123/*'{'*/);\n\t      this.writeItem(item);\n\t      inBraces = true;\n\t      first = false;\n\t    }\n\t  }\n\t  if (inBraces) this.builder.append(125/*'}'*/);\n\t  if (inBrackets) this.builder.append(93/*']'*/);\n\t};\n\tReconWriter.prototype.isIdent = function (text) {\n\t  var cs = new StringIterator(text);\n\t  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;\n\t  cs.step();\n\t  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();\n\t  return cs.isEmpty();\n\t};\n\tReconWriter.prototype.writeText = function (text) {\n\t  if (this.isIdent(text)) this.writeIdent(text);\n\t  else this.writeString(text);\n\t};\n\tReconWriter.prototype.writeIdent = function (ident) {\n\t  this.builder.appendString(ident);\n\t};\n\tReconWriter.prototype.writeString = function (string) {\n\t  var cs = new StringIterator(string);\n\t  this.builder.append(34/*'\"'*/);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    switch (c) {\n\t      case 34/*'\"'*/:\n\t      case 92/*'\\\\'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n\t      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n\t      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n\t      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n\t      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n\t      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n\t      default: this.builder.append(c);\n\t    }\n\t    cs.step();\n\t  }\n\t  this.builder.append(34/*'\"'*/);\n\t};\n\tReconWriter.prototype.writeMarkupText = function (text) {\n\t  var cs = new StringIterator(text);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    switch (c) {\n\t      case 64/*'@'*/:\n\t      case 91/*'['*/:\n\t      case 92/*'\\\\'*/:\n\t      case 93/*']'*/:\n\t      case 123/*'{'*/:\n\t      case 125/*'}'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(c); break;\n\t      case 8/*'\\b'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(98/*'b'*/); break;\n\t      case 12/*'\\f'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(102/*'f'*/); break;\n\t      case 10/*'\\n'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(110/*'n'*/); break;\n\t      case 13/*'\\r'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(114/*'r'*/); break;\n\t      case 9/*'\\t'*/: this.builder.append(92/*'\\\\'*/); this.builder.append(116/*'t'*/); break;\n\t      default: this.builder.append(c);\n\t    }\n\t    cs.step();\n\t  }\n\t};\n\tReconWriter.prototype.writeNumber = function (number) {\n\t  this.builder.appendString(number.toString());\n\t};\n\tReconWriter.prototype.writeBool = function (bool) {\n\t  this.builder.appendString(bool.toString());\n\t};\n\tReconWriter.prototype.writeData = function (data) {\n\t  function encodeBase64Digit(x) {\n\t    if (x >= 0 && x < 26) return x + 65/*'A'*/;\n\t    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;\n\t    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;\n\t    else if (x === 62) return 43/*'+'*/;\n\t    else if (x === 63) return 47/*'/'*/;\n\t  }\n\t  this.builder.append(37/*'%'*/);\n\t  var i = 0;\n\t  var n = data.length;\n\t  var x, y, z;\n\t  while (i + 2 < n) {\n\t    x = data[i];\n\t    y = data[i + 1];\n\t    z = data[i + 2];\n\t    this.builder.append(encodeBase64Digit(x >>> 2));\n\t    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n\t    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));\n\t    this.builder.append(encodeBase64Digit(z & 0x3F));\n\t    i += 3;\n\t  }\n\t  if (i + 1 < n) {\n\t    x = data[i];\n\t    y = data[i + 1];\n\t    this.builder.append(encodeBase64Digit(x >>> 2));\n\t    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));\n\t    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));\n\t    this.builder.append(61/*'='*/);\n\t    i += 2;\n\t  }\n\t  else if (i < n) {\n\t    x = data[i];\n\t    this.builder.append(encodeBase64Digit(x >>> 2));\n\t    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));\n\t    this.builder.append(61/*'='*/);\n\t    this.builder.append(61/*'='*/);\n\t    i += 1;\n\t  }\n\t};\n\tReconWriter.prototype.state = function () {\n\t  return this.builder.state();\n\t};\n\n\n\tfunction isUnreservedChar(c) {\n\t  return (\n\t    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n\t    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n\t    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n\t    c === 45/*'-'*/ || c === 46/*'.'*/ ||\n\t    c === 95/*'_'*/ || c === 126/*'~'*/);\n\t}\n\n\tfunction isSubDelimChar(c) {\n\t  return (\n\t    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n\t    c === 38/*'&'*/ || c === 40/*'('*/ ||\n\t    c === 41/*')'*/ || c === 42/*'*'*/ ||\n\t    c === 43/*'+'*/ || c === 44/*','*/ ||\n\t    c === 59/*';'*/ || c === 61/*'='*/ ||\n\t    c === 39/*'\\''*/);\n\t}\n\n\tfunction isSchemeChar(c) {\n\t  return (\n\t    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n\t    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||\n\t    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||\n\t    c === 43/*'+'*/ || c === 45/*'-'*/ ||\n\t    c === 46/*'.'*/);\n\t}\n\n\tfunction isUserInfoChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    isSubDelimChar(c) ||\n\t    c === 58/*':'*/);\n\t}\n\n\tfunction isUserChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    isSubDelimChar(c));\n\t}\n\n\tfunction isHostChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    isSubDelimChar(c));\n\t}\n\n\tfunction isPathChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    isSubDelimChar(c) ||\n\t    c === 58/*':'*/ || c === 64/*'@'*/);\n\t}\n\n\tfunction isQueryChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    isSubDelimChar(c) ||\n\t    c === 47/*'/'*/ || c === 58/*':'*/ ||\n\t    c === 63/*'?'*/ || c === 64/*'@'*/);\n\t}\n\n\tfunction isParamChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    c === 33/*'!'*/ || c === 36/*'$'*/ ||\n\t    c === 40/*'('*/ || c === 41/*')'*/ ||\n\t    c === 42/*'*'*/ || c === 43/*'+'*/ ||\n\t    c === 44/*','*/ || c === 47/*'/'*/ ||\n\t    c === 58/*':'*/ || c === 59/*';'*/ ||\n\t    c === 63/*'?'*/ || c === 64/*'@'*/ ||\n\t    c === 39/*'\\''*/);\n\t}\n\n\tfunction isFragmentChar(c) {\n\t  return (\n\t    isUnreservedChar(c) ||\n\t    isSubDelimChar(c) ||\n\t    c === 47/*'/'*/ || c === 58/*':'*/ ||\n\t    c === 63/*'?'*/ || c === 64/*'@'*/);\n\t}\n\n\tfunction isAlpha(c) {\n\t  return (\n\t    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||\n\t    c >= 97/*'a'*/ && c <= 122/*'z'*/);\n\t}\n\n\tfunction isDigit(c) {\n\t  return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n\t}\n\n\tfunction isHexChar(c) {\n\t  return (\n\t    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||\n\t    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||\n\t    c >= 48/*'0'*/ && c <= 57/*'9'*/);\n\t}\n\n\tfunction decodeDigit(c) {\n\t  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n\t}\n\n\tfunction decodeHex(c) {\n\t  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;\n\t  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);\n\t  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);\n\t}\n\n\tfunction encodeHex(x) {\n\t  if (x < 10) return 48/*'0'*/ + x;\n\t  else return 65/*'A'*/ + (x - 10);\n\t}\n\n\tfunction toLowerCase(c) {\n\t  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);\n\t  else return c;\n\t}\n\n\n\tfunction UriParser(scheme, authority, path, query, fragment, s) {\n\t  StringIteratee.call(this);\n\t  this.scheme = scheme || null;\n\t  this.authority = authority || null;\n\t  this.path = path || null;\n\t  this.query = query || null;\n\t  this.fragment = fragment || null;\n\t  this.s = s || 1;\n\t}\n\tUriParser.prototype = Object.create(StringIteratee.prototype);\n\tUriParser.prototype.constructor = UriParser;\n\tUriParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var fragment = this.fragment;\n\t  var query = this.query;\n\t  var path = this.path;\n\t  var authority = this.authority;\n\t  var scheme = this.scheme;\n\t  var uri;\n\t  if (s === 1) {\n\t    if (!input.isEmpty()) {\n\t      var look = input.dup();\n\t      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();\n\t      if (!look.isEmpty() && c === 58/*':'*/) s = 2;\n\t      else s = 3;\n\t    }\n\t    else if (input.isDone()) s = 3;\n\t  }\n\t  if (s === 2) {\n\t    scheme = scheme || new SchemeParser();\n\t    scheme = scheme.feed(input);\n\t    if (scheme.isError()) return scheme;\n\t    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {\n\t      input.step();\n\t      s = 3;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\':\\'', found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 3) {\n\t    if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 47/*'/'*/) {\n\t        input.step();\n\t        s = 4;\n\t      }\n\t      else if (c === 63/*'?'*/) {\n\t        input.step();\n\t        s = 7;\n\t      }\n\t      else if (c === 35/*'#'*/) {\n\t        input.step();\n\t        s = 8;\n\t      }\n\t      else s = 6;\n\t    }\n\t    else if (input.isDone()) {\n\t      uri = {};\n\t      if (scheme) uri.scheme = scheme.state();\n\t      return new StringIteratee.Done(uri);\n\t    }\n\t  }\n\t  if (s === 4) {\n\t    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {\n\t      input.step();\n\t      s = 5;\n\t    }\n\t    else if (!input.isEmpty()) {\n\t      path = new PathParser(['/']);\n\t      s = 6;\n\t    }\n\t    else if (input.isDone()) {\n\t      uri = {};\n\t      if (scheme) uri.scheme = scheme.state();\n\t      uri.path = ['/'];\n\t      return new StringIteratee.Done(uri);\n\t    }\n\t  }\n\t  if (s === 5) {\n\t    authority = authority || new AuthorityParser();\n\t    authority = authority.feed(input);\n\t    if (authority.isError()) return authority;\n\t    else if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 63/*'?'*/) {\n\t        input.step();\n\t        s = 7;\n\t      }\n\t      else if (c === 35/*'#'*/) {\n\t        input.step();\n\t        s = 8;\n\t      }\n\t      else s = 6;\n\t    }\n\t    else if (input.isDone()) {\n\t      uri = {};\n\t      if (scheme) uri.scheme = scheme.state();\n\t      if (authority.state()) uri.authority = authority.state();\n\t      return new StringIteratee.Done(uri);\n\t    }\n\t  }\n\t  if (s === 6) {\n\t    path = path || new PathParser();\n\t    path = path.feed(input);\n\t    if (path.isError()) return path;\n\t    else if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 63/*'?'*/) {\n\t        input.step();\n\t        s = 7;\n\t      }\n\t      else if (c === 35/*'#'*/) {\n\t        input.step();\n\t        s = 8;\n\t      }\n\t      else {\n\t        uri = {};\n\t        if (scheme) uri.scheme = scheme.state();\n\t        if (authority) uri.authority = authority.state();\n\t        uri.path = path.state();\n\t        return new StringIteratee.Done(uri);\n\t      }\n\t    }\n\t    else if (input.isDone()) {\n\t      uri = {};\n\t      if (scheme) uri.scheme = scheme.state();\n\t      if (authority) uri.authority = authority.state();\n\t      uri.path = path.state();\n\t      return new StringIteratee.Done(uri);\n\t    }\n\t  }\n\t  if (s === 7) {\n\t    query = query || new QueryParser();\n\t    query = query.feed(input);\n\t    if (query.isError()) return query;\n\t    else if (!input.isEmpty()) {\n\t      c = input.head();\n\t      if (c === 35/*'#'*/) {\n\t        input.step();\n\t        s = 8;\n\t      }\n\t      else {\n\t        uri = {};\n\t        if (scheme) uri.scheme = scheme.state();\n\t        if (authority) uri.authority = authority.state();\n\t        uri.path = path.state();\n\t        uri.query = query.state();\n\t        return new StringIteratee.Done(uri);\n\t      }\n\t    }\n\t    else if (input.isDone()) {\n\t      uri = {};\n\t      if (scheme) uri.scheme = scheme.state();\n\t      if (authority) uri.authority = authority.state();\n\t      if (path) uri.path = path.state();\n\t      uri.query = query.state();\n\t      return new StringIteratee.Done(uri);\n\t    }\n\t  }\n\t  if (s === 8) {\n\t    fragment = fragment || new FragmentParser();\n\t    fragment = fragment.feed(input);\n\t    if (fragment.isError()) return fragment;\n\t    else if (input.isDone()) {\n\t      uri = {};\n\t      if (scheme) uri.scheme = scheme.state();\n\t      if (authority) uri.authority = authority.state();\n\t      if (path) uri.path = path.state();\n\t      if (query) uri.query = query.state();\n\t      uri.fragment = fragment.state();\n\t      return new StringIteratee.Done(uri);\n\t    }\n\t  }\n\t  return new UriParser(scheme, authority, path, query, fragment, s);\n\t};\n\tUriParser.prototype.state = function () {\n\t  var scheme = this.scheme.state();\n\t  var authority = this.authority.state();\n\t  var path = this.path.state();\n\t  var query = this.query.state();\n\t  var fragment = this.fragment.state();\n\t  var uri = {};\n\t  if (scheme !== undefined) uri.scheme = scheme;\n\t  if (authority) uri.authority = authority;\n\t  if (path) uri.path = path;\n\t  if (query) uri.query = query;\n\t  if (fragment !== undefined) uri.fragment = fragment;\n\t  return uri;\n\t};\n\n\n\tfunction SchemeParser(builder, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.s = s || 1;\n\t}\n\tSchemeParser.prototype = Object.create(StringIteratee.prototype);\n\tSchemeParser.prototype.constructor = SchemeParser;\n\tSchemeParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var builder = this.builder || new StringBuilder();\n\t  if (s === 1) {\n\t    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {\n\t      input.step();\n\t      builder.append(toLowerCase(c));\n\t      s = 2;\n\t    }\n\t    else if (!input.isEmpty() || input.isDone()) {\n\t      return new StringIteratee.Error({expected: 'scheme', found: c});\n\t    }\n\t  }\n\t  if (s === 2) {\n\t    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {\n\t      input.step();\n\t      builder.append(toLowerCase(c));\n\t    }\n\t    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());\n\t  }\n\t  return new SchemeParser(builder, s);\n\t};\n\tSchemeParser.prototype.state = function () {\n\t  if (this.builder) return this.builder.state();\n\t};\n\n\n\tfunction AuthorityParser(userInfo, host, port, s) {\n\t  StringIteratee.call(this);\n\t  this.userInfo = userInfo || null;\n\t  this.host = host || null;\n\t  this.port = port || null;\n\t  this.s = s || 1;\n\t}\n\tAuthorityParser.prototype = Object.create(StringIteratee.prototype);\n\tAuthorityParser.prototype.constructor = AuthorityParser;\n\tAuthorityParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var port = this.port;\n\t  var host = this.host;\n\t  var userInfo = this.userInfo;\n\t  var authority, hostinfo, userinfo;\n\t  if (s === 1) {\n\t    if (!input.isEmpty()) {\n\t      var look = input.dup();\n\t      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();\n\t      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;\n\t      else s = 3;\n\t    }\n\t    else if (input.isDone()) s = 3;\n\t  }\n\t  if (s === 2) {\n\t    userInfo = userInfo || new UserInfoParser();\n\t    userInfo = userInfo.feed(input);\n\t    if (userInfo.isError()) return userInfo;\n\t    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {\n\t      input.step();\n\t      s = 3;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF();\n\t  }\n\t  if (s === 3) {\n\t    host = host || new HostParser();\n\t    host = host.feed(input);\n\t    if (host.isError()) return host;\n\t    else if (!input.isEmpty() && input.head() === 58/*':'*/) {\n\t      input.step();\n\t      s = 4;\n\t    }\n\t    else if (!input.isEmpty() || input.isDone()) {\n\t      if (host.state()) {\n\t        authority = {};\n\t        hostinfo = host.state();\n\t        if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n\t        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n\t        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n\t        if (userInfo) {\n\t          userinfo = userInfo.state();\n\t          if (typeof userinfo === 'string') authority.userInfo = userinfo;\n\t          else if (userinfo) {\n\t            authority.username = userinfo.username;\n\t            authority.password = userinfo.password;\n\t          }\n\t        }\n\t        return new StringIteratee.Done(authority);\n\t      }\n\t      else if (userInfo) {\n\t        authority = {};\n\t        userinfo = userInfo.state();\n\t        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n\t        else if (userinfo) {\n\t          authority.username = userinfo.username;\n\t          authority.password = userinfo.password;\n\t        }\n\t        return new StringIteratee.Done(authority);\n\t      }\n\t      return new StringIteratee.Done(undefined);\n\t    }\n\t  }\n\t  if (s === 4) {\n\t    port = port || new PortParser();\n\t    port = port.feed(input);\n\t    if (port.isError()) return port;\n\t    else if (!input.isEmpty() || input.isDone()) {\n\t      authority = {};\n\t      hostinfo = host.state();\n\t      if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n\t      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n\t      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n\t      authority.port = port.state();\n\t      if (userInfo) {\n\t        userinfo = userInfo.state();\n\t        if (typeof userinfo === 'string') authority.userInfo = userinfo;\n\t        else if (userinfo) {\n\t          authority.username = userinfo.username;\n\t          authority.password = userinfo.password;\n\t        }\n\t      }\n\t      return new StringIteratee.Done(authority);\n\t    }\n\t  }\n\t  return new AuthorityParser(userInfo, host, port, s);\n\t};\n\tAuthorityParser.prototype.state = function () {\n\t  if (this.host && this.host.state()) {\n\t    var authority = {};\n\t    var hostinfo = this.host.state();\n\t    if (hostinfo.name !== undefined) authority.host = hostinfo.name;\n\t    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;\n\t    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;\n\t    if (this.port) authority.port = this.port.state();\n\t    if (this.userInfo) {\n\t      var userinfo = this.userInfo.state();\n\t      if (typeof userinfo === 'string') authority.userInfo = userinfo;\n\t      else if (userinfo) {\n\t        authority.username = userinfo.username;\n\t        authority.password = userinfo.password;\n\t      }\n\t    }\n\t    return authority;\n\t  }\n\t};\n\n\n\tfunction UserInfoParser(username, password, c1, s) {\n\t  StringIteratee.call(this);\n\t  this.username = username || null;\n\t  this.password = password || null;\n\t  this.c1 = c1 || 0;\n\t  this.s = s || 1;\n\t}\n\tUserInfoParser.prototype = Object.create(StringIteratee.prototype);\n\tUserInfoParser.prototype.constructor = UserInfoParser;\n\tUserInfoParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var c1 = this.c1;\n\t  var password = this.password;\n\t  var username = this.username;\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 1) {\n\t      if (!username && !input.isEmpty()) username = new StringBuilder();\n\t      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {\n\t        input.step();\n\t        username.append(c);\n\t      }\n\t      if (!input.isEmpty() && c === 58/*':'*/) {\n\t        input.step();\n\t        s = 4;\n\t      }\n\t      else if (!input.isEmpty() && c === 37/*'%'*/) {\n\t        input.step();\n\t        s = 2;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        return new StringIteratee.Done(username.state());\n\t      }\n\t    }\n\t    if (s === 2) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 3;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        username.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 1;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 4) {\n\t      password = password || new StringBuilder();\n\t      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {\n\t        input.step();\n\t        password.append(c);\n\t      }\n\t      if (!input.isEmpty() && c === 37/*'%'*/) {\n\t        input.step();\n\t        s = 5;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        var userInfo = {username: username.state(), password: password.state()};\n\t        return new StringIteratee.Done(userInfo);\n\t      }\n\t    }\n\t    if (s === 5) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 6;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 6) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        password.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 4;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new UserInfoParser(username, password, c1, s);\n\t};\n\tUserInfoParser.prototype.state = function () {\n\t  if (this.password) return {username: this.username.state(), password: this.password.state()};\n\t  else if (this.username) return this.username.state();\n\t};\n\n\n\tfunction HostParser() {\n\t  StringIteratee.call(this);\n\t}\n\tHostParser.prototype = Object.create(StringIteratee.prototype);\n\tHostParser.prototype.constructor = HostParser;\n\tHostParser.prototype.feed = function (input) {\n\t  if (!input.isEmpty()) {\n\t    var c = input.head();\n\t    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);\n\t    else return new HostAddressParser().feed(input);\n\t  }\n\t  return this;\n\t};\n\n\n\tfunction HostAddressParser(builder, c1, x, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.c1 = c1 || 0;\n\t  this.x = x || 0;\n\t  this.s = s || 1;\n\t}\n\tHostAddressParser.prototype = Object.create(StringIteratee.prototype);\n\tHostAddressParser.prototype.constructor = HostAddressParser;\n\tHostAddressParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var x = this.x;\n\t  var c1 = this.c1;\n\t  var builder = this.builder;\n\t  var host;\n\t  while (s <= 4 && (!input.isEmpty() || input.isDone())) {\n\t    builder = builder || new StringBuilder();\n\t    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n\t      input.step();\n\t      builder.append(c);\n\t      x = 10 * x + decodeDigit(c);\n\t    }\n\t    if (!input.isEmpty()) {\n\t      if (c === 46/*'.'*/ && s < 4 && x <= 255) {\n\t        input.step();\n\t        builder.append(c);\n\t        x = 0;\n\t        s += 1;\n\t      }\n\t      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {\n\t        host = {ipv4: builder.state()};\n\t        return new StringIteratee.Done(host);\n\t      }\n\t      else {\n\t        x = 0;\n\t        s = 5;\n\t      }\n\t    }\n\t    else if (input.isDone()) {\n\t      if (s === 4 && x <= 255) {\n\t        host = {ipv4: builder.state()};\n\t        return new StringIteratee.Done(host);\n\t      }\n\t      else {\n\t        host = {name: builder.state()};\n\t        return new StringIteratee.Done(host);\n\t      }\n\t    }\n\t  }\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 5) {\n\t      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {\n\t        input.step();\n\t        builder.append(toLowerCase(c));\n\t      }\n\t      if (!input.isEmpty() && c === 37/*'%'*/) {\n\t        input.step();\n\t        s = 6;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        host = {name: builder.state()};\n\t        return new StringIteratee.Done(host);\n\t      }\n\t    }\n\t    if (s === 6) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 7;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 7) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 5;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new HostAddressParser(builder, c1, x, s);\n\t};\n\tHostAddressParser.prototype.state = function () {\n\t  if (this.builder) {\n\t    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};\n\t    else return {name: this.builder.state()};\n\t  }\n\t};\n\n\n\tfunction HostLiteralParser(builder, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.s = s || 1;\n\t}\n\tHostLiteralParser.prototype = Object.create(StringIteratee.prototype);\n\tHostLiteralParser.prototype.constructor = HostLiteralParser;\n\tHostLiteralParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var builder = this.builder;\n\t  if (s === 1) {\n\t    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {\n\t      input.step();\n\t      s = 2;\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\\'[\\'', found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  if (s === 2) {\n\t    builder = builder || new StringBuilder();\n\t    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {\n\t      input.step();\n\t      builder.append(toLowerCase(c));\n\t    }\n\t    if (!input.isEmpty() && c === 93/*']'*/) {\n\t      input.step();\n\t      var host = {ipv6: builder.state()};\n\t      return new StringIteratee.Done(host);\n\t    }\n\t    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});\n\t    else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t  }\n\t  return new HostLiteralParser(builder, s);\n\t};\n\tHostLiteralParser.prototype.state = function () {\n\t  if (this.builder) return {ipv6: this.builder.state()};\n\t};\n\n\n\tfunction PortParser(port) {\n\t  StringIteratee.call(this);\n\t  this.port = port || 0;\n\t}\n\tPortParser.prototype = Object.create(StringIteratee.prototype);\n\tPortParser.prototype.constructor = PortParser;\n\tPortParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var port = this.port;\n\t  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {\n\t    input.step();\n\t    port = 10 * port + decodeDigit(c);\n\t  }\n\t  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);\n\t  return new PortParser(port);\n\t};\n\tPortParser.prototype.state = function () {\n\t  if (this.port !== 0) return this.port;\n\t};\n\n\n\tfunction PathParser(path, builder, c1, s) {\n\t  StringIteratee.call(this);\n\t  this.path = path || null;\n\t  this.builder = builder || null;\n\t  this.c1 = c1 || 0;\n\t  this.s = s || 1;\n\t}\n\tPathParser.prototype = Object.create(StringIteratee.prototype);\n\tPathParser.prototype.constructor = PathParser;\n\tPathParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var c1 = this.c1;\n\t  var builder = this.builder;\n\t  var path = this.path;\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 1) {\n\t      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {\n\t        builder = builder || new StringBuilder();\n\t        input.step();\n\t        builder.append(c);\n\t      }\n\t      if (!input.isEmpty() && c === 47/*'/'*/) {\n\t        input.step();\n\t        path = path || [];\n\t        if (builder) {\n\t          path.push(builder.state());\n\t          builder = null;\n\t        }\n\t        path.push('/');\n\t      }\n\t      else if (!input.isEmpty() && c === 37/*'%'*/) {\n\t        input.step();\n\t        s = 2;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        path = path || [];\n\t        if (builder) path.push(builder.state());\n\t        return new StringIteratee.Done(path);\n\t      }\n\t    }\n\t    if (s === 2) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 3;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        builder = builder || new StringBuilder();\n\t        input.step();\n\t        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 1;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new PathParser(path, builder, c1, s);\n\t};\n\tPathParser.prototype.state = function () {\n\t  if (this.path) return this.path;\n\t  else return [];\n\t};\n\n\n\tfunction QueryParser(key, value, query, c1, s) {\n\t  StringIteratee.call(this);\n\t  this.key = key || null;\n\t  this.value = value || null;\n\t  this.query = query || null;\n\t  this.c1 = c1 || 0;\n\t  this.s = s || 1;\n\t}\n\tQueryParser.prototype = Object.create(StringIteratee.prototype);\n\tQueryParser.prototype.constructor = QueryParser;\n\tQueryParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var c1 = this.c1;\n\t  var query = this.query;\n\t  var value = this.value;\n\t  var key = this.key;\n\t  var k, v, param;\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 1) {\n\t      key = key || new StringBuilder();\n\t      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {\n\t        input.step();\n\t        key.append(c);\n\t      }\n\t      if (!input.isEmpty() && c === 61/*'='*/) {\n\t        input.step();\n\t        s = 4;\n\t      }\n\t      else if (!input.isEmpty() && c === 38/*'&'*/) {\n\t        input.step();\n\t        query = query || [];\n\t        query.push(key.state());\n\t        key = null;\n\t        s = 1;\n\t      }\n\t      else if (!input.isEmpty() && c === 37/*'%'*/) {\n\t        input.step();\n\t        s = 2;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        if (!query) return new StringIteratee.Done(key.state());\n\t        else {\n\t          query.push(key.state());\n\t          return new StringIteratee.Done(query);\n\t        }\n\t      }\n\t    }\n\t    if (s === 2) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 3;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        key.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 1;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 4) {\n\t      value = value || new StringBuilder();\n\t      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {\n\t        input.step();\n\t        value.append(c);\n\t      }\n\t      if (!input.isEmpty() && c === 38/*'&'*/) {\n\t        input.step();\n\t        k = key.state();\n\t        v = value.state();\n\t        param = {};\n\t        param[k] = v;\n\t        query = query || [];\n\t        query.push(param);\n\t        query[k] = v;\n\t        key = null;\n\t        value = null;\n\t        s = 1;\n\t      }\n\t      else if (!input.isEmpty() && c === 38/*'%'*/) {\n\t        input.step();\n\t        s = 5;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        k = key.state();\n\t        v = value.state();\n\t        param = {};\n\t        param[k] = v;\n\t        query = query || [];\n\t        query.push(param);\n\t        query[k] = v;\n\t        return new StringIteratee.Done(query);\n\t      }\n\t    }\n\t    if (s === 5) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 6;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 6) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        value.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 4;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new QueryParser(key, value, query, c1, s);\n\t};\n\tQueryParser.prototype.state = function () {\n\t  if (this.query) return this.query;\n\t};\n\n\n\tfunction FragmentParser(builder, c1, s) {\n\t  StringIteratee.call(this);\n\t  this.builder = builder || null;\n\t  this.c1 = c1 || 0;\n\t  this.s = s || 1;\n\t}\n\tFragmentParser.prototype = Object.create(StringIteratee.prototype);\n\tFragmentParser.prototype.constructor = FragmentParser;\n\tFragmentParser.prototype.feed = function (input) {\n\t  var c = 0;\n\t  var s = this.s;\n\t  var c1 = this.c1;\n\t  var builder = this.builder || new StringBuilder();\n\t  while (!input.isEmpty() || input.isDone()) {\n\t    if (s === 1) {\n\t      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {\n\t        input.step();\n\t        builder.append(c);\n\t      }\n\t      if (!input.isEmpty() && c === 37/*'%'*/) {\n\t        input.step();\n\t        s = 2;\n\t      }\n\t      else if (!input.isEmpty() || input.isDone()) {\n\t        return new StringIteratee.Done(builder.state());\n\t      }\n\t    }\n\t    if (s === 2) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        c1 = c;\n\t        s = 3;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t    if (s === 3) {\n\t      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {\n\t        input.step();\n\t        builder.append((decodeHex(c1) << 4) + decodeHex(c));\n\t        c1 = 0;\n\t        s = 1;\n\t      }\n\t      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});\n\t      else if (input.isDone()) return StringIteratee.unexpectedEOF;\n\t    }\n\t  }\n\t  return new FragmentParser(builder, c1, s);\n\t};\n\tFragmentParser.prototype.state = function () {\n\t  if (this.builder) return this.builder.state();\n\t};\n\n\n\tfunction parseUri(string) {\n\t  var input = new StringIterator(string);\n\t  var result = new UriParser().run(input);\n\t  return result.state();\n\t}\n\tfunction parseAuthority(string) {\n\t  var input = new StringIterator(string);\n\t  var result = new AuthorityParser().run(input);\n\t  return result.state();\n\t}\n\tfunction parsePath(string) {\n\t  var input = new StringIterator(string);\n\t  var result = new PathParser().run(input);\n\t  return result.state();\n\t}\n\tfunction stringifyUri(uri) {\n\t  var writer = new UriWriter();\n\t  writer.writeUri(uri);\n\t  return writer.state();\n\t}\n\tfunction resolveUri(base, relative) {\n\t  if (typeof base === 'string') base = parseUri(base);\n\t  if (typeof relative === 'string') relative = parseUri(relative);\n\t  var absolute = {};\n\t  if (relative.scheme) {\n\t    absolute.scheme = relative.scheme;\n\t    if (relative.authority) absolute.authority = relative.authority;\n\t    if (relative.path) absolute.path = removeDotSegments(relative.path);\n\t    if (relative.query !== undefined) absolute.query = relative.query;\n\t    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n\t  }\n\t  else if (relative.authority) {\n\t    if (base.scheme) absolute.scheme = base.scheme;\n\t    absolute.authority = relative.authority;\n\t    if (relative.path) absolute.path = removeDotSegments(relative.path);\n\t    if (relative.query !== undefined) absolute.query = relative.query;\n\t    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n\t  }\n\t  else if (!relative.path || !relative.path.length) {\n\t    if (base.scheme) absolute.scheme = base.scheme;\n\t    if (base.authority) absolute.authority = base.authority;\n\t    if (base.path) absolute.path = base.path;\n\t    if (relative.query !== undefined) absolute.query = relative.query;\n\t    else if (base.query !== undefined) absolute.query = base.query;\n\t    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n\t  }\n\t  else if (relative.path[0] === '/') {\n\t    if (base.scheme) absolute.scheme = base.scheme;\n\t    if (base.authority) absolute.authority = base.authority;\n\t    if (relative.path) absolute.path = removeDotSegments(relative.path);\n\t    if (relative.query !== undefined) absolute.query = relative.query;\n\t    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n\t  }\n\t  else {\n\t    if (base.scheme) absolute.scheme = base.scheme;\n\t    if (base.authority) absolute.authority = base.authority;\n\t    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));\n\t    if (relative.query !== undefined) absolute.query = relative.query;\n\t    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;\n\t  }\n\t  return absolute;\n\t}\n\tfunction mergeUriPath(base, relativePath) {\n\t  if (base.authority && (!base.path || !base.path.length)) {\n\t    var segments = relativePath.slice();\n\t    segments.unshift('/');\n\t    return segments;\n\t  }\n\t  else if (!base.path || !base.path.length) return relativePath;\n\t  else return mergePath(base.path.slice(), relativePath);\n\t}\n\tfunction mergePath(basePath, relativePath) {\n\t  var segments = [];\n\t  var head = basePath.shift();\n\t  while (basePath.length > 0) {\n\t    segments.push(head);\n\t    head = basePath.shift();\n\t  }\n\t  if (head === '/') segments.push(head);\n\t  for (var i = 0, n = relativePath.length; i < n; i += 1) {\n\t    segments.push(relativePath[i]);\n\t  }\n\t  return segments;\n\t}\n\tfunction removeDotSegments(path) {\n\t  var segments = [];\n\t  while (path.length > 0) {\n\t    var head = path[0];\n\t    if (head === '.' || head === '..') {\n\t      path = path.slice(path.length > 1 ? 2 : 1);\n\t    }\n\t    else if (head === '/') {\n\t      if (path.length > 1) {\n\t        var next = path[1];\n\t        if (next === '.') {\n\t          path = path.length > 2 ? path.slice(2) : ['/'];\n\t        }\n\t        else if (next === '..') {\n\t          path = path.length > 2 ? path.slice(2) : ['/'];\n\t          if (segments.length > 1 && segments[segments.length - 1] !== '/') {\n\t            segments = segments.slice(0, segments.length - 2);\n\t          }\n\t          else if (segments.length > 0) {\n\t            segments = segments.slice(0, segments.length - 1);\n\t          }\n\t        }\n\t        else {\n\t          segments.push(head);\n\t          segments.push(next);\n\t          path = path.slice(2);\n\t        }\n\t      }\n\t      else {\n\t        segments.push('/');\n\t        path.shift();\n\t      }\n\t    }\n\t    else {\n\t      segments.push(head);\n\t      path.shift();\n\t    }\n\t  }\n\t  return segments;\n\t}\n\tfunction unresolveUri(base, absolute) {\n\t  if (typeof base === 'string') base = parseUri(base);\n\t  if (typeof absolute === 'string') absolute = parseUri(absolute);\n\t  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;\n\t  var relative = {};\n\t  var basePath = base.path;\n\t  if (typeof basePath === 'string') basePath = parsePath(basePath);\n\t  else if (!basePath) basePath = [];\n\t  else basePath = basePath.slice();\n\t  var absolutePath = absolute.path;\n\t  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);\n\t  else if (!absolutePath) absolutePath = [];\n\t  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);\n\t  if (relativePath.length > 0) relative.path = relativePath;\n\t  if (absolute.query !== undefined) relative.query = absolute.query;\n\t  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;\n\t  return relative;\n\t}\n\tfunction unmergePath(basePath, relativePath, absolutePath) {\n\t  if (basePath.length === 0) {\n\t    if (relativePath.length > 1) relativePath.shift();\n\t    return relativePath;\n\t  }\n\t  else if (basePath[0] !== '/') {\n\t    return relativePath;\n\t  }\n\t  else if (relativePath.length === 0 || relativePath[0] !== '/') {\n\t    relativePath.unshift('/');\n\t    return relativePath;\n\t  }\n\t  else {\n\t    basePath.shift();\n\t    relativePath.shift();\n\t    if (basePath.length > 0 && relativePath.length === 0) return ['/'];\n\t    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {\n\t      return relativePath;\n\t    }\n\t    else {\n\t      basePath.shift();\n\t      relativePath.shift();\n\t      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;\n\t      else return unmergePath(basePath, relativePath, absolutePath);\n\t    }\n\t  }\n\t}\n\n\tfunction UriWriter(builder) {\n\t  this.builder = builder || new StringBuilder();\n\t}\n\tUriWriter.prototype.writeUri = function (uri) {\n\t  if (uri.scheme) {\n\t    this.writeScheme(uri.scheme);\n\t    this.builder.append(58/*':'*/);\n\t  }\n\t  if (uri.authority) {\n\t    this.builder.append(47/*'/'*/);\n\t    this.builder.append(47/*'/'*/);\n\t    this.writeAuthority(uri.authority);\n\t  }\n\t  if (uri.path) {\n\t    this.writePath(uri.path);\n\t  }\n\t  if (uri.query !== undefined) {\n\t    this.builder.append(63/*'?'*/);\n\t    this.writeQuery(uri.query);\n\t  }\n\t  if (uri.fragment !== undefined) {\n\t    this.builder.append(35/*'#'*/);\n\t    this.writeFragment(uri.fragment);\n\t  }\n\t};\n\tUriWriter.prototype.writeScheme = function (scheme) {\n\t  var cs = new StringIterator(scheme);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isSchemeChar(c)) this.builder.append(c);\n\t    else throw 'Invalid URI scheme: ' + scheme;\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeAuthority = function (authority) {\n\t  if (typeof authority === 'string') authority = parseAuthority(authority);\n\t  if (authority.userInfo !== undefined) {\n\t    this.writeUserInfo(authority.userInfo);\n\t    this.builder.append(64/*'@'*/);\n\t  }\n\t  else if (authority.username !== undefined && authority.password !== undefined) {\n\t    this.writeUser(authority.username);\n\t    this.builder.append(58/*':'*/);\n\t    this.writeUserInfo(authority.password);\n\t    this.builder.append(64/*'@'*/);\n\t  }\n\t  if (authority.host !== undefined) {\n\t    this.writeHost(authority.host);\n\t  }\n\t  else if (authority.ipv4 !== undefined) {\n\t    this.writeHost(authority.ipv4);\n\t  }\n\t  else if (authority.ipv6 !== undefined) {\n\t    this.builder.append(91/*'['*/);\n\t    this.writeHostLiteral(authority.ipv6);\n\t    this.builder.append(93/*']'*/);\n\t  }\n\t  if (authority.port) {\n\t    this.builder.append(58/*':'*/);\n\t    this.writePort(authority.port);\n\t  }\n\t};\n\tUriWriter.prototype.writeUserInfo = function (userInfo) {\n\t  var cs = new StringIterator(userInfo);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isUserInfoChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeUser = function (user) {\n\t  var cs = new StringIterator(user);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isUserChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeHost = function (host) {\n\t  var cs = new StringIterator(host);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isHostChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeHostLiteral = function (host) {\n\t  var cs = new StringIterator(host);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writePort = function (port) {\n\t  var i = 9;\n\t  var digits = new Array(10);\n\t  while (port > 0) {\n\t    digits[i] = port % 10;\n\t    port = Math.floor(port / 10);\n\t    i -= 1;\n\t  }\n\t  i += 1;\n\t  while (i < 10) {\n\t    this.builder.append(48/*'0'*/ + digits[i]);\n\t    i += 1;\n\t  }\n\t};\n\tUriWriter.prototype.writePath = function (path) {\n\t  if (typeof path === 'string') path = parsePath(path);\n\t  for (var i = 0, n = path.length; i < n; i += 1) {\n\t    var segment = path[i];\n\t    if (segment === '/') this.builder.append(47/*'/'*/);\n\t    else this.writePathSegment(segment);\n\t  }\n\t};\n\tUriWriter.prototype.writePathSegment = function (segment) {\n\t  var cs = new StringIterator(segment);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isPathChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeQuery = function (query) {\n\t  if (typeof query === 'string') this.writeQueryPart(query);\n\t  else if (Array.isArray(query)) this.writeQueryArray(query);\n\t  else if (query) this.writeQueryParams(query);\n\t};\n\tUriWriter.prototype.writeQueryArray = function (query) {\n\t  for (var i = 0, n = query.length; i < n; i += 1) {\n\t    var param = query[i];\n\t    if (typeof param === 'string') {\n\t      if (i > 0) this.builder.append(38/*'&'*/);\n\t      this.writeQueryParam(param);\n\t    }\n\t    else this.writeQueryParams(param, i);\n\t  }\n\t};\n\tUriWriter.prototype.writeQueryParams = function (params, i) {\n\t  var keys = Object.keys(params);\n\t  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {\n\t    var key = keys[j];\n\t    var value = params[key];\n\t    if (i > 0) this.builder.append(38/*'&'*/);\n\t    this.writeQueryParam(key);\n\t    this.builder.append(61/*'='*/);\n\t    this.writeQueryParam(value);\n\t  }\n\t};\n\tUriWriter.prototype.writeQueryParam = function (param) {\n\t  var cs = new StringIterator(param);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isParamChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeQueryPart = function (query) {\n\t  var cs = new StringIterator(query);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isQueryChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeFragment = function (fragment) {\n\t  var cs = new StringIterator(fragment);\n\t  while (!cs.isEmpty()) {\n\t    var c = cs.head();\n\t    if (isFragmentChar(c)) this.builder.append(c);\n\t    else this.writeEncoded(c);\n\t    cs.step();\n\t  }\n\t};\n\tUriWriter.prototype.writeEncoded = function (c) {\n\t  if (c === 0x00) { // modified UTF-8\n\t    this.writePctEncoded(0xC0);\n\t    this.writePctEncoded(0x80);\n\t  }\n\t  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n\t    this.writePctEncoded(c);\n\t  }\n\t  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n\t    this.writePctEncoded(0xC0 | (c >>> 6));\n\t    this.writePctEncoded(0x80 | (c & 0x3F));\n\t  }\n\t  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF\n\t           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF\n\t    this.writePctEncoded(0xE0 | (c >>> 12));\n\t    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n\t    this.writePctEncoded(0x80 | (c & 0x3F));\n\t  }\n\t  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n\t    this.writePctEncoded(0xF0 | (c >>> 18));\n\t    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));\n\t    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));\n\t    this.writePctEncoded(0x80 | (c & 0x3F));\n\t  }\n\t  else { // surrogate or invalid code point\n\t    this.writePctEncoded(0xEF);\n\t    this.writePctEncoded(0xBF);\n\t    this.writePctEncoded(0xBD);\n\t  }\n\t};\n\tUriWriter.prototype.writePctEncoded = function (c) {\n\t  this.builder.append(37/*'%'*/);\n\t  this.builder.append(encodeHex(c >>> 4 & 0xF));\n\t  this.builder.append(encodeHex(c & 0xF));\n\t};\n\tUriWriter.prototype.state = function () {\n\t  return this.builder.state();\n\t};\n\n\tvar uri = {};\n\turi.parse = parseUri;\n\turi.stringify = stringifyUri;\n\turi.resolve = resolveUri;\n\turi.unresolve = unresolveUri;\n\n\n\tmodule.exports = function (value) {\n\t  return coerce.apply(null, arguments);\n\t};\n\texports = module.exports;\n\texports.parse = parse;\n\texports.stringify = stringify;\n\texports.base64 = base64;\n\texports.isRecord = isRecord;\n\texports.size = size;\n\texports.head = head;\n\texports.tail = tail;\n\texports.tag = tag;\n\texports.has = has;\n\texports.get = get;\n\texports.set = set;\n\texports.remove = remove;\n\texports.keys = keys;\n\texports.values = values;\n\texports.forEach = forEach;\n\texports.concat = concat;\n\texports.equal = equal;\n\texports.compare = compare;\n\texports.uri = uri;\n\texports.config = config;\n\texports.StringIterator = StringIterator;\n\texports.DocumentParser = DocumentParser;\n\texports.BlockParser = BlockParser;\n\texports.RecordParser = RecordParser;\n\texports.UriParser = UriParser;\n\texports.SchemeParser = SchemeParser;\n\texports.AuthorityParser = AuthorityParser;\n\texports.PathParser = PathParser;\n\texports.QueryParser = QueryParser;\n\texports.FragmentParser = FragmentParser;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"version\": \"0.3.11\"\n\t};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n\tvar config = __webpack_require__(6);\n\tvar recon = global.recon || __webpack_require__(3);\n\n\tfunction decode(record) {\n\t  switch (recon.tag(record)) {\n\t    case '@event': return EventMessage.decode(record);\n\t    case '@command': return CommandMessage.decode(record);\n\t    case '@link': return LinkRequest.decode(record);\n\t    case '@linked': return LinkedResponse.decode(record);\n\t    case '@sync': return SyncRequest.decode(record);\n\t    case '@synced': return SyncedResponse.decode(record);\n\t    case '@unlink': return UnlinkRequest.decode(record);\n\t    case '@unlinked': return UnlinkedResponse.decode(record);\n\t    case '@auth': return AuthRequest.decode(record);\n\t    case '@authed': return AuthedResponse.decode(record);\n\t    case '@deauth': return DeauthRequest.decode(record);\n\t    case '@deauthed': return DeauthedResponse.decode(record);\n\t  }\n\t}\n\n\tfunction encode(envelope) {\n\t  return envelope.encode();\n\t}\n\n\tfunction parse(string) {\n\t  return decode(recon.parse(string));\n\t}\n\n\tfunction stringify(envelope) {\n\t  return recon.stringify(encode(envelope));\n\t}\n\n\n\tfunction Envelope() {}\n\tObject.defineProperty(Envelope.prototype, 'isRequest', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isResponse', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isMessage', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});\n\tObject.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});\n\n\n\tfunction RequestEnvelope() {\n\t  Envelope.call(this);\n\t}\n\tRequestEnvelope.prototype = Object.create(Envelope.prototype);\n\tRequestEnvelope.prototype.constructor = RequestEnvelope;\n\tObject.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});\n\n\n\tfunction ResponseEnvelope() {\n\t  Envelope.call(this);\n\t}\n\tResponseEnvelope.prototype = Object.create(Envelope.prototype);\n\tResponseEnvelope.prototype.constructor = ResponseEnvelope;\n\tObject.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});\n\n\n\tfunction MessageEnvelope() {\n\t  Envelope.call(this);\n\t}\n\tMessageEnvelope.prototype = Object.create(Envelope.prototype);\n\tMessageEnvelope.prototype.constructor = MessageEnvelope;\n\tObject.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});\n\n\n\tfunction EventMessage(node, lane, body) {\n\t  MessageEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.body = body;\n\t}\n\tEventMessage.prototype = Object.create(MessageEnvelope.prototype);\n\tEventMessage.prototype.constructor = EventMessage;\n\tObject.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});\n\tEventMessage.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new EventMessage(node, lane, this.body);\n\t};\n\tEventMessage.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  return recon.concat({'@event': headers}, this.body);\n\t};\n\tEventMessage.decode = function (record) {\n\t  var node, lane;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new EventMessage(node, lane, body);\n\t  }\n\t};\n\n\n\tfunction CommandMessage(node, lane, body) {\n\t  MessageEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.body = body;\n\t}\n\tCommandMessage.prototype = Object.create(MessageEnvelope.prototype);\n\tCommandMessage.prototype.constructor = CommandMessage;\n\tObject.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});\n\tCommandMessage.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new CommandMessage(node, lane, this.body);\n\t};\n\tCommandMessage.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  return recon.concat({'@command': headers}, this.body);\n\t};\n\tCommandMessage.decode = function (record) {\n\t  var node, lane;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new CommandMessage(node, lane, body);\n\t  }\n\t};\n\n\n\tfunction LinkRequest(node, lane, prio, body) {\n\t  RequestEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.prio = prio || 0.0;\n\t  this.body = body;\n\t}\n\tLinkRequest.prototype = Object.create(RequestEnvelope.prototype);\n\tLinkRequest.prototype.constructor = LinkRequest;\n\tObject.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});\n\tLinkRequest.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new LinkRequest(node, lane, this.prio, this.body);\n\t};\n\tLinkRequest.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  if (this.prio) headers.push({prio: this.prio});\n\t  return recon.concat({'@link': headers}, this.body);\n\t};\n\tLinkRequest.decode = function (record) {\n\t  var node, lane, prio;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (header.prio !== undefined) prio = header.prio;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new LinkRequest(node, lane, prio, body);\n\t  }\n\t};\n\n\n\tfunction LinkedResponse(node, lane, prio, body) {\n\t  ResponseEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.prio = prio || 0.0;\n\t  this.body = body;\n\t}\n\tLinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\n\tLinkedResponse.prototype.constructor = LinkedResponse;\n\tObject.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});\n\tLinkedResponse.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new LinkedResponse(node, lane, this.prio, this.body);\n\t};\n\tLinkedResponse.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  if (this.prio) headers.push({prio: this.prio});\n\t  return recon.concat({'@linked': headers}, this.body);\n\t};\n\tLinkedResponse.decode = function (record) {\n\t  var node, lane, prio;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (header.prio !== undefined) prio = header.prio;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new LinkedResponse(node, lane, prio, body);\n\t  }\n\t};\n\n\n\tfunction SyncRequest(node, lane, prio, body) {\n\t  RequestEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.prio = prio || 0.0;\n\t  this.body = body;\n\t}\n\tSyncRequest.prototype = Object.create(RequestEnvelope.prototype);\n\tSyncRequest.prototype.constructor = SyncRequest;\n\tObject.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});\n\tSyncRequest.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new SyncRequest(node, lane, this.prio, this.body);\n\t};\n\tSyncRequest.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  if (this.prio) headers.push({prio: this.prio});\n\t  return recon.concat({'@sync': headers}, this.body);\n\t};\n\tSyncRequest.decode = function (record) {\n\t  var node, lane, prio;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (header.prio !== undefined) prio = header.prio;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new SyncRequest(node, lane, prio, body);\n\t  }\n\t};\n\n\n\tfunction SyncedResponse(node, lane, body) {\n\t  ResponseEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.body = body;\n\t}\n\tSyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);\n\tSyncedResponse.prototype.constructor = SyncedResponse;\n\tObject.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});\n\tSyncedResponse.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new SyncedResponse(node, lane, this.body);\n\t};\n\tSyncedResponse.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  return recon.concat({'@synced': headers}, this.body);\n\t};\n\tSyncedResponse.decode = function (record) {\n\t  var node, lane;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new SyncedResponse(node, lane, body);\n\t  }\n\t};\n\n\n\tfunction UnlinkRequest(node, lane, body) {\n\t  RequestEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.body = body;\n\t}\n\tUnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);\n\tUnlinkRequest.prototype.constructor = UnlinkRequest;\n\tObject.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});\n\tUnlinkRequest.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new UnlinkRequest(node, lane, this.body);\n\t};\n\tUnlinkRequest.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  return recon.concat({'@unlink': headers}, this.body);\n\t};\n\tUnlinkRequest.decode = function (record) {\n\t  var node, lane;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new UnlinkRequest(node, lane, body);\n\t  }\n\t};\n\n\n\tfunction UnlinkedResponse(node, lane, body) {\n\t  ResponseEnvelope.call(this);\n\t  this.node = node;\n\t  this.lane = lane;\n\t  this.body = body;\n\t}\n\tUnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);\n\tUnlinkedResponse.prototype.constructor = UnlinkedResponse;\n\tObject.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});\n\tUnlinkedResponse.prototype.withAddress = function (node, lane) {\n\t  if (node === undefined) node = this.node;\n\t  if (lane === undefined) lane = this.lane;\n\t  return new UnlinkedResponse(node, lane, this.body);\n\t};\n\tUnlinkedResponse.prototype.encode = function () {\n\t  var headers = [{node: this.node}, {lane: this.lane}];\n\t  return recon.concat({'@unlinked': headers}, this.body);\n\t};\n\tUnlinkedResponse.decode = function (record) {\n\t  var node, lane;\n\t  var body = recon.tail(record);\n\t  var headers = recon.head(record);\n\t  var n = headers && headers.length || 0;\n\t  for (var i = 0; i < n; i += 1) {\n\t    var header = headers[i];\n\t    if (header.node !== undefined) node = header.node;\n\t    else if (header.lane !== undefined) lane = header.lane;\n\t    else if (i === 0) node = header;\n\t    else if (i === 1) lane = header;\n\t  }\n\t  if (node !== undefined && lane !== undefined) {\n\t    return new UnlinkedResponse(node, lane, body);\n\t  }\n\t};\n\n\n\tfunction AuthRequest(body) {\n\t  RequestEnvelope.call(this);\n\t  this.body = body;\n\t}\n\tAuthRequest.prototype = Object.create(RequestEnvelope.prototype);\n\tAuthRequest.prototype.constructor = AuthRequest;\n\tObject.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});\n\tAuthRequest.prototype.encode = function () {\n\t  return recon.concat({'@auth': null}, this.body);\n\t};\n\tAuthRequest.decode = function (record) {\n\t  var body = recon.tail(record);\n\t  return new AuthRequest(body);\n\t};\n\n\n\tfunction AuthedResponse(body) {\n\t  ResponseEnvelope.call(this);\n\t  this.body = body;\n\t}\n\tAuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\n\tAuthedResponse.prototype.constructor = AuthedResponse;\n\tObject.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});\n\tAuthedResponse.prototype.encode = function () {\n\t  return recon.concat({'@authed': null}, this.body);\n\t};\n\tAuthedResponse.decode = function (record) {\n\t  var body = recon.tail(record);\n\t  return new AuthedResponse(body);\n\t};\n\n\n\tfunction DeauthRequest(body) {\n\t  RequestEnvelope.call(this);\n\t  this.body = body;\n\t}\n\tDeauthRequest.prototype = Object.create(RequestEnvelope.prototype);\n\tDeauthRequest.prototype.constructor = DeauthRequest;\n\tObject.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});\n\tDeauthRequest.prototype.encode = function () {\n\t  return recon.concat({'@deauth': null}, this.body);\n\t};\n\tDeauthRequest.decode = function (record) {\n\t  var body = recon.tail(record);\n\t  return new DeauthRequest(body);\n\t};\n\n\n\tfunction DeauthedResponse(body) {\n\t  ResponseEnvelope.call(this);\n\t  this.body = body;\n\t}\n\tDeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);\n\tDeauthedResponse.prototype.constructor = DeauthedResponse;\n\tObject.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});\n\tDeauthedResponse.prototype.encode = function () {\n\t  return recon.concat({'@deauthed': null}, this.body);\n\t};\n\tDeauthedResponse.decode = function (record) {\n\t  var body = recon.tail(record);\n\t  return new DeauthedResponse(body);\n\t};\n\n\n\texports.decode = decode;\n\texports.encode = encode;\n\texports.parse = parse;\n\texports.stringify = stringify;\n\texports.Envelope = Envelope;\n\texports.RequestEnvelope = RequestEnvelope;\n\texports.ResponseEnvelope = ResponseEnvelope;\n\texports.MessageEnvelope = MessageEnvelope;\n\texports.EventMessage = EventMessage;\n\texports.CommandMessage = CommandMessage;\n\texports.SyncRequest = SyncRequest;\n\texports.SyncedResponse = SyncedResponse;\n\texports.LinkRequest = LinkRequest;\n\texports.LinkedResponse = LinkedResponse;\n\texports.UnlinkRequest = UnlinkRequest;\n\texports.UnlinkedResponse = UnlinkedResponse;\n\texports.AuthRequest = AuthRequest;\n\texports.AuthedResponse = AuthedResponse;\n\texports.DeauthRequest = DeauthRequest;\n\texports.DeauthedResponse = DeauthedResponse;\n\texports.config = config;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"version\": \"0.4.2\"\n\t};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar _global = (function() { return this; })();\n\tvar NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\n\tvar websocket_version = __webpack_require__(8);\n\n\n\t/**\n\t * Expose a W3C WebSocket class with just one or two arguments.\n\t */\n\tfunction W3CWebSocket(uri, protocols) {\n\t\tvar native_instance;\n\n\t\tif (protocols) {\n\t\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t\t}\n\t\telse {\n\t\t\tnative_instance = new NativeWebSocket(uri);\n\t\t}\n\n\t\t/**\n\t\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t\t * class). Since it is an Object it will be returned as it is when creating an\n\t\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t\t *\n\t\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t\t */\n\t\treturn native_instance;\n\t}\n\n\n\t/**\n\t * Module exports.\n\t */\n\tmodule.exports = {\n\t    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n\t    'version'      : websocket_version\n\t};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(9).version;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"_args\": [\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"raw\": \"websocket@^1.0.23\",\n\t\t\t\t\t\"scope\": null,\n\t\t\t\t\t\"escapedName\": \"websocket\",\n\t\t\t\t\t\"name\": \"websocket\",\n\t\t\t\t\t\"rawSpec\": \"^1.0.23\",\n\t\t\t\t\t\"spec\": \">=1.0.23 <2.0.0\",\n\t\t\t\t\t\"type\": \"range\"\n\t\t\t\t},\n\t\t\t\t\"/home/derek/Projects/swim-dev-tools/node_modules/swim-client-js\"\n\t\t\t]\n\t\t],\n\t\t\"_from\": \"websocket@>=1.0.23 <2.0.0\",\n\t\t\"_id\": \"websocket@1.0.24\",\n\t\t\"_inCache\": true,\n\t\t\"_location\": \"/websocket\",\n\t\t\"_nodeVersion\": \"7.3.0\",\n\t\t\"_npmOperationalInternal\": {\n\t\t\t\"host\": \"packages-12-west.internal.npmjs.com\",\n\t\t\t\"tmp\": \"tmp/websocket-1.0.24.tgz_1482977757939_0.1858439394272864\"\n\t\t},\n\t\t\"_npmUser\": {\n\t\t\t\"name\": \"theturtle32\",\n\t\t\t\"email\": \"brian@worlize.com\"\n\t\t},\n\t\t\"_npmVersion\": \"3.10.10\",\n\t\t\"_phantomChildren\": {},\n\t\t\"_requested\": {\n\t\t\t\"raw\": \"websocket@^1.0.23\",\n\t\t\t\"scope\": null,\n\t\t\t\"escapedName\": \"websocket\",\n\t\t\t\"name\": \"websocket\",\n\t\t\t\"rawSpec\": \"^1.0.23\",\n\t\t\t\"spec\": \">=1.0.23 <2.0.0\",\n\t\t\t\"type\": \"range\"\n\t\t},\n\t\t\"_requiredBy\": [\n\t\t\t\"/swim-client-js\"\n\t\t],\n\t\t\"_resolved\": \"https://registry.npmjs.org/websocket/-/websocket-1.0.24.tgz\",\n\t\t\"_shasum\": \"74903e75f2545b6b2e1de1425bc1c905917a1890\",\n\t\t\"_shrinkwrap\": null,\n\t\t\"_spec\": \"websocket@^1.0.23\",\n\t\t\"_where\": \"/home/derek/Projects/swim-dev-tools/node_modules/swim-client-js\",\n\t\t\"author\": {\n\t\t\t\"name\": \"Brian McKelvey\",\n\t\t\t\"email\": \"brian@worlize.com\",\n\t\t\t\"url\": \"https://www.worlize.com/\"\n\t\t},\n\t\t\"browser\": \"lib/browser.js\",\n\t\t\"bugs\": {\n\t\t\t\"url\": \"https://github.com/theturtle32/WebSocket-Node/issues\"\n\t\t},\n\t\t\"config\": {\n\t\t\t\"verbose\": false\n\t\t},\n\t\t\"contributors\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Iñaki Baz Castillo\",\n\t\t\t\t\"email\": \"ibc@aliax.net\",\n\t\t\t\t\"url\": \"http://dev.sipdoc.net\"\n\t\t\t}\n\t\t],\n\t\t\"dependencies\": {\n\t\t\t\"debug\": \"^2.2.0\",\n\t\t\t\"nan\": \"^2.3.3\",\n\t\t\t\"typedarray-to-buffer\": \"^3.1.2\",\n\t\t\t\"yaeti\": \"^0.0.6\"\n\t\t},\n\t\t\"description\": \"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",\n\t\t\"devDependencies\": {\n\t\t\t\"buffer-equal\": \"^1.0.0\",\n\t\t\t\"faucet\": \"^0.0.1\",\n\t\t\t\"gulp\": \"git+https://github.com/gulpjs/gulp.git#4.0\",\n\t\t\t\"gulp-jshint\": \"^2.0.4\",\n\t\t\t\"jshint\": \"^2.0.0\",\n\t\t\t\"jshint-stylish\": \"^2.2.1\",\n\t\t\t\"tape\": \"^4.0.1\"\n\t\t},\n\t\t\"directories\": {\n\t\t\t\"lib\": \"./lib\"\n\t\t},\n\t\t\"dist\": {\n\t\t\t\"shasum\": \"74903e75f2545b6b2e1de1425bc1c905917a1890\",\n\t\t\t\"tarball\": \"https://registry.npmjs.org/websocket/-/websocket-1.0.24.tgz\"\n\t\t},\n\t\t\"engines\": {\n\t\t\t\"node\": \">=0.8.0\"\n\t\t},\n\t\t\"gitHead\": \"0e15f9445953927c39ce84a232cb7dd6e3adf12e\",\n\t\t\"homepage\": \"https://github.com/theturtle32/WebSocket-Node\",\n\t\t\"keywords\": [\n\t\t\t\"websocket\",\n\t\t\t\"websockets\",\n\t\t\t\"socket\",\n\t\t\t\"networking\",\n\t\t\t\"comet\",\n\t\t\t\"push\",\n\t\t\t\"RFC-6455\",\n\t\t\t\"realtime\",\n\t\t\t\"server\",\n\t\t\t\"client\"\n\t\t],\n\t\t\"license\": \"Apache-2.0\",\n\t\t\"main\": \"index\",\n\t\t\"maintainers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"theturtle32\",\n\t\t\t\t\"email\": \"brian@worlize.com\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"websocket\",\n\t\t\"optionalDependencies\": {},\n\t\t\"readme\": \"ERROR: No README data found!\",\n\t\t\"repository\": {\n\t\t\t\"type\": \"git\",\n\t\t\t\"url\": \"git+https://github.com/theturtle32/WebSocket-Node.git\"\n\t\t},\n\t\t\"scripts\": {\n\t\t\t\"gulp\": \"gulp\",\n\t\t\t\"install\": \"(node-gyp rebuild 2> builderror.log) || (exit 0)\",\n\t\t\t\"test\": \"faucet test/unit\"\n\t\t},\n\t\t\"version\": \"1.0.24\"\n\t};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar State = __webpack_require__(11)\n\tvar tokenize = __webpack_require__(12)\n\n\tvar tokenizedCache = {}\n\n\tmodule.exports = function jsonQuery (query, options) {\n\n\t  // extract params for ['test[param=?]', 'value'] type queries\n\t  var params = options && options.params || null\n\t  if (Array.isArray(query)) {\n\t    params = query.slice(1)\n\t    query = query[0]\n\t  }\n\n\t  if (!tokenizedCache[query]) {\n\t    tokenizedCache[query] = tokenize(query, true)\n\t  }\n\n\t  return handleQuery(tokenizedCache[query], options, params)\n\t}\n\n\n\tmodule.exports.lastParent = function (query) {\n\t  var last = query.parents[query.parents.length - 1]\n\t  if (last) {\n\t    return last.value\n\t  } else {\n\t    return null\n\t  }\n\t}\n\n\n\tfunction handleQuery (tokens, options, params) {\n\t  var state = new State(options, params, handleQuery)\n\n\t  for (var i = 0; i < tokens.length; i++) {\n\t    if (handleToken(tokens[i], state)) {\n\t      break\n\t    }\n\t  }\n\n\t  // flush\n\t  handleToken(null, state)\n\n\t  // set databind hooks\n\t  if (state.currentItem instanceof Object) {\n\t    state.addReference(state.currentItem)\n\t  } else {\n\t    var parentObject = getLastParentObject(state.currentParents)\n\t    if (parentObject) {\n\t      state.addReference(parentObject)\n\t    }\n\t  }\n\n\t  return {\n\t    value: state.currentItem,\n\t    key: state.currentKey,\n\t    references: state.currentReferences,\n\t    parents: state.currentParents\n\t  }\n\t}\n\n\tfunction handleToken (token, state) {\n\t  // state: setCurrent, getValue, getValues, resetCurrent, deepQuery, rootContext, currentItem, currentKey, options, filters\n\n\t  if (token == null) {\n\t    // process end of query\n\t    if (!state.currentItem && state.options.force) {\n\t      state.force(state.options.force)\n\t    }\n\t  } else if (token.values) {\n\t    if (state.currentItem) {\n\t      var keys = Object.keys(state.currentItem)\n\t      var values = []\n\t      keys.forEach(function (key) {\n\t        if (token.deep && Array.isArray(state.currentItem[key])) {\n\t          state.currentItem[key].forEach(function (item) {\n\t            values.push(item)\n\t          })\n\t        } else {\n\t          values.push(state.currentItem[key])\n\t        }\n\t      })\n\t      state.setCurrent(keys, values)\n\t    } else {\n\t      state.setCurrent(keys, [])\n\t    }\n\t  } else if (token.get) {\n\t    var key = state.getValue(token.get)\n\t    if (shouldOverride(state, key)) {\n\t      state.setCurrent(key, state.override[key])\n\t    } else {\n\t      if (state.currentItem || (state.options.force && state.force({}))) {\n\t        if (isDeepAccessor(state.currentItem, key) || token.multiple) {\n\t          var values = state.currentItem.map(function (item) {\n\t            return item[key]\n\t          }).filter(isDefined)\n\n\t          values = Array.prototype.concat.apply([], values) // flatten\n\n\t          state.setCurrent(key, values)\n\t        } else {\n\t          state.setCurrent(key, state.currentItem[key])\n\t        }\n\t      } else {\n\t        state.setCurrent(key, null)\n\t      }\n\t    }\n\t  } else if (token.select) {\n\t    if (Array.isArray(state.currentItem) || (state.options.force && state.force([]))) {\n\t      var match = (token.boolean ? token.select : [token]).map(function (part) {\n\t        if (part.op === ':') {\n\t          var key = state.getValue(part.select[0])\n\t          return {\n\t            func: function (item) {\n\t              if (key) {\n\t                item = item[key]\n\t              }\n\t              return state.getValueFrom(part.select[1], item)\n\t            },\n\t            negate: part.negate,\n\t            booleanOp: part.booleanOp\n\t          }\n\t        } else {\n\t          var selector = state.getValues(part.select)\n\t          if (!state.options.allowRegexp && part.op === '~' && selector[1] instanceof RegExp) throw new Error('options.allowRegexp is not enabled.')\n\t          return {\n\t            key: selector[0],\n\t            value: selector[1],\n\t            negate: part.negate,\n\t            booleanOp: part.booleanOp,\n\t            op: part.op\n\t          }\n\t        }\n\t      })\n\n\t      if (token.multiple) {\n\t        var keys = []\n\t        var value = []\n\t        state.currentItem.forEach(function (item, i) {\n\t          if (matches(item, match)) {\n\t            keys.push(i)\n\t            value.push(item)\n\t          }\n\t        })\n\t        state.setCurrent(keys, value)\n\t      } else {\n\t        if (!state.currentItem.some(function (item, i) {\n\t          if (matches(item, match)) {\n\t            state.setCurrent(i, item)\n\t            return true\n\t          }\n\t        })) {\n\t          state.setCurrent(null, null)\n\t        }\n\t      }\n\t    } else {\n\t      state.setCurrent(null, null)\n\t    }\n\t  } else if (token.root) {\n\t    state.resetCurrent()\n\t    if (token.args && token.args.length) {\n\t      state.setCurrent(null, state.getValue(token.args[0]))\n\t    } else {\n\t      state.setCurrent(null, state.rootContext)\n\t    }\n\t  } else if (token.parent) {\n\t    state.resetCurrent()\n\t    state.setCurrent(null, state.options.parent)\n\t  } else if (token.or) {\n\t    if (state.currentItem) {\n\t      return true\n\t    } else {\n\t      state.resetCurrent()\n\t      state.setCurrent(null, state.context)\n\t    }\n\t  } else if (token.filter) {\n\t    var helper = state.getLocal(token.filter) || state.getGlobal(token.filter)\n\t    if (typeof helper === 'function') {\n\t      // function(input, args...)\n\t      var values = state.getValues(token.args || [])\n\t      var result = helper.apply(state.options, [state.currentItem].concat(values))\n\t      state.setCurrent(null, result)\n\t    } else {\n\t      // fallback to old filters\n\t      var filter = state.getFilter(token.filter)\n\t      if (typeof filter === 'function') {\n\t        var values = state.getValues(token.args || [])\n\t        var result = filter.call(state.options, state.currentItem, {args: values, state: state, data: state.rootContext})\n\t        state.setCurrent(null, result)\n\t      }\n\t    }\n\t  } else if (token.deep) {\n\t    if (state.currentItem) {\n\t      if (token.deep.length === 0) {\n\t        return\n\t      }\n\n\t      var result = state.deepQuery(state.currentItem, token.deep, state.options)\n\t      if (result) {\n\t        state.setCurrent(result.key, result.value)\n\t        for (var i = 0; i < result.parents.length; i++) {\n\t          state.currentParents.push(result.parents[i])\n\t        }\n\t      } else {\n\t        state.setCurrent(null, null)\n\t      }\n\t    } else {\n\t      state.currentItem = null\n\t    }\n\t  }\n\t}\n\n\tfunction matches (item, parts) {\n\t  var result = false\n\t  for (var i = 0; i < parts.length; i++) {\n\t    var opts = parts[i]\n\t    var r = false\n\t    if (opts.func) {\n\t      r = opts.func(item)\n\t    } else if (opts.op === '~') {\n\t      if (opts.value instanceof RegExp) {\n\t        r = item[opts.key] && !!item[opts.key].match(opts.value)\n\t      } else {\n\t        r = item[opts.key] && !!~item[opts.key].indexOf(opts.value)\n\t      }\n\t    } else if (opts.op === '=') {\n\t      if ((item[opts.key] === true && opts.value === 'true') || (item[opts.key] === false && opts.value === 'false')) {\n\t        r = true\n\t      } else {\n\t        r = item[opts.key] == opts.value\n\t      }\n\t    } else if (opts.op === '>') {\n\t      r = item[opts.key] > opts.value\n\t    } else if (opts.op === '<') {\n\t      r = item[opts.key] < opts.value\n\t    } else if (opts.op === '>=') {\n\t      r = item[opts.key] >= opts.value\n\t    } else if (opts.op === '<=') {\n\t      r = item[opts.key] <= opts.value\n\t    }\n\n\t    if (opts.negate) {\n\t      r = !r\n\t    }\n\t    if (opts.booleanOp === '&') {\n\t      result = result && r\n\t    } else if (opts.booleanOp === '|') {\n\t      result = result || r\n\t    } else {\n\t      result = r\n\t    }\n\t  }\n\n\t  return result\n\t}\n\n\tfunction isDefined(value) {\n\t  return typeof value !== 'undefined'\n\t}\n\n\tfunction shouldOverride (state, key) {\n\t  return state.override && state.currentItem === state.rootContext && state.override[key] !== undefined\n\t}\n\n\tfunction isDeepAccessor (currentItem, key) {\n\t  return currentItem instanceof Array && parseInt(key) != key\n\t}\n\n\tfunction getLastParentObject (parents) {\n\t  for (var i = 0; i < parents.length; i++) {\n\t    if (!(parents[i + 1]) || !(parents[i + 1].value instanceof Object)) {\n\t      return parents[i].value\n\t    }\n\t  }\n\t}\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = State\n\n\tfunction State(options, params, handleQuery){\n\n\t  options = options || {}\n\n\t  //this.options = options\n\t  this.handleQuery = handleQuery\n\t  this.options = options\n\t  this.locals = this.options.locals || {}\n\t  this.globals = this.options.globals || {}\n\t  this.rootContext = firstNonNull(options.data, options.rootContext, options.context, options.source)\n\t  this.parent = options.parent\n\t  this.override = options.override\n\t  this.filters = options.filters || {}\n\t  this.params = params || options.params || []\n\t  this.context = firstNonNull(options.currentItem, options.context, options.source)\n\t  this.currentItem = firstNonNull(this.context, options.rootContext, options.data)\n\t  this.currentKey = null\n\t  this.currentReferences = []\n\t  this.currentParents = []\n\t}\n\n\tState.prototype = {\n\n\t  // current manipulation\n\t  setCurrent: function(key, value){\n\t    if (this.currentItem || this.currentKey || this.currentParents.length>0){\n\t      this.currentParents.push({key: this.currentKey, value: this.currentItem})\n\t    }\n\t    this.currentItem = value\n\t    this.currentKey = key\n\t  },\n\n\t  resetCurrent: function(){\n\t    this.currentItem = null\n\t    this.currentKey = null\n\t    this.currentParents = []\n\t  },\n\n\t  force: function(def){\n\t    var parent = this.currentParents[this.currentParents.length-1]\n\t    if (!this.currentItem && parent && (this.currentKey != null)){\n\t      this.currentItem = def || {}\n\t      parent.value[this.currentKey] = this.currentItem\n\t    }\n\t    return !!this.currentItem\n\t  },\n\n\t  getLocal: function(localName){\n\t    if (~localName.indexOf('/')){\n\t      var result = null\n\t      var parts = localName.split('/')\n\n\t      for (var i=0;i<parts.length;i++){\n\t        var part = parts[i]\n\t        if (i == 0){\n\t          result = this.locals[part]\n\t        } else if (result && result[part]){\n\t          result = result[part]\n\t        }\n\t      }\n\n\t      return result\n\t    } else {\n\t      return this.locals[localName]\n\t    }\n\t  },\n\n\t  getGlobal: function(globalName){\n\t    if (~globalName.indexOf('/')){\n\t      var result = null\n\t      var parts = globalName.split('/')\n\n\t      for (var i=0;i<parts.length;i++){\n\t        var part = parts[i]\n\t        if (i == 0){\n\t          result = this.globals[part]\n\t        } else if (result && result[part]){\n\t          result = result[part]\n\t        }\n\t      }\n\n\t      return result\n\t    } else {\n\t      return this.globals[globalName]\n\t    }\n\t  },\n\n\t  getFilter: function(filterName){\n\t    if (~filterName.indexOf('/')){\n\t      var result = null\n\t      var filterParts = filterName.split('/')\n\n\t      for (var i=0;i<filterParts.length;i++){\n\t        var part = filterParts[i]\n\t        if (i == 0){\n\t          result = this.filters[part]\n\t        } else if (result && result[part]){\n\t          result = result[part]\n\t        }\n\t      }\n\n\t      return result\n\t    } else {\n\t      return this.filters[filterName]\n\t    }\n\t  },\n\n\t  addReferences: function(references){\n\t    if (references){\n\t      references.forEach(this.addReference, this)\n\t    }\n\t  },\n\n\t  addReference: function(ref){\n\t    if (ref instanceof Object && !~this.currentReferences.indexOf(ref)){\n\t      this.currentReferences.push(ref)\n\t    }\n\t  },\n\n\t  // helper functions\n\t  getValues: function(values, callback){\n\t    return values.map(this.getValue, this)\n\t  },\n\n\t  getValue: function (value) {\n\t    return this.getValueFrom(value, null)\n\t  },\n\n\t  getValueFrom: function (value, item) {\n\t    if (value._param != null){\n\t      return this.params[value._param]\n\t    } else if (value._sub){\n\n\t      var options = copy(this.options)\n\t      options.force = null\n\t      options.currentItem = item\n\n\t      var result = this.handleQuery(value._sub, options, this.params)\n\t      this.addReferences(result.references)\n\t      return result.value\n\n\t    } else {\n\t      return value\n\t    }\n\t  },\n\n\t  deepQuery: function(source, tokens, options, callback){\n\t    var keys = Object.keys(source)\n\n\t    for (var key in source){\n\t      if (key in source){\n\n\t        var options = copy(this.options)\n\t        options.currentItem = source[key]\n\n\t        var result = this.handleQuery(tokens, options, this.params)\n\n\t        if (result.value){\n\t          return result\n\t        }\n\t      }\n\t    }\n\n\t    return null\n\t  }\n\n\t}\n\n\tfunction firstNonNull(args){\n\t  for (var i=0;i<arguments.length;i++){\n\t    if (arguments[i] != null){\n\t      return arguments[i]\n\t    }\n\t  }\n\t}\n\n\tfunction copy(obj){\n\t  var result = {}\n\t  if (obj){\n\t    for (var key in obj){\n\t      if (key in obj){\n\t        result[key] = obj[key]\n\t      }\n\t    }\n\t  }\n\t  return result\n\t}\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// todo: syntax checking\n\t// todo: test handle args\n\tvar depthSplit = __webpack_require__(13)\n\n\tmodule.exports = function(query, shouldAssignParamIds){\n\t  if (!query) return []\n\n\t  var result = []\n\t    , prevChar, char\n\t    , nextChar = query.charAt(0)\n\t    , bStart = 0\n\t    , bEnd = 0\n\t    , partOffset = 0\n\t    , pos = 0\n\t    , depth = 0\n\t    , mode = 'get'\n\t    , deepQuery = null\n\n\t  // if query contains params then number them\n\t  if (shouldAssignParamIds){\n\t    query = assignParamIds(query)\n\t  }\n\n\t  var tokens = {\n\t    '.': {mode: 'get'},\n\t    ':': {mode: 'filter'},\n\t    '|': {handle: 'or'},\n\t    '[': {open: 'select'},\n\t    ']': {close: 'select'},\n\t    '{': {open: 'meta'},\n\t    '}': {close: 'meta'},\n\t    '(': {open: 'args'},\n\t    ')': {close: 'args'}\n\t  }\n\n\t  function push(item){\n\t    if (deepQuery){\n\t      deepQuery.push(item)\n\t    } else {\n\t      result.push(item)\n\t    }\n\t  }\n\n\t  var handlers = {\n\t    get: function(buffer){\n\t      var trimmed = typeof buffer === 'string' ? buffer.trim() : null\n\t      if (trimmed){\n\t        push({get:trimmed})\n\t      }\n\t    },\n\t    select: function(buffer){\n\t      if (buffer){\n\t        push(tokenizeSelect(buffer))\n\t      } else {\n\t        // deep query override\n\t        var x = {deep: []}\n\t        result.push(x)\n\t        deepQuery = x.deep\n\t      }\n\t    },\n\t    filter: function(buffer){\n\t      if (buffer){\n\t        push({filter:buffer.trim()})\n\t      }\n\t    },\n\t    or: function(){\n\t      deepQuery = null\n\t      result.push({or:true})\n\t      partOffset = i + 1\n\t    },\n\t    args: function(buffer){\n\t      var args = tokenizeArgs(buffer)\n\t      result[result.length-1].args = args\n\t    }\n\t  }\n\n\t  function handleBuffer(){\n\t    var buffer = query.slice(bStart, bEnd)\n\t    if (handlers[mode]){\n\t      handlers[mode](buffer)\n\t    }\n\t    mode = 'get'\n\t    bStart = bEnd + 1\n\t  }\n\n\t  for (var i = 0;i < query.length;i++){\n\n\t    // update char values\n\t    prevChar = char; char = nextChar; nextChar = query.charAt(i + 1);\n\t    pos = i - partOffset\n\n\t    // root query check\n\t    if (pos === 0 && (char !== ':' && char !== '.')){\n\t      result.push({root:true})\n\t    }\n\n\t    // parent query check\n\t    if (pos === 0 && (char === '.' && nextChar === '.')){\n\t      result.push({parent:true})\n\t    }\n\n\t    var token = tokens[char]\n\t    if (token){\n\n\t      // set mode\n\t      if (depth === 0 && (token.mode || token.open)){\n\t        handleBuffer()\n\t        mode = token.mode || token.open\n\t      }\n\n\t      if (depth === 0 && token.handle){\n\t        handleBuffer()\n\t        handlers[token.handle]()\n\t      }\n\n\t      if (token.open){\n\t        depth += 1\n\t      } else if (token.close){\n\t        depth -= 1\n\t      }\n\n\t      // reset mode to get\n\t      if (depth === 0 && token.close){\n\t        handleBuffer()\n\t      }\n\n\t    }\n\n\t    bEnd = i + 1\n\n\t  }\n\n\t  handleBuffer()\n\t  return result\n\t}\n\n\tfunction tokenizeArgs(argsQuery){\n\t  if (argsQuery === ',') return [',']\n\t  return depthSplit(argsQuery, /,/).map(function(s){\n\t    return handleSelectPart(s.trim())\n\t  })\n\t}\n\n\tfunction tokenizeSelect (selectQuery) {\n\t  if (selectQuery === '*') {\n\t    return {\n\t      values: true\n\t    }\n\t  } else if (selectQuery === '**') {\n\t    return {\n\t      values: true,\n\t      deep: true\n\t    }\n\t  }\n\n\t  var multiple = false\n\t  if (selectQuery.charAt(0) === '*') {\n\t    multiple = true\n\t    selectQuery = selectQuery.slice(1)\n\t  }\n\n\t  var booleanParts = depthSplit(selectQuery, /&|\\|/, { includeDelimiters: true })\n\t  if (booleanParts.length > 1) {\n\t    var result = [\n\t      getSelectPart(booleanParts[0].trim())\n\t    ]\n\t    for (var i = 1; i < booleanParts.length; i += 2) {\n\t      var part = getSelectPart(booleanParts[i + 1].trim())\n\t      if (part) {\n\t        part.booleanOp = booleanParts[i]\n\t        result.push(part)\n\t      }\n\t    }\n\t    return {\n\t      multiple: multiple,\n\t      boolean: true,\n\t      select: result\n\t    }\n\t  } else {\n\t    var result = getSelectPart(selectQuery.trim())\n\t    if (!result) {\n\t      return {\n\t        get: handleSelectPart(selectQuery.trim())\n\t      }\n\t    } else {\n\t      if (multiple) {\n\t        result.multiple = true\n\t      }\n\t      return result\n\t    }\n\t  }\n\t}\n\n\tfunction getSelectPart (selectQuery) {\n\t  var parts = depthSplit(selectQuery, /(!)?(=|~|\\:|<=|>=|<|>)/, { max: 2, includeDelimiters: true })\n\t  if (parts.length === 3) {\n\t    var negate = parts[1].charAt(0) === '!'\n\t    var key = handleSelectPart(parts[0].trim())\n\t    var result = {\n\t      negate: negate,\n\t      op: negate ? parts[1].slice(1) : parts[1]\n\t    }\n\t    if (result.op === ':') {\n\t      result.select = [key, {_sub: module.exports(':' + parts[2].trim())}]\n\t    } else if (result.op === '~') {\n\t      var value = handleSelectPart(parts[2].trim())\n\t      if (typeof value === 'string') {\n\t        var reDef = parts[2].trim().match(/^\\/(.*)\\/([a-z]?)$/)\n\t        if (reDef) {\n\t          result.select = [key, new RegExp(reDef[1], reDef[2])]\n\t        } else {\n\t          result.select = [key, value]\n\t        }\n\t      } else {\n\t        result.select = [key, value]\n\t      }\n\t    } else {\n\t      result.select = [key, handleSelectPart(parts[2].trim())]\n\t    }\n\t    return result\n\t  }\n\t}\n\n\tfunction isInnerQuery (text) {\n\t  return text.charAt(0) === '{' && text.charAt(text.length-1) === '}'\n\t}\n\n\tfunction handleSelectPart(part){\n\t  if (isInnerQuery(part)){\n\t    var innerQuery = part.slice(1, -1)\n\t    return {_sub: module.exports(innerQuery)}\n\t  } else {\n\t    return paramToken(part)\n\t  }\n\t}\n\n\tfunction paramToken(text){\n\t  if (text.charAt(0) === '?'){\n\t    var num = parseInt(text.slice(1))\n\t    if (!isNaN(num)){\n\t      return {_param: num}\n\t    } else {\n\t      return text\n\t    }\n\t  } else {\n\t    return text\n\t  }\n\t}\n\n\n\n\tfunction assignParamIds(query){\n\t  var index = 0\n\t  return query.replace(/\\?/g, function(match){\n\t    return match + (index++)\n\t  })\n\t}\n\n\tfunction last (array) {\n\t  return array[array.length - 1]\n\t}\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = depthSplit\n\n\tfunction depthSplit (text, delimiter, opts) {\n\t  var max = opts && opts.max || Infinity\n\t  var includeDelimiters = opts && opts.includeDelimiters || false\n\n\t  var depth = 0\n\t  var start = 0\n\t  var result = []\n\t  var zones = []\n\n\t  text.replace(/([\\[\\(\\{])|([\\]\\)\\}])/g, function (current, open, close, offset) {\n\t    if (open) {\n\t      if (depth === 0) {\n\t        zones.push([start, offset])\n\t      }\n\t      depth += 1\n\t    } else if (close) {\n\t      depth -= 1\n\t      if (depth === 0) {\n\t        start = offset + current.length\n\t      }\n\t    }\n\t  })\n\n\t  if (depth === 0 && start < text.length) {\n\t    zones.push([start, text.length])\n\t  }\n\n\t  start = 0\n\n\t  for (var i = 0; i < zones.length && max > 0; i++) {\n\t    for (\n\t      var pos = zones[i][0], match = delimiter.exec(text.slice(pos, zones[i][1]));\n\t      match && max > 1;\n\t      pos += match.index + match[0].length, start = pos, match = delimiter.exec(text.slice(pos, zones[i][1]))\n\t    ) {\n\t      result.push(text.slice(start, match.index + pos))\n\t      if (includeDelimiters) {\n\t        result.push(match[0])\n\t      }\n\t      max -= 1\n\t    }\n\t  }\n\n\t  if (start < text.length) {\n\t    result.push(text.slice(start))\n\t  }\n\n\t  return result\n\t}\n\n\n/***/ })\n/******/ ]);", __webpack_require__.p + "e9a579efafc29d09b432.worker.js");
	};

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string

	var URL = window.URL || window.webkitURL;
	module.exports = function(content, url) {
	  try {
	    try {
	      var blob;
	      try { // BlobBuilder = Deprecated, but widely implemented
	        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
	        blob = new BlobBuilder();
	        blob.append(content);
	        blob = blob.getBlob();
	      } catch(e) { // The proposed API
	        blob = new Blob([content]);
	      }
	      return new Worker(URL.createObjectURL(blob));
	    } catch(e) {
	      return new Worker('data:application/javascript,' + encodeURIComponent(content));
	    }
	  } catch(e) {
	    if (!url) {
	      throw Error('Inline worker is not supported');
	    }
	    return new Worker(url);
	  }
	}


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	module.exports = {
	    guid: function guid() {
	        // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
	        function s4() {
	            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	        }
	        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	    },
	    getParameterByName: function getParameterByName(name, url) {
	        // http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
	        if (!url) url = window.location.href;
	        name = name.replace(/[\[\]]/g, "\\$&");
	        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
	            results = regex.exec(url);
	        if (!results) return null;
	        if (!results[2]) return '';
	        return decodeURIComponent(results[2].replace(/\+/g, " "));
	    },
	    mix: function mix(definition) {
	        var self = this;

	        for (var k in definition) {
	            if (_typeof(definition[k]) == 'object' && self[k] && k === 'attributes') {
	                self[k] = mix.call(self[k], definition[k]);
	            } else {
	                self[k] = definition[k];
	            }
	        }

	        return self;
	    }
	};

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/**
	 * Lawnchair!
	 * --- 
	 * clientside json store 
	 *
	 */
	var Lawnchair = function (options, callback) {
	    // ensure Lawnchair was called as a constructor
	    if (!(this instanceof Lawnchair)) return new Lawnchair(options, callback);

	    // lawnchair requires json 
	    if (!JSON) throw 'JSON unavailable! Include http://www.json.org/json2.js to fix.'
	    // options are optional; callback is not
	    if (arguments.length <= 2) {
	        callback = (typeof arguments[0] === 'function') ? arguments[0] : arguments[1];
	        options  = (typeof arguments[0] === 'function') ? {} : arguments[0] || {};
	    } else {
	        throw 'Incorrect # of ctor args!'
	    }
	    
	    // default configuration 
	    this.record = options.record || 'record'  // default for records
	    this.name   = options.name   || 'records' // default name for underlying store
	    
	    // mixin first valid  adapter
	    var adapter
	    // if the adapter is passed in we try to load that only
	    if (options.adapter) {
	        
	        // the argument passed should be an array of prefered adapters
	        // if it is not, we convert it
	        if(typeof(options.adapter) === 'string'){
	            options.adapter = [options.adapter];    
	        }
	            
	        // iterates over the array of passed adapters 
	        for(var j = 0, k = options.adapter.length; j < k; j++){
	            
	            // itirates over the array of available adapters
	            for (var i = Lawnchair.adapters.length-1; i >= 0; i--) {
	                if (Lawnchair.adapters[i].adapter === options.adapter[j]) {
	                    adapter = Lawnchair.adapters[i].valid() ? Lawnchair.adapters[i] : undefined;
	                    if (adapter) break 
	                }
	            }
	            if (adapter) break
	        }
	    
	    // otherwise find the first valid adapter for this env
	    } 
	    else {
	        for (var i = 0, l = Lawnchair.adapters.length; i < l; i++) {
	            adapter = Lawnchair.adapters[i].valid() ? Lawnchair.adapters[i] : undefined
	            if (adapter) break 
	        }
	    } 
	    
	    // we have failed 
	    if (!adapter) throw 'No valid adapter.' 
	    
	    // yay! mixin the adapter 
	    for (var j in adapter)  
	        this[j] = adapter[j]
	    
	    // call init for each mixed in plugin
	    for (var i = 0, l = Lawnchair.plugins.length; i < l; i++) 
	        Lawnchair.plugins[i].call(this)

	    // init the adapter 
	    this.init(options, callback)
	}

	Lawnchair.adapters = [] 

	/** 
	 * queues an adapter for mixin
	 * ===
	 * - ensures an adapter conforms to a specific interface
	 *
	 */
	Lawnchair.adapter = function (id, obj) {
	    // add the adapter id to the adapter obj
	    // ugly here for a  cleaner dsl for implementing adapters
	    obj['adapter'] = id
	    // methods required to implement a lawnchair adapter 
	    var implementing = 'adapter valid init keys save batch get exists all remove nuke'.split(' ')
	    ,   indexOf = this.prototype.indexOf
	    // mix in the adapter   
	    for (var i in obj) {
	        if (indexOf(implementing, i) === -1) throw 'Invalid adapter! Nonstandard method: ' + i
	    }
	    // if we made it this far the adapter interface is valid 
		// insert the new adapter as the preferred adapter
		Lawnchair.adapters.splice(0,0,obj)
	}

	Lawnchair.plugins = []

	/**
	 * generic shallow extension for plugins
	 * ===
	 * - if an init method is found it registers it to be called when the lawnchair is inited 
	 * - yes we could use hasOwnProp but nobody here is an asshole
	 */ 
	Lawnchair.plugin = function (obj) {
	    for (var i in obj) 
	        i === 'init' ? Lawnchair.plugins.push(obj[i]) : this.prototype[i] = obj[i]
	}

	/**
	 * helpers
	 *
	 */
	Lawnchair.prototype = {

	    isArray: Array.isArray || function(o) { return Object.prototype.toString.call(o) === '[object Array]' },
	    
	    /**
	     * this code exists for ie8... for more background see:
	     * http://www.flickr.com/photos/westcoastlogic/5955365742/in/photostream
	     */
	    indexOf: function(ary, item, i, l) {
	        if (ary.indexOf) return ary.indexOf(item)
	        for (i = 0, l = ary.length; i < l; i++) if (ary[i] === item) return i
	        return -1
	    },

	    // awesome shorthand callbacks as strings. this is shameless theft from dojo.
	    lambda: function (callback) {
	        return this.fn(this.record, callback)
	    },

	    // first stab at named parameters for terse callbacks; dojo: first != best // ;D
	    fn: function (name, callback) {
	        return typeof callback == 'string' ? new Function(name, callback) : callback
	    },

	    // returns a unique identifier (by way of Backbone.localStorage.js)
	    // TODO investigate smaller UUIDs to cut on storage cost
	    uuid: function () {
	        var S4 = function () {
	            return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
	        }
	        return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
	    },

	    // a classic iterator
	    each: function (callback) {
	        var cb = this.lambda(callback)
	        // iterate from chain
	        if (this.__results) {
	            for (var i = 0, l = this.__results.length; i < l; i++) cb.call(this, this.__results[i], i) 
	        }  
	        // otherwise iterate the entire collection 
	        else {
	            this.all(function(r) {
	                for (var i = 0, l = r.length; i < l; i++) cb.call(this, r[i], i)
	            })
	        }
	        return this
	    }
	// --
	};

	/**
	 * Expose nodeJS module
	 */
	if (typeof module !== 'undefined' && module.exports) {
	  module.exports = Lawnchair;
	}
	// window.name code courtesy Remy Sharp: http://24ways.org/2009/breaking-out-the-edges-of-the-browser
	Lawnchair.adapter('window-name', (function() {
	    if (typeof window==='undefined') {
	        window = { top: { } }; // node/optimizer compatibility
	    }

	    // edited from the original here by elsigh
	    // Some sites store JSON data in window.top.name, but some folks (twitter on iPad)
	    // put simple strings in there - we should make sure not to cause a SyntaxError.
	    var data = {}
	    try {
	        data = JSON.parse(window.top.name)    
	    } catch (e) {}
	    
	    
	    return {

	        valid: function () {
	            return typeof window.top.name != 'undefined' 
	        },

	        init: function (options, callback) {
	            data[this.name] = data[this.name] || {index:[],store:{}}
	            this.index = data[this.name].index
	            this.store = data[this.name].store
	            this.fn(this.name, callback).call(this, this)
	            return this
	        },

	        keys: function (callback) {
	            this.fn('keys', callback).call(this, this.index)
	            return this
	        },

	        save: function (obj, cb) {
	            // data[key] = value + ''; // force to string
	            // window.top.name = JSON.stringify(data);
	            var key = obj.key || this.uuid()
	            this.exists(key, function(exists) {
	                if (!exists) {
	                    if (obj.key) delete obj.key
	                    this.index.push(key)
	                }
	                this.store[key] = obj

	                try {
	                    window.top.name = JSON.stringify(data) // TODO wow, this is the only diff from the memory adapter
	                } catch(e) {
	                    // restore index/store to previous value before JSON exception
	                    if (!exists) {
	                        this.index.pop();
	                        delete this.store[key];
	                    }
	                    throw e;
	                }

	                if (cb) {
	                    obj.key = key
	                    this.lambda(cb).call(this, obj)
	                }
	            })
	            return this
	        },

	        batch: function (objs, cb) {
	            var r = []
	            for (var i = 0, l = objs.length; i < l; i++) {
	                this.save(objs[i], function(record) {
	                    r.push(record)
	                })
	            }
	            if (cb) this.lambda(cb).call(this, r)
	            return this
	        },
	        
	        get: function (keyOrArray, cb) {
	            var r;
	            if (this.isArray(keyOrArray)) {
	                r = []
	                for (var i = 0, l = keyOrArray.length; i < l; i++) {
	                    r.push(this.store[keyOrArray[i]])
	                }
	            } else {
	                r = this.store[keyOrArray]
	                if (r) r.key = keyOrArray
	            }
	            if (cb) this.lambda(cb).call(this, r)
	            return this 
	        },
	        
	        exists: function (key, cb) {
	            this.lambda(cb).call(this, !!(this.store[key]))
	            return this
	        },

	        all: function (cb) {
	            var r = []
	            for (var i = 0, l = this.index.length; i < l; i++) {
	                var obj = this.store[this.index[i]]
	                obj.key = this.index[i]
	                r.push(obj)
	            }
	            this.fn(this.name, cb).call(this, r)
	            return this
	        },
	        
	        remove: function (keyOrArray, cb) {
	            var del = this.isArray(keyOrArray) ? keyOrArray : [keyOrArray]
	            for (var i = 0, l = del.length; i < l; i++) {
	                var key = del[i].key ? del[i].key : del[i]
	                var where = this.indexOf(this.index, key)
	                if (where < 0) continue /* key not present */
	                delete this.store[key]
	                this.index.splice(where, 1)
	            }
	            window.top.name = JSON.stringify(data)
	            if (cb) this.lambda(cb).call(this)
	            return this
	        },

	        nuke: function (cb) {
	            this.store = data[this.name].store = {}
	            this.index = data[this.name].index = []
	            window.top.name = JSON.stringify(data)
	            if (cb) this.lambda(cb).call(this)
	            return this
	        }
	    }
	/////
	})());
	/**
	 * dom storage adapter 
	 * === 
	 * - originally authored by Joseph Pecoraro
	 *
	 */ 
	//
	// TODO does it make sense to be chainable all over the place?
	// chainable: nuke, remove, all, get, save, all    
	// not chainable: valid, keys
	//
	Lawnchair.adapter('dom', (function() {
	    var storage = window.localStorage
	    // the indexer is an encapsulation of the helpers needed to keep an ordered index of the keys
	    var indexer = function(name) {
	        return {
	            // the key
	            key: name + '._index_',
	            // returns the index
	            all: function() {
	                var a  = storage.getItem(JSON.stringify(this.key))
	                if (a) {
	                    a = JSON.parse(a)
	                }
	                if (a === null) storage.setItem(JSON.stringify(this.key), JSON.stringify([])) // lazy init
	                return JSON.parse(storage.getItem(JSON.stringify(this.key)))
	            },
	            // adds a key to the index
	            add: function (key) {
	                var a = this.all()
	                a.push(key)
	                storage.setItem(JSON.stringify(this.key), JSON.stringify(a))
	            },
	            // deletes a key from the index
	            del: function (key) {
	                var a = this.all(), r = []
	                // FIXME this is crazy inefficient but I'm in a strata meeting and half concentrating
	                for (var i = 0, l = a.length; i < l; i++) {
	                    if (a[i] != key) r.push(a[i])
	                }
	                storage.setItem(JSON.stringify(this.key), JSON.stringify(r))
	            },
	            // returns index for a key
	            find: function (key) {
	                var a = this.all()
	                for (var i = 0, l = a.length; i < l; i++) {
	                    if (key === a[i]) return i 
	                }
	                return false
	            }
	        }
	    }
	    
	    // adapter api 
	    return {
	    
	        // ensure we are in an env with localStorage 
	        valid: function () {
	            return !!storage && function() {
	              // in mobile safari if safe browsing is enabled, window.storage
	              // is defined but setItem calls throw exceptions.
	              var success = true
	              var value = Math.random()
	              try {
	                storage.setItem(value, value)
	              } catch (e) {
	                success = false
	              }
	              storage.removeItem(value)
	              return success
	            }()
	        },

	        init: function (options, callback) {
	            this.indexer = indexer(this.name)
	            if (callback) this.fn(this.name, callback).call(this, this)  
	        },
	        
	        save: function (obj, callback) {
	            var key = obj.key ? this.name + '.' + obj.key : this.name + '.' + this.uuid()
	            // now we kil the key and use it in the store colleciton    
	            delete obj.key;
	            storage.setItem(key, JSON.stringify(obj))
	            // if the key is not in the index push it on
	            if (this.indexer.find(key) === false) this.indexer.add(key)
	            obj.key = key.slice(this.name.length + 1)
	            if (callback) {
	                this.lambda(callback).call(this, obj)
	            }
	            return this
	        },

	        batch: function (ary, callback) {
	            var saved = []
	            // not particularily efficient but this is more for sqlite situations
	            for (var i = 0, l = ary.length; i < l; i++) {
	                this.save(ary[i], function(r){
	                    saved.push(r)
	                })
	            }
	            if (callback) this.lambda(callback).call(this, saved)
	            return this
	        },
	       
	        // accepts [options], callback
	        keys: function(callback) {
	            if (callback) {
	                var name = this.name
	                var indices = this.indexer.all();
	                var keys = [];
	                //Checking for the support of map.
	                if(Array.prototype.map) {
	                    keys = indices.map(function(r){ return r.replace(name + '.', '') })
	                } else {
	                    for (var key in indices) {
	                        keys.push(key.replace(name + '.', ''));
	                    }
	                }
	                this.fn('keys', callback).call(this, keys)
	            }
	            return this // TODO options for limit/offset, return promise
	        },
	        
	        get: function (key, callback) {
	            if (this.isArray(key)) {
	                var r = []
	                for (var i = 0, l = key.length; i < l; i++) {
	                    var k = this.name + '.' + key[i]
	                    var obj = storage.getItem(k)
	                    if (obj) {
	                        obj = JSON.parse(obj)
	                        obj.key = key[i]
	                    } 
	                    r.push(obj)
	                }
	                if (callback) this.lambda(callback).call(this, r)
	            } else {
	                var k = this.name + '.' + key
	                var  obj = storage.getItem(k)
	                if (obj) {
	                    obj = JSON.parse(obj)
	                    obj.key = key
	                }
	                if (callback) this.lambda(callback).call(this, obj)
	            }
	            return this
	        },

	        exists: function (key, cb) {
	            var exists = this.indexer.find(this.name+'.'+key) === false ? false : true ;
	            this.lambda(cb).call(this, exists);
	            return this;
	        },
	        // NOTE adapters cannot set this.__results but plugins do
	        // this probably should be reviewed
	        all: function (callback) {
	            var idx = this.indexer.all()
	            ,   r   = []
	            ,   o
	            ,   k
	            for (var i = 0, l = idx.length; i < l; i++) {
	                k     = idx[i] //v
	                o     = JSON.parse(storage.getItem(k))
	                o.key = k.replace(this.name + '.', '')
	                r.push(o)
	            }
	            if (callback) this.fn(this.name, callback).call(this, r)
	            return this
	        },
	        
	        remove: function (keyOrArray, callback) {
	            var self = this;
	            if (this.isArray(keyOrArray)) {
	                // batch remove
	                var i, done = keyOrArray.length;
	                var removeOne = function(i) {
	                    self.remove(keyOrArray[i], function() {
	                        if ((--done) > 0) { return; }
	                        if (callback) {
	                            self.lambda(callback).call(self);
	                        }
	                    });
	                };
	                for (i=0; i < keyOrArray.length; i++)
	                    removeOne(i);
	                return this;
	            }
	            var key = this.name + '.' +
	                ((keyOrArray.key) ? keyOrArray.key : keyOrArray)
	            this.indexer.del(key)
	            storage.removeItem(key)
	            if (callback) this.lambda(callback).call(this)
	            return this
	        },
	        
	        nuke: function (callback) {
	            this.all(function(r) {
	                for (var i = 0, l = r.length; i < l; i++) {
	                    this.remove(r[i]);
	                }
	                if (callback) this.lambda(callback).call(this)
	            })
	            return this 
	        }
	}})());


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(15);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-mdl-progress-bar .mdl-progress {\n  height: 100%;\n}\nx-mdl-progress-bar .bufferbar {\n  background-image: linear-gradient(to right, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.7)), linear-gradient(to right, #b8b8b9, #404040);\n}\n", ""]);

	// exports


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"mdl-progress mdl-js-progress mood\"></div>";

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, Store, c3, $, d3) {__webpack_require__(25);

	//calculate the legend value
	function getDataValue(id, data) {
	    var ret = "";
	    data.forEach(function (value) {
	        if (id == value[0]) {
	            ret = value[1];
	        }
	    });
	    return ret;
	}

	function getKeys(data) {
	 	 var ret = [];
	    data.forEach(function (value) {
	        if (value[0]) {
	            ret.push(value[0]);
	        }
	    });
	    
	    return ret;
	}

	module.exports = tag('x-swim-chart-tooltip', {
	    template: __webpack_require__(27),
	    draw: function(){
			    var state = this._data = Store.get(this.guid);
			    if(state) {
					this._chart.load({
	        			columns: state
	    			});		    
			    }
			    this.generateLegend();
	    },
	    inserted: function() {
	      var colorPattern = ['#ffc107', '#FED45B', '#FD9F28', '#FFEBB6'];
			this._data  = [];
	        		
	      // generate base chart when inserted into the DOM
			var chart = this._chart = c3.generate({
				bindto: $('.chart', this)[0],
				size: {
	  				width: $(this).width()
				},
				color: {
	            pattern: colorPattern
	         },
				tooltip: {
	            show: false
	         },
	   		legend: {
	        		show: false
	    		},
	  			pie: {
	    			label: {
	      			show: false
	    			}
	  			},
	    		data: {
	        		columns: this._data,
	        		type : 'pie'
	    		}
			});   
			
			this.generateLegend();
	    }, 
	    methods: {
			generateLegend: function() {
					var data = this._data;
					var chart = this._chart;
					// create the legend from the chart
					$('.legend', this).remove();
					d3.select($('.chart', this)[0]).insert('div', '.chart').attr('class', 'legend').selectAll('span')
	    			.data(getKeys(data))
	  				.enter().append('span')
	    			.attr('data-id', function (id) { return id; })
	    			.html(function (id) { return '<div><span class="asset" style="width:20px;height:20px;display:inline-block;background:#000;border-radius:20px;"></span><span>' + id + '</span><span style="float:right;">' + getDataValue(id, data) +  '</span></div>'; })
	    			.each(function (id) {
	        			d3.select(this).select('.asset').style('background-color', chart.color(id));
	    			});		
			}    
	    }, 
	    accessors: {
			'location': {
				attribute: {},
				set: function(value){
					this._title = value;
					$('.location', this).text(value);			
				},
				get: function() {
					return this._title;
				}	
			}    
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(8), __webpack_require__(20), __webpack_require__(7), __webpack_require__(22)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(21);
	__webpack_require__(23);

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (window) {
	    'use strict';

	    /*global define, module, exports, require */

	    var c3 = { version: "0.4.11" };

	    var c3_chart_fn,
	        c3_chart_internal_fn,
	        c3_chart_internal_axis_fn;

	    function API(owner) {
	        this.owner = owner;
	    }

	    function inherit(base, derived) {

	        if (Object.create) {
	            derived.prototype = Object.create(base.prototype);
	        } else {
	            var f = function f() {};
	            f.prototype = base.prototype;
	            derived.prototype = new f();
	        }

	        derived.prototype.constructor = derived;

	        return derived;
	    }

	    function Chart(config) {
	        var $$ = this.internal = new ChartInternal(this);
	        $$.loadConfig(config);

	        $$.beforeInit(config);
	        $$.init();
	        $$.afterInit(config);

	        // bind "this" to nested API
	        (function bindThis(fn, target, argThis) {
	            Object.keys(fn).forEach(function (key) {
	                target[key] = fn[key].bind(argThis);
	                if (Object.keys(fn[key]).length > 0) {
	                    bindThis(fn[key], target[key], argThis);
	                }
	            });
	        })(c3_chart_fn, this, this);
	    }

	    function ChartInternal(api) {
	        var $$ = this;
	        $$.d3 = window.d3 ? window.d3 :  true ? __webpack_require__(22) : undefined;
	        $$.api = api;
	        $$.config = $$.getDefaultConfig();
	        $$.data = {};
	        $$.cache = {};
	        $$.axes = {};
	    }

	    c3.generate = function (config) {
	        return new Chart(config);
	    };

	    c3.chart = {
	        fn: Chart.prototype,
	        internal: {
	            fn: ChartInternal.prototype,
	            axis: {
	                fn: Axis.prototype
	            }
	        }
	    };
	    c3_chart_fn = c3.chart.fn;
	    c3_chart_internal_fn = c3.chart.internal.fn;
	    c3_chart_internal_axis_fn = c3.chart.internal.axis.fn;

	    c3_chart_internal_fn.beforeInit = function () {
	        // can do something
	    };
	    c3_chart_internal_fn.afterInit = function () {
	        // can do something
	    };
	    c3_chart_internal_fn.init = function () {
	        var $$ = this, config = $$.config;

	        $$.initParams();

	        if (config.data_url) {
	            $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_headers, config.data_keys, $$.initWithData);
	        }
	        else if (config.data_json) {
	            $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));
	        }
	        else if (config.data_rows) {
	            $$.initWithData($$.convertRowsToData(config.data_rows));
	        }
	        else if (config.data_columns) {
	            $$.initWithData($$.convertColumnsToData(config.data_columns));
	        }
	        else {
	            throw Error('url or json or rows or columns is required.');
	        }
	    };

	    c3_chart_internal_fn.initParams = function () {
	        var $$ = this, d3 = $$.d3, config = $$.config;

	        // MEMO: clipId needs to be unique because it conflicts when multiple charts exist
	        $$.clipId = "c3-" + (+new Date()) + '-clip',
	        $$.clipIdForXAxis = $$.clipId + '-xaxis',
	        $$.clipIdForYAxis = $$.clipId + '-yaxis',
	        $$.clipIdForGrid = $$.clipId + '-grid',
	        $$.clipIdForSubchart = $$.clipId + '-subchart',
	        $$.clipPath = $$.getClipPath($$.clipId),
	        $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis),
	        $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);
	        $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid),
	        $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart),

	        $$.dragStart = null;
	        $$.dragging = false;
	        $$.flowing = false;
	        $$.cancelClick = false;
	        $$.mouseover = false;
	        $$.transiting = false;

	        $$.color = $$.generateColor();
	        $$.levelColor = $$.generateLevelColor();

	        $$.dataTimeFormat = config.data_xLocaltime ? d3.time.format : d3.time.format.utc;
	        $$.axisTimeFormat = config.axis_x_localtime ? d3.time.format : d3.time.format.utc;
	        $$.defaultAxisTimeFormat = $$.axisTimeFormat.multi([
	            [".%L", function (d) { return d.getMilliseconds(); }],
	            [":%S", function (d) { return d.getSeconds(); }],
	            ["%I:%M", function (d) { return d.getMinutes(); }],
	            ["%I %p", function (d) { return d.getHours(); }],
	            ["%-m/%-d", function (d) { return d.getDay() && d.getDate() !== 1; }],
	            ["%-m/%-d", function (d) { return d.getDate() !== 1; }],
	            ["%-m/%-d", function (d) { return d.getMonth(); }],
	            ["%Y/%-m/%-d", function () { return true; }]
	        ]);

	        $$.hiddenTargetIds = [];
	        $$.hiddenLegendIds = [];
	        $$.focusedTargetIds = [];
	        $$.defocusedTargetIds = [];

	        $$.xOrient = config.axis_rotated ? "left" : "bottom";
	        $$.yOrient = config.axis_rotated ? (config.axis_y_inner ? "top" : "bottom") : (config.axis_y_inner ? "right" : "left");
	        $$.y2Orient = config.axis_rotated ? (config.axis_y2_inner ? "bottom" : "top") : (config.axis_y2_inner ? "left" : "right");
	        $$.subXOrient = config.axis_rotated ? "left" : "bottom";

	        $$.isLegendRight = config.legend_position === 'right';
	        $$.isLegendInset = config.legend_position === 'inset';
	        $$.isLegendTop = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'top-right';
	        $$.isLegendLeft = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'bottom-left';
	        $$.legendStep = 0;
	        $$.legendItemWidth = 0;
	        $$.legendItemHeight = 0;

	        $$.currentMaxTickWidths = {
	            x: 0,
	            y: 0,
	            y2: 0
	        };

	        $$.rotated_padding_left = 30;
	        $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;
	        $$.rotated_padding_top = 5;

	        $$.withoutFadeIn = {};

	        $$.intervalForObserveInserted = undefined;

	        $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js
	    };

	    c3_chart_internal_fn.initChartElements = function () {
	        if (this.initBar) { this.initBar(); }
	        if (this.initLine) { this.initLine(); }
	        if (this.initArc) { this.initArc(); }
	        if (this.initGauge) { this.initGauge(); }
	        if (this.initText) { this.initText(); }
	    };

	    c3_chart_internal_fn.initWithData = function (data) {
	        var $$ = this, d3 = $$.d3, config = $$.config;
	        var defs, main, binding = true;

	        $$.axis = new Axis($$);

	        if ($$.initPie) { $$.initPie(); }
	        if ($$.initBrush) { $$.initBrush(); }
	        if ($$.initZoom) { $$.initZoom(); }

	        if (!config.bindto) {
	            $$.selectChart = d3.selectAll([]);
	        }
	        else if (typeof config.bindto.node === 'function') {
	            $$.selectChart = config.bindto;
	        }
	        else {
	            $$.selectChart = d3.select(config.bindto);
	        }
	        if ($$.selectChart.empty()) {
	            $$.selectChart = d3.select(document.createElement('div')).style('opacity', 0);
	            $$.observeInserted($$.selectChart);
	            binding = false;
	        }
	        $$.selectChart.html("").classed("c3", true);

	        // Init data as targets
	        $$.data.xs = {};
	        $$.data.targets = $$.convertDataToTargets(data);

	        if (config.data_filter) {
	            $$.data.targets = $$.data.targets.filter(config.data_filter);
	        }

	        // Set targets to hide if needed
	        if (config.data_hide) {
	            $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);
	        }
	        if (config.legend_hide) {
	            $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);
	        }

	        // when gauge, hide legend // TODO: fix
	        if ($$.hasType('gauge')) {
	            config.legend_show = false;
	        }

	        // Init sizes and scales
	        $$.updateSizes();
	        $$.updateScales();

	        // Set domains for each scale
	        $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));
	        $$.y.domain($$.getYDomain($$.data.targets, 'y'));
	        $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));
	        $$.subX.domain($$.x.domain());
	        $$.subY.domain($$.y.domain());
	        $$.subY2.domain($$.y2.domain());

	        // Save original x domain for zoom update
	        $$.orgXDomain = $$.x.domain();

	        // Set initialized scales to brush and zoom
	        if ($$.brush) { $$.brush.scale($$.subX); }
	        if (config.zoom_enabled) { $$.zoom.scale($$.x); }

	        /*-- Basic Elements --*/

	        // Define svgs
	        $$.svg = $$.selectChart.append("svg")
	            .style("overflow", "hidden")
	            .on('mouseenter', function () { return config.onmouseover.call($$); })
	            .on('mouseleave', function () { return config.onmouseout.call($$); });

	        if ($$.config.svg_classname) {
	            $$.svg.attr('class', $$.config.svg_classname);
	        }

	        // Define defs
	        defs = $$.svg.append("defs");
	        $$.clipChart = $$.appendClip(defs, $$.clipId);
	        $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);
	        $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);
	        $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);
	        $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);
	        $$.updateSvgSize();

	        // Define regions
	        main = $$.main = $$.svg.append("g").attr("transform", $$.getTranslate('main'));

	        if ($$.initSubchart) { $$.initSubchart(); }
	        if ($$.initTooltip) { $$.initTooltip(); }
	        if ($$.initLegend) { $$.initLegend(); }
	        if ($$.initTitle) { $$.initTitle(); }

	        /*-- Main Region --*/

	        // text when empty
	        main.append("text")
	            .attr("class", CLASS.text + ' ' + CLASS.empty)
	            .attr("text-anchor", "middle") // horizontal centering of text at x position in all browsers.
	            .attr("dominant-baseline", "middle"); // vertical centering of text at y position in all browsers, except IE.

	        // Regions
	        $$.initRegion();

	        // Grids
	        $$.initGrid();

	        // Define g for chart area
	        main.append('g')
	            .attr("clip-path", $$.clipPath)
	            .attr('class', CLASS.chart);

	        // Grid lines
	        if (config.grid_lines_front) { $$.initGridLines(); }

	        // Cover whole with rects for events
	        $$.initEventRect();

	        // Define g for chart
	        $$.initChartElements();

	        // if zoom privileged, insert rect to forefront
	        // TODO: is this needed?
	        main.insert('rect', config.zoom_privileged ? null : 'g.' + CLASS.regions)
	            .attr('class', CLASS.zoomRect)
	            .attr('width', $$.width)
	            .attr('height', $$.height)
	            .style('opacity', 0)
	            .on("dblclick.zoom", null);

	        // Set default extent if defined
	        if (config.axis_x_extent) { $$.brush.extent($$.getDefaultExtent()); }

	        // Add Axis
	        $$.axis.init();

	        // Set targets
	        $$.updateTargets($$.data.targets);

	        // Draw with targets
	        if (binding) {
	            $$.updateDimension();
	            $$.config.oninit.call($$);
	            $$.redraw({
	                withTransition: false,
	                withTransform: true,
	                withUpdateXDomain: true,
	                withUpdateOrgXDomain: true,
	                withTransitionForAxis: false
	            });
	        }

	        // Bind resize event
	        $$.bindResize();

	        // export element of the chart
	        $$.api.element = $$.selectChart.node();
	    };

	    c3_chart_internal_fn.smoothLines = function (el, type) {
	        var $$ = this;
	        if (type === 'grid') {
	            el.each(function () {
	                var g = $$.d3.select(this),
	                    x1 = g.attr('x1'),
	                    x2 = g.attr('x2'),
	                    y1 = g.attr('y1'),
	                    y2 = g.attr('y2');
	                g.attr({
	                    'x1': Math.ceil(x1),
	                    'x2': Math.ceil(x2),
	                    'y1': Math.ceil(y1),
	                    'y2': Math.ceil(y2)
	                });
	            });
	        }
	    };


	    c3_chart_internal_fn.updateSizes = function () {
	        var $$ = this, config = $$.config;
	        var legendHeight = $$.legend ? $$.getLegendHeight() : 0,
	            legendWidth = $$.legend ? $$.getLegendWidth() : 0,
	            legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight,
	            hasArc = $$.hasArcType(),
	            xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'),
	            subchartHeight = config.subchart_show && !hasArc ? (config.subchart_size_height + xAxisHeight) : 0;

	        $$.currentWidth = $$.getCurrentWidth();
	        $$.currentHeight = $$.getCurrentHeight();

	        // for main
	        $$.margin = config.axis_rotated ? {
	            top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),
	            right: hasArc ? 0 : $$.getCurrentPaddingRight(),
	            bottom: $$.getHorizontalAxisHeight('y') + legendHeightForBottom + $$.getCurrentPaddingBottom(),
	            left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())
	        } : {
	            top: 4 + $$.getCurrentPaddingTop(), // for top tick text
	            right: hasArc ? 0 : $$.getCurrentPaddingRight(),
	            bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),
	            left: hasArc ? 0 : $$.getCurrentPaddingLeft()
	        };

	        // for subchart
	        $$.margin2 = config.axis_rotated ? {
	            top: $$.margin.top,
	            right: NaN,
	            bottom: 20 + legendHeightForBottom,
	            left: $$.rotated_padding_left
	        } : {
	            top: $$.currentHeight - subchartHeight - legendHeightForBottom,
	            right: NaN,
	            bottom: xAxisHeight + legendHeightForBottom,
	            left: $$.margin.left
	        };

	        // for legend
	        $$.margin3 = {
	            top: 0,
	            right: NaN,
	            bottom: 0,
	            left: 0
	        };
	        if ($$.updateSizeForLegend) { $$.updateSizeForLegend(legendHeight, legendWidth); }

	        $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;
	        $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;
	        if ($$.width < 0) { $$.width = 0; }
	        if ($$.height < 0) { $$.height = 0; }

	        $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;
	        $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;
	        if ($$.width2 < 0) { $$.width2 = 0; }
	        if ($$.height2 < 0) { $$.height2 = 0; }

	        // for arc
	        $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);
	        $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);
	        if ($$.hasType('gauge') && !config.gauge_fullCircle) {
	            $$.arcHeight += $$.height - $$.getGaugeLabelHeight();
	        }
	        if ($$.updateRadius) { $$.updateRadius(); }

	        if ($$.isLegendRight && hasArc) {
	            $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;
	        }
	    };

	    c3_chart_internal_fn.updateTargets = function (targets) {
	        var $$ = this;

	        /*-- Main --*/

	        //-- Text --//
	        $$.updateTargetsForText(targets);

	        //-- Bar --//
	        $$.updateTargetsForBar(targets);

	        //-- Line --//
	        $$.updateTargetsForLine(targets);

	        //-- Arc --//
	        if ($$.hasArcType() && $$.updateTargetsForArc) { $$.updateTargetsForArc(targets); }

	        /*-- Sub --*/

	        if ($$.updateTargetsForSubchart) { $$.updateTargetsForSubchart(targets); }

	        // Fade-in each chart
	        $$.showTargets();
	    };
	    c3_chart_internal_fn.showTargets = function () {
	        var $$ = this;
	        $$.svg.selectAll('.' + CLASS.target).filter(function (d) { return $$.isTargetToShow(d.id); })
	          .transition().duration($$.config.transition_duration)
	            .style("opacity", 1);
	    };

	    c3_chart_internal_fn.redraw = function (options, transitions) {
	        var $$ = this, main = $$.main, d3 = $$.d3, config = $$.config;
	        var areaIndices = $$.getShapeIndices($$.isAreaType), barIndices = $$.getShapeIndices($$.isBarType), lineIndices = $$.getShapeIndices($$.isLineType);
	        var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis,
	            withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend,
	            withEventRect, withDimension, withUpdateXAxis;
	        var hideAxis = $$.hasArcType();
	        var drawArea, drawBar, drawLine, xForText, yForText;
	        var duration, durationForExit, durationForAxis;
	        var waitForDraw, flow;
	        var targetsToShow = $$.filterTargetsToShow($$.data.targets), tickValues, i, intervalForCulling, xDomainForZoom;
	        var xv = $$.xv.bind($$), cx, cy;

	        options = options || {};
	        withY = getOption(options, "withY", true);
	        withSubchart = getOption(options, "withSubchart", true);
	        withTransition = getOption(options, "withTransition", true);
	        withTransform = getOption(options, "withTransform", false);
	        withUpdateXDomain = getOption(options, "withUpdateXDomain", false);
	        withUpdateOrgXDomain = getOption(options, "withUpdateOrgXDomain", false);
	        withTrimXDomain = getOption(options, "withTrimXDomain", true);
	        withUpdateXAxis = getOption(options, "withUpdateXAxis", withUpdateXDomain);
	        withLegend = getOption(options, "withLegend", false);
	        withEventRect = getOption(options, "withEventRect", true);
	        withDimension = getOption(options, "withDimension", true);
	        withTransitionForExit = getOption(options, "withTransitionForExit", withTransition);
	        withTransitionForAxis = getOption(options, "withTransitionForAxis", withTransition);

	        duration = withTransition ? config.transition_duration : 0;
	        durationForExit = withTransitionForExit ? duration : 0;
	        durationForAxis = withTransitionForAxis ? duration : 0;

	        transitions = transitions || $$.axis.generateTransitions(durationForAxis);

	        // update legend and transform each g
	        if (withLegend && config.legend_show) {
	            $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);
	        } else if (withDimension) {
	            // need to update dimension (e.g. axis.y.tick.values) because y tick values should change
	            // no need to update axis in it because they will be updated in redraw()
	            $$.updateDimension(true);
	        }

	        // MEMO: needed for grids calculation
	        if ($$.isCategorized() && targetsToShow.length === 0) {
	            $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);
	        }

	        if (targetsToShow.length) {
	            $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);
	            if (!config.axis_x_tick_values) {
	                tickValues = $$.axis.updateXAxisTickValues(targetsToShow);
	            }
	        } else {
	            $$.xAxis.tickValues([]);
	            $$.subXAxis.tickValues([]);
	        }

	        if (config.zoom_rescale && !options.flow) {
	            xDomainForZoom = $$.x.orgDomain();
	        }

	        $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));
	        $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));

	        if (!config.axis_y_tick_values && config.axis_y_tick_count) {
	            $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));
	        }
	        if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {
	            $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));
	        }

	        // axes
	        $$.axis.redraw(transitions, hideAxis);

	        // Update axis label
	        $$.axis.updateLabels(withTransition);

	        // show/hide if manual culling needed
	        if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {
	            if (config.axis_x_tick_culling && tickValues) {
	                for (i = 1; i < tickValues.length; i++) {
	                    if (tickValues.length / i < config.axis_x_tick_culling_max) {
	                        intervalForCulling = i;
	                        break;
	                    }
	                }
	                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {
	                    var index = tickValues.indexOf(e);
	                    if (index >= 0) {
	                        d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');
	                    }
	                });
	            } else {
	                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').style('display', 'block');
	            }
	        }

	        // setup drawer - MEMO: these must be called after axis updated
	        drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : undefined;
	        drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;
	        drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : undefined;
	        xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);
	        yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);

	        // Update sub domain
	        if (withY) {
	            $$.subY.domain($$.getYDomain(targetsToShow, 'y'));
	            $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));
	        }

	        // xgrid focus
	        $$.updateXgridFocus();

	        // Data empty label positioning and text.
	        main.select("text." + CLASS.text + '.' + CLASS.empty)
	            .attr("x", $$.width / 2)
	            .attr("y", $$.height / 2)
	            .text(config.data_empty_label_text)
	          .transition()
	            .style('opacity', targetsToShow.length ? 0 : 1);

	        // grid
	        $$.updateGrid(duration);

	        // rect for regions
	        $$.updateRegion(duration);

	        // bars
	        $$.updateBar(durationForExit);

	        // lines, areas and cricles
	        $$.updateLine(durationForExit);
	        $$.updateArea(durationForExit);
	        $$.updateCircle();

	        // text
	        if ($$.hasDataLabel()) {
	            $$.updateText(durationForExit);
	        }

	        // title
	        if ($$.redrawTitle) { $$.redrawTitle(); }

	        // arc
	        if ($$.redrawArc) { $$.redrawArc(duration, durationForExit, withTransform); }

	        // subchart
	        if ($$.redrawSubchart) {
	            $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);
	        }

	        // circles for select
	        main.selectAll('.' + CLASS.selectedCircles)
	            .filter($$.isBarType.bind($$))
	            .selectAll('circle')
	            .remove();

	        // event rects will redrawn when flow called
	        if (config.interaction_enabled && !options.flow && withEventRect) {
	            $$.redrawEventRect();
	            if ($$.updateZoom) { $$.updateZoom(); }
	        }

	        // update circleY based on updated parameters
	        $$.updateCircleY();

	        // generate circle x/y functions depending on updated params
	        cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);
	        cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);

	        if (options.flow) {
	            flow = $$.generateFlow({
	                targets: targetsToShow,
	                flow: options.flow,
	                duration: options.flow.duration,
	                drawBar: drawBar,
	                drawLine: drawLine,
	                drawArea: drawArea,
	                cx: cx,
	                cy: cy,
	                xv: xv,
	                xForText: xForText,
	                yForText: yForText
	            });
	        }

	        if ((duration || flow) && $$.isTabVisible()) { // Only use transition if tab visible. See #938.
	            // transition should be derived from one transition
	            d3.transition().duration(duration).each(function () {
	                var transitionsToWait = [];

	                // redraw and gather transitions
	                [
	                    $$.redrawBar(drawBar, true),
	                    $$.redrawLine(drawLine, true),
	                    $$.redrawArea(drawArea, true),
	                    $$.redrawCircle(cx, cy, true),
	                    $$.redrawText(xForText, yForText, options.flow, true),
	                    $$.redrawRegion(true),
	                    $$.redrawGrid(true),
	                ].forEach(function (transitions) {
	                    transitions.forEach(function (transition) {
	                        transitionsToWait.push(transition);
	                    });
	                });

	                // Wait for end of transitions to call flow and onrendered callback
	                waitForDraw = $$.generateWait();
	                transitionsToWait.forEach(function (t) {
	                    waitForDraw.add(t);
	                });
	            })
	            .call(waitForDraw, function () {
	                if (flow) {
	                    flow();
	                }
	                if (config.onrendered) {
	                    config.onrendered.call($$);
	                }
	            });
	        }
	        else {
	            $$.redrawBar(drawBar);
	            $$.redrawLine(drawLine);
	            $$.redrawArea(drawArea);
	            $$.redrawCircle(cx, cy);
	            $$.redrawText(xForText, yForText, options.flow);
	            $$.redrawRegion();
	            $$.redrawGrid();
	            if (config.onrendered) {
	                config.onrendered.call($$);
	            }
	        }

	        // update fadein condition
	        $$.mapToIds($$.data.targets).forEach(function (id) {
	            $$.withoutFadeIn[id] = true;
	        });
	    };

	    c3_chart_internal_fn.updateAndRedraw = function (options) {
	        var $$ = this, config = $$.config, transitions;
	        options = options || {};
	        // same with redraw
	        options.withTransition = getOption(options, "withTransition", true);
	        options.withTransform = getOption(options, "withTransform", false);
	        options.withLegend = getOption(options, "withLegend", false);
	        // NOT same with redraw
	        options.withUpdateXDomain = true;
	        options.withUpdateOrgXDomain = true;
	        options.withTransitionForExit = false;
	        options.withTransitionForTransform = getOption(options, "withTransitionForTransform", options.withTransition);
	        // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)
	        $$.updateSizes();
	        // MEMO: called in updateLegend in redraw if withLegend
	        if (!(options.withLegend && config.legend_show)) {
	            transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);
	            // Update scales
	            $$.updateScales();
	            $$.updateSvgSize();
	            // Update g positions
	            $$.transformAll(options.withTransitionForTransform, transitions);
	        }
	        // Draw with new sizes & scales
	        $$.redraw(options, transitions);
	    };
	    c3_chart_internal_fn.redrawWithoutRescale = function () {
	        this.redraw({
	            withY: false,
	            withSubchart: false,
	            withEventRect: false,
	            withTransitionForAxis: false
	        });
	    };

	    c3_chart_internal_fn.isTimeSeries = function () {
	        return this.config.axis_x_type === 'timeseries';
	    };
	    c3_chart_internal_fn.isCategorized = function () {
	        return this.config.axis_x_type.indexOf('categor') >= 0;
	    };
	    c3_chart_internal_fn.isCustomX = function () {
	        var $$ = this, config = $$.config;
	        return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));
	    };

	    c3_chart_internal_fn.isTimeSeriesY = function () {
	        return this.config.axis_y_type === 'timeseries';
	    };

	    c3_chart_internal_fn.getTranslate = function (target) {
	        var $$ = this, config = $$.config, x, y;
	        if (target === 'main') {
	            x = asHalfPixel($$.margin.left);
	            y = asHalfPixel($$.margin.top);
	        } else if (target === 'context') {
	            x = asHalfPixel($$.margin2.left);
	            y = asHalfPixel($$.margin2.top);
	        } else if (target === 'legend') {
	            x = $$.margin3.left;
	            y = $$.margin3.top;
	        } else if (target === 'x') {
	            x = 0;
	            y = config.axis_rotated ? 0 : $$.height;
	        } else if (target === 'y') {
	            x = 0;
	            y = config.axis_rotated ? $$.height : 0;
	        } else if (target === 'y2') {
	            x = config.axis_rotated ? 0 : $$.width;
	            y = config.axis_rotated ? 1 : 0;
	        } else if (target === 'subx') {
	            x = 0;
	            y = config.axis_rotated ? 0 : $$.height2;
	        } else if (target === 'arc') {
	            x = $$.arcWidth / 2;
	            y = $$.arcHeight / 2;
	        }
	        return "translate(" + x + "," + y + ")";
	    };
	    c3_chart_internal_fn.initialOpacity = function (d) {
	        return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;
	    };
	    c3_chart_internal_fn.initialOpacityForCircle = function (d) {
	        return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;
	    };
	    c3_chart_internal_fn.opacityForCircle = function (d) {
	        var opacity = this.config.point_show ? 1 : 0;
	        return isValue(d.value) ? (this.isScatterType(d) ? 0.5 : opacity) : 0;
	    };
	    c3_chart_internal_fn.opacityForText = function () {
	        return this.hasDataLabel() ? 1 : 0;
	    };
	    c3_chart_internal_fn.xx = function (d) {
	        return d ? this.x(d.x) : null;
	    };
	    c3_chart_internal_fn.xv = function (d) {
	        var $$ = this, value = d.value;
	        if ($$.isTimeSeries()) {
	            value = $$.parseDate(d.value);
	        }
	        else if ($$.isCategorized() && typeof d.value === 'string') {
	            value = $$.config.axis_x_categories.indexOf(d.value);
	        }
	        return Math.ceil($$.x(value));
	    };
	    c3_chart_internal_fn.yv = function (d) {
	        var $$ = this,
	            yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;
	        return Math.ceil(yScale(d.value));
	    };
	    c3_chart_internal_fn.subxx = function (d) {
	        return d ? this.subX(d.x) : null;
	    };

	    c3_chart_internal_fn.transformMain = function (withTransition, transitions) {
	        var $$ = this,
	            xAxis, yAxis, y2Axis;
	        if (transitions && transitions.axisX) {
	            xAxis = transitions.axisX;
	        } else {
	            xAxis  = $$.main.select('.' + CLASS.axisX);
	            if (withTransition) { xAxis = xAxis.transition(); }
	        }
	        if (transitions && transitions.axisY) {
	            yAxis = transitions.axisY;
	        } else {
	            yAxis = $$.main.select('.' + CLASS.axisY);
	            if (withTransition) { yAxis = yAxis.transition(); }
	        }
	        if (transitions && transitions.axisY2) {
	            y2Axis = transitions.axisY2;
	        } else {
	            y2Axis = $$.main.select('.' + CLASS.axisY2);
	            if (withTransition) { y2Axis = y2Axis.transition(); }
	        }
	        (withTransition ? $$.main.transition() : $$.main).attr("transform", $$.getTranslate('main'));
	        xAxis.attr("transform", $$.getTranslate('x'));
	        yAxis.attr("transform", $$.getTranslate('y'));
	        y2Axis.attr("transform", $$.getTranslate('y2'));
	        $$.main.select('.' + CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
	    };
	    c3_chart_internal_fn.transformAll = function (withTransition, transitions) {
	        var $$ = this;
	        $$.transformMain(withTransition, transitions);
	        if ($$.config.subchart_show) { $$.transformContext(withTransition, transitions); }
	        if ($$.legend) { $$.transformLegend(withTransition); }
	    };

	    c3_chart_internal_fn.updateSvgSize = function () {
	        var $$ = this,
	            brush = $$.svg.select(".c3-brush .background");
	        $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);
	        $$.svg.selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid]).select('rect')
	            .attr('width', $$.width)
	            .attr('height', $$.height);
	        $$.svg.select('#' + $$.clipIdForXAxis).select('rect')
	            .attr('x', $$.getXAxisClipX.bind($$))
	            .attr('y', $$.getXAxisClipY.bind($$))
	            .attr('width', $$.getXAxisClipWidth.bind($$))
	            .attr('height', $$.getXAxisClipHeight.bind($$));
	        $$.svg.select('#' + $$.clipIdForYAxis).select('rect')
	            .attr('x', $$.getYAxisClipX.bind($$))
	            .attr('y', $$.getYAxisClipY.bind($$))
	            .attr('width', $$.getYAxisClipWidth.bind($$))
	            .attr('height', $$.getYAxisClipHeight.bind($$));
	        $$.svg.select('#' + $$.clipIdForSubchart).select('rect')
	            .attr('width', $$.width)
	            .attr('height', brush.size() ? brush.attr('height') : 0);
	        $$.svg.select('.' + CLASS.zoomRect)
	            .attr('width', $$.width)
	            .attr('height', $$.height);
	        // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>
	        $$.selectChart.style('max-height', $$.currentHeight + "px");
	    };


	    c3_chart_internal_fn.updateDimension = function (withoutAxis) {
	        var $$ = this;
	        if (!withoutAxis) {
	            if ($$.config.axis_rotated) {
	                $$.axes.x.call($$.xAxis);
	                $$.axes.subx.call($$.subXAxis);
	            } else {
	                $$.axes.y.call($$.yAxis);
	                $$.axes.y2.call($$.y2Axis);
	            }
	        }
	        $$.updateSizes();
	        $$.updateScales();
	        $$.updateSvgSize();
	        $$.transformAll(false);
	    };

	    c3_chart_internal_fn.observeInserted = function (selection) {
	        var $$ = this, observer;
	        if (typeof MutationObserver === 'undefined') {
	            window.console.error("MutationObserver not defined.");
	            return;
	        }
	        observer= new MutationObserver(function (mutations) {
	            mutations.forEach(function (mutation) {
	                if (mutation.type === 'childList' && mutation.previousSibling) {
	                    observer.disconnect();
	                    // need to wait for completion of load because size calculation requires the actual sizes determined after that completion
	                    $$.intervalForObserveInserted = window.setInterval(function () {
	                        // parentNode will NOT be null when completed
	                        if (selection.node().parentNode) {
	                            window.clearInterval($$.intervalForObserveInserted);
	                            $$.updateDimension();
	                            if ($$.brush) { $$.brush.update(); }
	                            $$.config.oninit.call($$);
	                            $$.redraw({
	                                withTransform: true,
	                                withUpdateXDomain: true,
	                                withUpdateOrgXDomain: true,
	                                withTransition: false,
	                                withTransitionForTransform: false,
	                                withLegend: true
	                            });
	                            selection.transition().style('opacity', 1);
	                        }
	                    }, 10);
	                }
	            });
	        });
	        observer.observe(selection.node(), {attributes: true, childList: true, characterData: true});
	    };

	    c3_chart_internal_fn.bindResize = function () {
	        var $$ = this, config = $$.config;

	        $$.resizeFunction = $$.generateResize();

	        $$.resizeFunction.add(function () {
	            config.onresize.call($$);
	        });
	        if (config.resize_auto) {
	            $$.resizeFunction.add(function () {
	                if ($$.resizeTimeout !== undefined) {
	                    window.clearTimeout($$.resizeTimeout);
	                }
	                $$.resizeTimeout = window.setTimeout(function () {
	                    delete $$.resizeTimeout;
	                    $$.api.flush();
	                }, 100);
	            });
	        }
	        $$.resizeFunction.add(function () {
	            config.onresized.call($$);
	        });

	        if (window.attachEvent) {
	            window.attachEvent('onresize', $$.resizeFunction);
	        } else if (window.addEventListener) {
	            window.addEventListener('resize', $$.resizeFunction, false);
	        } else {
	            // fallback to this, if this is a very old browser
	            var wrapper = window.onresize;
	            if (!wrapper) {
	                // create a wrapper that will call all charts
	                wrapper = $$.generateResize();
	            } else if (!wrapper.add || !wrapper.remove) {
	                // there is already a handler registered, make sure we call it too
	                wrapper = $$.generateResize();
	                wrapper.add(window.onresize);
	            }
	            // add this graph to the wrapper, we will be removed if the user calls destroy
	            wrapper.add($$.resizeFunction);
	            window.onresize = wrapper;
	        }
	    };

	    c3_chart_internal_fn.generateResize = function () {
	        var resizeFunctions = [];
	        function callResizeFunctions() {
	            resizeFunctions.forEach(function (f) {
	                f();
	            });
	        }
	        callResizeFunctions.add = function (f) {
	            resizeFunctions.push(f);
	        };
	        callResizeFunctions.remove = function (f) {
	            for (var i = 0; i < resizeFunctions.length; i++) {
	                if (resizeFunctions[i] === f) {
	                    resizeFunctions.splice(i, 1);
	                    break;
	                }
	            }
	        };
	        return callResizeFunctions;
	    };

	    c3_chart_internal_fn.endall = function (transition, callback) {
	        var n = 0;
	        transition
	            .each(function () { ++n; })
	            .each("end", function () {
	                if (!--n) { callback.apply(this, arguments); }
	            });
	    };
	    c3_chart_internal_fn.generateWait = function () {
	        var transitionsToWait = [],
	            f = function (transition, callback) {
	                var timer = setInterval(function () {
	                    var done = 0;
	                    transitionsToWait.forEach(function (t) {
	                        if (t.empty()) {
	                            done += 1;
	                            return;
	                        }
	                        try {
	                            t.transition();
	                        } catch (e) {
	                            done += 1;
	                        }
	                    });
	                    if (done === transitionsToWait.length) {
	                        clearInterval(timer);
	                        if (callback) { callback(); }
	                    }
	                }, 10);
	            };
	        f.add = function (transition) {
	            transitionsToWait.push(transition);
	        };
	        return f;
	    };

	    c3_chart_internal_fn.parseDate = function (date) {
	        var $$ = this, parsedDate;
	        if (date instanceof Date) {
	            parsedDate = date;
	        } else if (typeof date === 'string') {
	            parsedDate = $$.dataTimeFormat($$.config.data_xFormat).parse(date);
	        } else if (typeof date === 'number' && !isNaN(date)) {
	            parsedDate = new Date(+date);
	        }
	        if (!parsedDate || isNaN(+parsedDate)) {
	            window.console.error("Failed to parse x '" + date + "' to Date object");
	        }
	        return parsedDate;
	    };

	    c3_chart_internal_fn.isTabVisible = function () {
	        var hidden;
	        if (typeof document.hidden !== "undefined") { // Opera 12.10 and Firefox 18 and later support
	            hidden = "hidden";
	        } else if (typeof document.mozHidden !== "undefined") {
	            hidden = "mozHidden";
	        } else if (typeof document.msHidden !== "undefined") {
	            hidden = "msHidden";
	        } else if (typeof document.webkitHidden !== "undefined") {
	            hidden = "webkitHidden";
	        }

	        return document[hidden] ? false : true;
	    };

	    c3_chart_internal_fn.getDefaultConfig = function () {
	        var config = {
	            bindto: '#chart',
	            svg_classname: undefined,
	            size_width: undefined,
	            size_height: undefined,
	            padding_left: undefined,
	            padding_right: undefined,
	            padding_top: undefined,
	            padding_bottom: undefined,
	            resize_auto: true,
	            zoom_enabled: false,
	            zoom_extent: undefined,
	            zoom_privileged: false,
	            zoom_rescale: false,
	            zoom_onzoom: function () {},
	            zoom_onzoomstart: function () {},
	            zoom_onzoomend: function () {},
	            zoom_x_min: undefined,
	            zoom_x_max: undefined,
	            interaction_brighten: true,
	            interaction_enabled: true,
	            onmouseover: function () {},
	            onmouseout: function () {},
	            onresize: function () {},
	            onresized: function () {},
	            oninit: function () {},
	            onrendered: function () {},
	            transition_duration: 350,
	            data_x: undefined,
	            data_xs: {},
	            data_xFormat: '%Y-%m-%d',
	            data_xLocaltime: true,
	            data_xSort: true,
	            data_idConverter: function (id) { return id; },
	            data_names: {},
	            data_classes: {},
	            data_groups: [],
	            data_axes: {},
	            data_type: undefined,
	            data_types: {},
	            data_labels: {},
	            data_order: 'desc',
	            data_regions: {},
	            data_color: undefined,
	            data_colors: {},
	            data_hide: false,
	            data_filter: undefined,
	            data_selection_enabled: false,
	            data_selection_grouped: false,
	            data_selection_isselectable: function () { return true; },
	            data_selection_multiple: true,
	            data_selection_draggable: false,
	            data_onclick: function () {},
	            data_onmouseover: function () {},
	            data_onmouseout: function () {},
	            data_onselected: function () {},
	            data_onunselected: function () {},
	            data_url: undefined,
	            data_headers: undefined,
	            data_json: undefined,
	            data_rows: undefined,
	            data_columns: undefined,
	            data_mimeType: undefined,
	            data_keys: undefined,
	            // configuration for no plot-able data supplied.
	            data_empty_label_text: "",
	            // subchart
	            subchart_show: false,
	            subchart_size_height: 60,
	            subchart_axis_x_show: true,
	            subchart_onbrush: function () {},
	            // color
	            color_pattern: [],
	            color_threshold: {},
	            // legend
	            legend_show: true,
	            legend_hide: false,
	            legend_position: 'bottom',
	            legend_inset_anchor: 'top-left',
	            legend_inset_x: 10,
	            legend_inset_y: 0,
	            legend_inset_step: undefined,
	            legend_item_onclick: undefined,
	            legend_item_onmouseover: undefined,
	            legend_item_onmouseout: undefined,
	            legend_equally: false,
	            legend_padding: 0,
	            legend_item_tile_width: 10,
	            legend_item_tile_height: 10,
	            // axis
	            axis_rotated: false,
	            axis_x_show: true,
	            axis_x_type: 'indexed',
	            axis_x_localtime: true,
	            axis_x_categories: [],
	            axis_x_tick_centered: false,
	            axis_x_tick_format: undefined,
	            axis_x_tick_culling: {},
	            axis_x_tick_culling_max: 10,
	            axis_x_tick_count: undefined,
	            axis_x_tick_fit: true,
	            axis_x_tick_values: null,
	            axis_x_tick_rotate: 0,
	            axis_x_tick_outer: true,
	            axis_x_tick_multiline: true,
	            axis_x_tick_width: null,
	            axis_x_max: undefined,
	            axis_x_min: undefined,
	            axis_x_padding: {},
	            axis_x_height: undefined,
	            axis_x_extent: undefined,
	            axis_x_label: {},
	            axis_y_show: true,
	            axis_y_type: undefined,
	            axis_y_max: undefined,
	            axis_y_min: undefined,
	            axis_y_inverted: false,
	            axis_y_center: undefined,
	            axis_y_inner: undefined,
	            axis_y_label: {},
	            axis_y_tick_format: undefined,
	            axis_y_tick_outer: true,
	            axis_y_tick_values: null,        
	            axis_y_tick_rotate: 0,
	            axis_y_tick_count: undefined,
	            axis_y_tick_time_value: undefined,
	            axis_y_tick_time_interval: undefined,
	            axis_y_padding: {},
	            axis_y_default: undefined,
	            axis_y2_show: false,
	            axis_y2_max: undefined,
	            axis_y2_min: undefined,
	            axis_y2_inverted: false,
	            axis_y2_center: undefined,
	            axis_y2_inner: undefined,
	            axis_y2_label: {},
	            axis_y2_tick_format: undefined,
	            axis_y2_tick_outer: true,
	            axis_y2_tick_values: null,
	            axis_y2_tick_count: undefined,
	            axis_y2_padding: {},
	            axis_y2_default: undefined,
	            // grid
	            grid_x_show: false,
	            grid_x_type: 'tick',
	            grid_x_lines: [],
	            grid_y_show: false,
	            // not used
	            // grid_y_type: 'tick',
	            grid_y_lines: [],
	            grid_y_ticks: 10,
	            grid_focus_show: true,
	            grid_lines_front: true,
	            // point - point of each data
	            point_show: true,
	            point_r: 2.5,
	            point_sensitivity: 10,
	            point_focus_expand_enabled: true,
	            point_focus_expand_r: undefined,
	            point_select_r: undefined,
	            // line
	            line_connectNull: false,
	            line_step_type: 'step',
	            // bar
	            bar_width: undefined,
	            bar_width_ratio: 0.6,
	            bar_width_max: undefined,
	            bar_zerobased: true,
	            // area
	            area_zerobased: true,
	            area_above: false,
	            // pie
	            pie_label_show: true,
	            pie_label_format: undefined,
	            pie_label_threshold: 0.05,
	            pie_label_ratio: undefined,
	            pie_expand: {},
	            pie_expand_duration: 50,
	            // gauge
	            gauge_fullCircle: false,
	            gauge_label_show: true,
	            gauge_label_format: undefined,
	            gauge_min: 0,
	            gauge_max: 100,
	            gauge_startingAngle: -1 * Math.PI/2,
	            gauge_units: undefined,
	            gauge_width: undefined,
	            gauge_expand: {},
	            gauge_expand_duration: 50,
	            // donut
	            donut_label_show: true,
	            donut_label_format: undefined,
	            donut_label_threshold: 0.05,
	            donut_label_ratio: undefined,
	            donut_width: undefined,
	            donut_title: "",
	            donut_expand: {},
	            donut_expand_duration: 50,
	            // spline
	            spline_interpolation_type: 'cardinal',
	            // region - region to change style
	            regions: [],
	            // tooltip - show when mouseover on each data
	            tooltip_show: true,
	            tooltip_grouped: true,
	            tooltip_format_title: undefined,
	            tooltip_format_name: undefined,
	            tooltip_format_value: undefined,
	            tooltip_position: undefined,
	            tooltip_contents: function (d, defaultTitleFormat, defaultValueFormat, color) {
	                return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';
	            },
	            tooltip_init_show: false,
	            tooltip_init_x: 0,
	            tooltip_init_position: {top: '0px', left: '50px'},
	            tooltip_onshow: function () {},
	            tooltip_onhide: function () {},
	            // title
	            title_text: undefined,
	            title_padding: {
	                top: 0,
	                right: 0,
	                bottom: 0,
	                left: 0
	            },
	            title_position: 'top-center',
	        };

	        Object.keys(this.additionalConfig).forEach(function (key) {
	            config[key] = this.additionalConfig[key];
	        }, this);

	        return config;
	    };
	    c3_chart_internal_fn.additionalConfig = {};

	    c3_chart_internal_fn.loadConfig = function (config) {
	        var this_config = this.config, target, keys, read;
	        function find() {
	            var key = keys.shift();
	    //        console.log("key =>", key, ", target =>", target);
	            if (key && target && typeof target === 'object' && key in target) {
	                target = target[key];
	                return find();
	            }
	            else if (!key) {
	                return target;
	            }
	            else {
	                return undefined;
	            }
	        }
	        Object.keys(this_config).forEach(function (key) {
	            target = config;
	            keys = key.split('_');
	            read = find();
	    //        console.log("CONFIG : ", key, read);
	            if (isDefined(read)) {
	                this_config[key] = read;
	            }
	        });
	    };

	    c3_chart_internal_fn.getScale = function (min, max, forTimeseries) {
	        return (forTimeseries ? this.d3.time.scale() : this.d3.scale.linear()).range([min, max]);
	    };
	    c3_chart_internal_fn.getX = function (min, max, domain, offset) {
	        var $$ = this,
	            scale = $$.getScale(min, max, $$.isTimeSeries()),
	            _scale = domain ? scale.domain(domain) : scale, key;
	        // Define customized scale if categorized axis
	        if ($$.isCategorized()) {
	            offset = offset || function () { return 0; };
	            scale = function (d, raw) {
	                var v = _scale(d) + offset(d);
	                return raw ? v : Math.ceil(v);
	            };
	        } else {
	            scale = function (d, raw) {
	                var v = _scale(d);
	                return raw ? v : Math.ceil(v);
	            };
	        }
	        // define functions
	        for (key in _scale) {
	            scale[key] = _scale[key];
	        }
	        scale.orgDomain = function () {
	            return _scale.domain();
	        };
	        // define custom domain() for categorized axis
	        if ($$.isCategorized()) {
	            scale.domain = function (domain) {
	                if (!arguments.length) {
	                    domain = this.orgDomain();
	                    return [domain[0], domain[1] + 1];
	                }
	                _scale.domain(domain);
	                return scale;
	            };
	        }
	        return scale;
	    };
	    c3_chart_internal_fn.getY = function (min, max, domain) {
	        var scale = this.getScale(min, max, this.isTimeSeriesY());
	        if (domain) { scale.domain(domain); }
	        return scale;
	    };
	    c3_chart_internal_fn.getYScale = function (id) {
	        return this.axis.getId(id) === 'y2' ? this.y2 : this.y;
	    };
	    c3_chart_internal_fn.getSubYScale = function (id) {
	        return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;
	    };
	    c3_chart_internal_fn.updateScales = function () {
	        var $$ = this, config = $$.config,
	            forInit = !$$.x;
	        // update edges
	        $$.xMin = config.axis_rotated ? 1 : 0;
	        $$.xMax = config.axis_rotated ? $$.height : $$.width;
	        $$.yMin = config.axis_rotated ? 0 : $$.height;
	        $$.yMax = config.axis_rotated ? $$.width : 1;
	        $$.subXMin = $$.xMin;
	        $$.subXMax = $$.xMax;
	        $$.subYMin = config.axis_rotated ? 0 : $$.height2;
	        $$.subYMax = config.axis_rotated ? $$.width2 : 1;
	        // update scales
	        $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () { return $$.xAxis.tickOffset(); });
	        $$.y = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y_default : $$.y.domain());
	        $$.y2 = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y2_default : $$.y2.domain());
	        $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) { return d % 1 ? 0 : $$.subXAxis.tickOffset(); });
	        $$.subY = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y_default : $$.subY.domain());
	        $$.subY2 = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y2_default : $$.subY2.domain());
	        // update axes
	        $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();
	        $$.xAxisTickValues = $$.axis.getXAxisTickValues();
	        $$.yAxisTickValues = $$.axis.getYAxisTickValues();
	        $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();

	        $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
	        $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
	        $$.yAxis = $$.axis.getYAxis($$.y, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, config.axis_y_tick_outer);
	        $$.y2Axis = $$.axis.getYAxis($$.y2, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, config.axis_y2_tick_outer);

	        // Set initialized scales to brush and zoom
	        if (!forInit) {
	            if ($$.brush) { $$.brush.scale($$.subX); }
	            if (config.zoom_enabled) { $$.zoom.scale($$.x); }
	        }
	        // update for arc
	        if ($$.updateArc) { $$.updateArc(); }
	    };

	    c3_chart_internal_fn.getYDomainMin = function (targets) {
	        var $$ = this, config = $$.config,
	            ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets),
	            j, k, baseId, idsInGroup, id, hasNegativeValue;
	        if (config.data_groups.length > 0) {
	            hasNegativeValue = $$.hasNegativeValueInTargets(targets);
	            for (j = 0; j < config.data_groups.length; j++) {
	                // Determine baseId
	                idsInGroup = config.data_groups[j].filter(function (id) { return ids.indexOf(id) >= 0; });
	                if (idsInGroup.length === 0) { continue; }
	                baseId = idsInGroup[0];
	                // Consider negative values
	                if (hasNegativeValue && ys[baseId]) {
	                    ys[baseId].forEach(function (v, i) {
	                        ys[baseId][i] = v < 0 ? v : 0;
	                    });
	                }
	                // Compute min
	                for (k = 1; k < idsInGroup.length; k++) {
	                    id = idsInGroup[k];
	                    if (! ys[id]) { continue; }
	                    ys[id].forEach(function (v, i) {
	                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {
	                            ys[baseId][i] += +v;
	                        }
	                    });
	                }
	            }
	        }
	        return $$.d3.min(Object.keys(ys).map(function (key) { return $$.d3.min(ys[key]); }));
	    };
	    c3_chart_internal_fn.getYDomainMax = function (targets) {
	        var $$ = this, config = $$.config,
	            ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets),
	            j, k, baseId, idsInGroup, id, hasPositiveValue;
	        if (config.data_groups.length > 0) {
	            hasPositiveValue = $$.hasPositiveValueInTargets(targets);
	            for (j = 0; j < config.data_groups.length; j++) {
	                // Determine baseId
	                idsInGroup = config.data_groups[j].filter(function (id) { return ids.indexOf(id) >= 0; });
	                if (idsInGroup.length === 0) { continue; }
	                baseId = idsInGroup[0];
	                // Consider positive values
	                if (hasPositiveValue && ys[baseId]) {
	                    ys[baseId].forEach(function (v, i) {
	                        ys[baseId][i] = v > 0 ? v : 0;
	                    });
	                }
	                // Compute max
	                for (k = 1; k < idsInGroup.length; k++) {
	                    id = idsInGroup[k];
	                    if (! ys[id]) { continue; }
	                    ys[id].forEach(function (v, i) {
	                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {
	                            ys[baseId][i] += +v;
	                        }
	                    });
	                }
	            }
	        }
	        return $$.d3.max(Object.keys(ys).map(function (key) { return $$.d3.max(ys[key]); }));
	    };
	    c3_chart_internal_fn.getYDomain = function (targets, axisId, xDomain) {
	        var $$ = this, config = $$.config,
	            targetsByAxisId = targets.filter(function (t) { return $$.axis.getId(t.id) === axisId; }),
	            yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId,
	            yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min,
	            yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max,
	            yDomainMin = $$.getYDomainMin(yTargets),
	            yDomainMax = $$.getYDomainMax(yTargets),
	            domain, domainLength, padding, padding_top, padding_bottom,
	            center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center,
	            yDomainAbs, lengths, diff, ratio, isAllPositive, isAllNegative,
	            isZeroBased = ($$.hasType('bar', yTargets) && config.bar_zerobased) || ($$.hasType('area', yTargets) && config.area_zerobased),
	            isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted,
	            showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated,
	            showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;

	        // MEMO: avoid inverting domain unexpectedly
	        yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? (yDomainMin < yMax ? yDomainMin : yMax - 10) : yDomainMin;
	        yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? (yMin < yDomainMax ? yDomainMax : yMin + 10) : yDomainMax;

	        if (yTargets.length === 0) { // use current domain if target of axisId is none
	            return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();
	        }
	        if (isNaN(yDomainMin)) { // set minimum to zero when not number
	            yDomainMin = 0;
	        }
	        if (isNaN(yDomainMax)) { // set maximum to have same value as yDomainMin
	            yDomainMax = yDomainMin;
	        }
	        if (yDomainMin === yDomainMax) {
	            yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;
	        }
	        isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;
	        isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;

	        // Cancel zerobased if axis_*_min / axis_*_max specified
	        if ((isValue(yMin) && isAllPositive) || (isValue(yMax) && isAllNegative)) {
	            isZeroBased = false;
	        }

	        // Bar/Area chart should be 0-based if all positive|negative
	        if (isZeroBased) {
	            if (isAllPositive) { yDomainMin = 0; }
	            if (isAllNegative) { yDomainMax = 0; }
	        }

	        domainLength = Math.abs(yDomainMax - yDomainMin);
	        padding = padding_top = padding_bottom = domainLength * 0.1;

	        if (typeof center !== 'undefined') {
	            yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));
	            yDomainMax = center + yDomainAbs;
	            yDomainMin = center - yDomainAbs;
	        }
	        // add padding for data label
	        if (showHorizontalDataLabel) {
	            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');
	            diff = diffDomain($$.y.range());
	            ratio = [lengths[0] / diff, lengths[1] / diff];
	            padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));
	            padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));
	        } else if (showVerticalDataLabel) {
	            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');
	            padding_top += $$.axis.convertPixelsToAxisPadding(lengths[1], domainLength);
	            padding_bottom += $$.axis.convertPixelsToAxisPadding(lengths[0], domainLength);
	        }
	        if (axisId === 'y' && notEmpty(config.axis_y_padding)) {
	            padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);
	            padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);
	        }
	        if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {
	            padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);
	            padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);
	        }
	        // Bar/Area chart should be 0-based if all positive|negative
	        if (isZeroBased) {
	            if (isAllPositive) { padding_bottom = yDomainMin; }
	            if (isAllNegative) { padding_top = -yDomainMax; }
	        }
	        domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];
	        return isInverted ? domain.reverse() : domain;
	    };
	    c3_chart_internal_fn.getXDomainMin = function (targets) {
	        var $$ = this, config = $$.config;
	        return isDefined(config.axis_x_min) ?
	            ($$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min) :
	        $$.d3.min(targets, function (t) { return $$.d3.min(t.values, function (v) { return v.x; }); });
	    };
	    c3_chart_internal_fn.getXDomainMax = function (targets) {
	        var $$ = this, config = $$.config;
	        return isDefined(config.axis_x_max) ?
	            ($$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max) :
	        $$.d3.max(targets, function (t) { return $$.d3.max(t.values, function (v) { return v.x; }); });
	    };
	    c3_chart_internal_fn.getXDomainPadding = function (domain) {
	        var $$ = this, config = $$.config,
	            diff = domain[1] - domain[0],
	            maxDataCount, padding, paddingLeft, paddingRight;
	        if ($$.isCategorized()) {
	            padding = 0;
	        } else if ($$.hasType('bar')) {
	            maxDataCount = $$.getMaxDataCount();
	            padding = maxDataCount > 1 ? (diff / (maxDataCount - 1)) / 2 : 0.5;
	        } else {
	            padding = diff * 0.01;
	        }
	        if (typeof config.axis_x_padding === 'object' && notEmpty(config.axis_x_padding)) {
	            paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;
	            paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;
	        } else if (typeof config.axis_x_padding === 'number') {
	            paddingLeft = paddingRight = config.axis_x_padding;
	        } else {
	            paddingLeft = paddingRight = padding;
	        }
	        return {left: paddingLeft, right: paddingRight};
	    };
	    c3_chart_internal_fn.getXDomain = function (targets) {
	        var $$ = this,
	            xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)],
	            firstX = xDomain[0], lastX = xDomain[1],
	            padding = $$.getXDomainPadding(xDomain),
	            min = 0, max = 0;
	        // show center of x domain if min and max are the same
	        if ((firstX - lastX) === 0 && !$$.isCategorized()) {
	            if ($$.isTimeSeries()) {
	                firstX = new Date(firstX.getTime() * 0.5);
	                lastX = new Date(lastX.getTime() * 1.5);
	            } else {
	                firstX = firstX === 0 ? 1 : (firstX * 0.5);
	                lastX = lastX === 0 ? -1 : (lastX * 1.5);
	            }
	        }
	        if (firstX || firstX === 0) {
	            min = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;
	        }
	        if (lastX || lastX === 0) {
	            max = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;
	        }
	        return [min, max];
	    };
	    c3_chart_internal_fn.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {
	        var $$ = this, config = $$.config;

	        if (withUpdateOrgXDomain) {
	            $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));
	            $$.orgXDomain = $$.x.domain();
	            if (config.zoom_enabled) { $$.zoom.scale($$.x).updateScaleExtent(); }
	            $$.subX.domain($$.x.domain());
	            if ($$.brush) { $$.brush.scale($$.subX); }
	        }
	        if (withUpdateXDomain) {
	            $$.x.domain(domain ? domain : (!$$.brush || $$.brush.empty()) ? $$.orgXDomain : $$.brush.extent());
	            if (config.zoom_enabled) { $$.zoom.scale($$.x).updateScaleExtent(); }
	        }

	        // Trim domain when too big by zoom mousemove event
	        if (withTrim) { $$.x.domain($$.trimXDomain($$.x.orgDomain())); }

	        return $$.x.domain();
	    };
	    c3_chart_internal_fn.trimXDomain = function (domain) {
	        var zoomDomain = this.getZoomDomain(),
	            min = zoomDomain[0], max = zoomDomain[1];
	        if (domain[0] <= min) {
	            domain[1] = +domain[1] + (min - domain[0]);
	            domain[0] = min;
	        }
	        if (max <= domain[1]) {
	            domain[0] = +domain[0] - (domain[1] - max);
	            domain[1] = max;
	        }
	        return domain;
	    };

	    c3_chart_internal_fn.isX = function (key) {
	        var $$ = this, config = $$.config;
	        return (config.data_x && key === config.data_x) || (notEmpty(config.data_xs) && hasValue(config.data_xs, key));
	    };
	    c3_chart_internal_fn.isNotX = function (key) {
	        return !this.isX(key);
	    };
	    c3_chart_internal_fn.getXKey = function (id) {
	        var $$ = this, config = $$.config;
	        return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id] : null;
	    };
	    c3_chart_internal_fn.getXValuesOfXKey = function (key, targets) {
	        var $$ = this,
	            xValues, ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];
	        ids.forEach(function (id) {
	            if ($$.getXKey(id) === key) {
	                xValues = $$.data.xs[id];
	            }
	        });
	        return xValues;
	    };
	    c3_chart_internal_fn.getIndexByX = function (x) {
	        var $$ = this,
	            data = $$.filterByX($$.data.targets, x);
	        return data.length ? data[0].index : null;
	    };
	    c3_chart_internal_fn.getXValue = function (id, i) {
	        var $$ = this;
	        return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i]) ? $$.data.xs[id][i] : i;
	    };
	    c3_chart_internal_fn.getOtherTargetXs = function () {
	        var $$ = this,
	            idsForX = Object.keys($$.data.xs);
	        return idsForX.length ? $$.data.xs[idsForX[0]] : null;
	    };
	    c3_chart_internal_fn.getOtherTargetX = function (index) {
	        var xs = this.getOtherTargetXs();
	        return xs && index < xs.length ? xs[index] : null;
	    };
	    c3_chart_internal_fn.addXs = function (xs) {
	        var $$ = this;
	        Object.keys(xs).forEach(function (id) {
	            $$.config.data_xs[id] = xs[id];
	        });
	    };
	    c3_chart_internal_fn.hasMultipleX = function (xs) {
	        return this.d3.set(Object.keys(xs).map(function (id) { return xs[id]; })).size() > 1;
	    };
	    c3_chart_internal_fn.isMultipleX = function () {
	        return notEmpty(this.config.data_xs) || !this.config.data_xSort || this.hasType('scatter');
	    };
	    c3_chart_internal_fn.addName = function (data) {
	        var $$ = this, name;
	        if (data) {
	            name = $$.config.data_names[data.id];
	            data.name = name !== undefined ? name : data.id;
	        }
	        return data;
	    };
	    c3_chart_internal_fn.getValueOnIndex = function (values, index) {
	        var valueOnIndex = values.filter(function (v) { return v.index === index; });
	        return valueOnIndex.length ? valueOnIndex[0] : null;
	    };
	    c3_chart_internal_fn.updateTargetX = function (targets, x) {
	        var $$ = this;
	        targets.forEach(function (t) {
	            t.values.forEach(function (v, i) {
	                v.x = $$.generateTargetX(x[i], t.id, i);
	            });
	            $$.data.xs[t.id] = x;
	        });
	    };
	    c3_chart_internal_fn.updateTargetXs = function (targets, xs) {
	        var $$ = this;
	        targets.forEach(function (t) {
	            if (xs[t.id]) {
	                $$.updateTargetX([t], xs[t.id]);
	            }
	        });
	    };
	    c3_chart_internal_fn.generateTargetX = function (rawX, id, index) {
	        var $$ = this, x;
	        if ($$.isTimeSeries()) {
	            x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));
	        }
	        else if ($$.isCustomX() && !$$.isCategorized()) {
	            x = isValue(rawX) ? +rawX : $$.getXValue(id, index);
	        }
	        else {
	            x = index;
	        }
	        return x;
	    };
	    c3_chart_internal_fn.cloneTarget = function (target) {
	        return {
	            id : target.id,
	            id_org : target.id_org,
	            values : target.values.map(function (d) {
	                return {x: d.x, value: d.value, id: d.id};
	            })
	        };
	    };
	    c3_chart_internal_fn.updateXs = function () {
	        var $$ = this;
	        if ($$.data.targets.length) {
	            $$.xs = [];
	            $$.data.targets[0].values.forEach(function (v) {
	                $$.xs[v.index] = v.x;
	            });
	        }
	    };
	    c3_chart_internal_fn.getPrevX = function (i) {
	        var x = this.xs[i - 1];
	        return typeof x !== 'undefined' ? x : null;
	    };
	    c3_chart_internal_fn.getNextX = function (i) {
	        var x = this.xs[i + 1];
	        return typeof x !== 'undefined' ? x : null;
	    };
	    c3_chart_internal_fn.getMaxDataCount = function () {
	        var $$ = this;
	        return $$.d3.max($$.data.targets, function (t) { return t.values.length; });
	    };
	    c3_chart_internal_fn.getMaxDataCountTarget = function (targets) {
	        var length = targets.length, max = 0, maxTarget;
	        if (length > 1) {
	            targets.forEach(function (t) {
	                if (t.values.length > max) {
	                    maxTarget = t;
	                    max = t.values.length;
	                }
	            });
	        } else {
	            maxTarget = length ? targets[0] : null;
	        }
	        return maxTarget;
	    };
	    c3_chart_internal_fn.getEdgeX = function (targets) {
	        var $$ = this;
	        return !targets.length ? [0, 0] : [
	            $$.d3.min(targets, function (t) { return t.values[0].x; }),
	            $$.d3.max(targets, function (t) { return t.values[t.values.length - 1].x; })
	        ];
	    };
	    c3_chart_internal_fn.mapToIds = function (targets) {
	        return targets.map(function (d) { return d.id; });
	    };
	    c3_chart_internal_fn.mapToTargetIds = function (ids) {
	        var $$ = this;
	        return ids ? [].concat(ids) : $$.mapToIds($$.data.targets);
	    };
	    c3_chart_internal_fn.hasTarget = function (targets, id) {
	        var ids = this.mapToIds(targets), i;
	        for (i = 0; i < ids.length; i++) {
	            if (ids[i] === id) {
	                return true;
	            }
	        }
	        return false;
	    };
	    c3_chart_internal_fn.isTargetToShow = function (targetId) {
	        return this.hiddenTargetIds.indexOf(targetId) < 0;
	    };
	    c3_chart_internal_fn.isLegendToShow = function (targetId) {
	        return this.hiddenLegendIds.indexOf(targetId) < 0;
	    };
	    c3_chart_internal_fn.filterTargetsToShow = function (targets) {
	        var $$ = this;
	        return targets.filter(function (t) { return $$.isTargetToShow(t.id); });
	    };
	    c3_chart_internal_fn.mapTargetsToUniqueXs = function (targets) {
	        var $$ = this;
	        var xs = $$.d3.set($$.d3.merge(targets.map(function (t) { return t.values.map(function (v) { return +v.x; }); }))).values();
	        xs = $$.isTimeSeries() ? xs.map(function (x) { return new Date(+x); }) : xs.map(function (x) { return +x; });
	        return xs.sort(function (a, b) { return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN; });
	    };
	    c3_chart_internal_fn.addHiddenTargetIds = function (targetIds) {
	        this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds);
	    };
	    c3_chart_internal_fn.removeHiddenTargetIds = function (targetIds) {
	        this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) { return targetIds.indexOf(id) < 0; });
	    };
	    c3_chart_internal_fn.addHiddenLegendIds = function (targetIds) {
	        this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds);
	    };
	    c3_chart_internal_fn.removeHiddenLegendIds = function (targetIds) {
	        this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) { return targetIds.indexOf(id) < 0; });
	    };
	    c3_chart_internal_fn.getValuesAsIdKeyed = function (targets) {
	        var ys = {};
	        targets.forEach(function (t) {
	            ys[t.id] = [];
	            t.values.forEach(function (v) {
	                ys[t.id].push(v.value);
	            });
	        });
	        return ys;
	    };
	    c3_chart_internal_fn.checkValueInTargets = function (targets, checker) {
	        var ids = Object.keys(targets), i, j, values;
	        for (i = 0; i < ids.length; i++) {
	            values = targets[ids[i]].values;
	            for (j = 0; j < values.length; j++) {
	                if (checker(values[j].value)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    c3_chart_internal_fn.hasNegativeValueInTargets = function (targets) {
	        return this.checkValueInTargets(targets, function (v) { return v < 0; });
	    };
	    c3_chart_internal_fn.hasPositiveValueInTargets = function (targets) {
	        return this.checkValueInTargets(targets, function (v) { return v > 0; });
	    };
	    c3_chart_internal_fn.isOrderDesc = function () {
	        var config = this.config;
	        return typeof(config.data_order) === 'string' && config.data_order.toLowerCase() === 'desc';
	    };
	    c3_chart_internal_fn.isOrderAsc = function () {
	        var config = this.config;
	        return typeof(config.data_order) === 'string' && config.data_order.toLowerCase() === 'asc';
	    };
	    c3_chart_internal_fn.orderTargets = function (targets) {
	        var $$ = this, config = $$.config, orderAsc = $$.isOrderAsc(), orderDesc = $$.isOrderDesc();
	        if (orderAsc || orderDesc) {
	            targets.sort(function (t1, t2) {
	                var reducer = function (p, c) { return p + Math.abs(c.value); };
	                var t1Sum = t1.values.reduce(reducer, 0),
	                    t2Sum = t2.values.reduce(reducer, 0);
	                return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;
	            });
	        } else if (isFunction(config.data_order)) {
	            targets.sort(config.data_order);
	        } // TODO: accept name array for order
	        return targets;
	    };
	    c3_chart_internal_fn.filterByX = function (targets, x) {
	        return this.d3.merge(targets.map(function (t) { return t.values; })).filter(function (v) { return v.x - x === 0; });
	    };
	    c3_chart_internal_fn.filterRemoveNull = function (data) {
	        return data.filter(function (d) { return isValue(d.value); });
	    };
	    c3_chart_internal_fn.filterByXDomain = function (targets, xDomain) {
	        return targets.map(function (t) {
	            return {
	                id: t.id,
	                id_org: t.id_org,
	                values: t.values.filter(function (v) {
	                    return xDomain[0] <= v.x && v.x <= xDomain[1];
	                })
	            };
	        });
	    };
	    c3_chart_internal_fn.hasDataLabel = function () {
	        var config = this.config;
	        if (typeof config.data_labels === 'boolean' && config.data_labels) {
	            return true;
	        } else if (typeof config.data_labels === 'object' && notEmpty(config.data_labels)) {
	            return true;
	        }
	        return false;
	    };
	    c3_chart_internal_fn.getDataLabelLength = function (min, max, key) {
	        var $$ = this,
	            lengths = [0, 0], paddingCoef = 1.3;
	        $$.selectChart.select('svg').selectAll('.dummy')
	            .data([min, max])
	            .enter().append('text')
	            .text(function (d) { return $$.dataLabelFormat(d.id)(d); })
	            .each(function (d, i) {
	                lengths[i] = this.getBoundingClientRect()[key] * paddingCoef;
	            })
	            .remove();
	        return lengths;
	    };
	    c3_chart_internal_fn.isNoneArc = function (d) {
	        return this.hasTarget(this.data.targets, d.id);
	    },
	    c3_chart_internal_fn.isArc = function (d) {
	        return 'data' in d && this.hasTarget(this.data.targets, d.data.id);
	    };
	    c3_chart_internal_fn.findSameXOfValues = function (values, index) {
	        var i, targetX = values[index].x, sames = [];
	        for (i = index - 1; i >= 0; i--) {
	            if (targetX !== values[i].x) { break; }
	            sames.push(values[i]);
	        }
	        for (i = index; i < values.length; i++) {
	            if (targetX !== values[i].x) { break; }
	            sames.push(values[i]);
	        }
	        return sames;
	    };

	    c3_chart_internal_fn.findClosestFromTargets = function (targets, pos) {
	        var $$ = this, candidates;

	        // map to array of closest points of each target
	        candidates = targets.map(function (target) {
	            return $$.findClosest(target.values, pos);
	        });

	        // decide closest point and return
	        return $$.findClosest(candidates, pos);
	    };
	    c3_chart_internal_fn.findClosest = function (values, pos) {
	        var $$ = this, minDist = $$.config.point_sensitivity, closest;

	        // find mouseovering bar
	        values.filter(function (v) { return v && $$.isBarType(v.id); }).forEach(function (v) {
	            var shape = $$.main.select('.' + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + ' .' + CLASS.bar + '-' + v.index).node();
	            if (!closest && $$.isWithinBar(shape)) {
	                closest = v;
	            }
	        });

	        // find closest point from non-bar
	        values.filter(function (v) { return v && !$$.isBarType(v.id); }).forEach(function (v) {
	            var d = $$.dist(v, pos);
	            if (d < minDist) {
	                minDist = d;
	                closest = v;
	            }
	        });

	        return closest;
	    };
	    c3_chart_internal_fn.dist = function (data, pos) {
	        var $$ = this, config = $$.config,
	            xIndex = config.axis_rotated ? 1 : 0,
	            yIndex = config.axis_rotated ? 0 : 1,
	            y = $$.circleY(data, data.index),
	            x = $$.x(data.x);
	        return Math.sqrt(Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2));
	    };
	    c3_chart_internal_fn.convertValuesToStep = function (values) {
	        var converted = [].concat(values), i;

	        if (!this.isCategorized()) {
	            return values;
	        }

	        for (i = values.length + 1; 0 < i; i--) {
	            converted[i] = converted[i - 1];
	        }

	        converted[0] = {
	            x: converted[0].x - 1,
	            value: converted[0].value,
	            id: converted[0].id
	        };
	        converted[values.length + 1] = {
	            x: converted[values.length].x + 1,
	            value: converted[values.length].value,
	            id: converted[values.length].id
	        };

	        return converted;
	    };
	    c3_chart_internal_fn.updateDataAttributes = function (name, attrs) {
	        var $$ = this, config = $$.config, current = config['data_' + name];
	        if (typeof attrs === 'undefined') { return current; }
	        Object.keys(attrs).forEach(function (id) {
	            current[id] = attrs[id];
	        });
	        $$.redraw({withLegend: true});
	        return current;
	    };

	    c3_chart_internal_fn.convertUrlToData = function (url, mimeType, headers, keys, done) {
	        var $$ = this, type = mimeType ? mimeType : 'csv';
	        var req = $$.d3.xhr(url);
	        if (headers) {
	            Object.keys(headers).forEach(function (header) {
	                req.header(header, headers[header]);
	            });
	        }
	        req.get(function (error, data) {
	            var d;
	            if (!data) {
	                throw new Error(error.responseURL + ' ' + error.status + ' (' + error.statusText + ')');
	            }
	            if (type === 'json') {
	                d = $$.convertJsonToData(JSON.parse(data.response), keys);
	            } else if (type === 'tsv') {
	                d = $$.convertTsvToData(data.response);
	            } else {
	                d = $$.convertCsvToData(data.response);
	            }
	            done.call($$, d);
	        });
	    };
	    c3_chart_internal_fn.convertXsvToData = function (xsv, parser) {
	        var rows = parser.parseRows(xsv), d;
	        if (rows.length === 1) {
	            d = [{}];
	            rows[0].forEach(function (id) {
	                d[0][id] = null;
	            });
	        } else {
	            d = parser.parse(xsv);
	        }
	        return d;
	    };
	    c3_chart_internal_fn.convertCsvToData = function (csv) {
	        return this.convertXsvToData(csv, this.d3.csv);
	    };
	    c3_chart_internal_fn.convertTsvToData = function (tsv) {
	        return this.convertXsvToData(tsv, this.d3.tsv);
	    };
	    c3_chart_internal_fn.convertJsonToData = function (json, keys) {
	        var $$ = this,
	            new_rows = [], targetKeys, data;
	        if (keys) { // when keys specified, json would be an array that includes objects
	            if (keys.x) {
	                targetKeys = keys.value.concat(keys.x);
	                $$.config.data_x = keys.x;
	            } else {
	                targetKeys = keys.value;
	            }
	            new_rows.push(targetKeys);
	            json.forEach(function (o) {
	                var new_row = [];
	                targetKeys.forEach(function (key) {
	                    // convert undefined to null because undefined data will be removed in convertDataToTargets()
	                    var v = $$.findValueInJson(o, key);
	                    if (isUndefined(v)) {
	                        v = null;
	                    }
	                    new_row.push(v);
	                });
	                new_rows.push(new_row);
	            });
	            data = $$.convertRowsToData(new_rows);
	        } else {
	            Object.keys(json).forEach(function (key) {
	                new_rows.push([key].concat(json[key]));
	            });
	            data = $$.convertColumnsToData(new_rows);
	        }
	        return data;
	    };
	    c3_chart_internal_fn.findValueInJson = function (object, path) {
	        path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties (replace [] with .)
	        path = path.replace(/^\./, '');           // strip a leading dot
	        var pathArray = path.split('.');
	        for (var i = 0; i < pathArray.length; ++i) {
	            var k = pathArray[i];
	            if (k in object) {
	                object = object[k];
	            } else {
	                return;
	            }
	        }
	        return object;
	    };
	    c3_chart_internal_fn.convertRowsToData = function (rows) {
	        var keys = rows[0], new_row = {}, new_rows = [], i, j;
	        for (i = 1; i < rows.length; i++) {
	            new_row = {};
	            for (j = 0; j < rows[i].length; j++) {
	                if (isUndefined(rows[i][j])) {
	                    throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
	                }
	                new_row[keys[j]] = rows[i][j];
	            }
	            new_rows.push(new_row);
	        }
	        return new_rows;
	    };
	    c3_chart_internal_fn.convertColumnsToData = function (columns) {
	        var new_rows = [], i, j, key;
	        for (i = 0; i < columns.length; i++) {
	            key = columns[i][0];
	            for (j = 1; j < columns[i].length; j++) {
	                if (isUndefined(new_rows[j - 1])) {
	                    new_rows[j - 1] = {};
	                }
	                if (isUndefined(columns[i][j])) {
	                    throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
	                }
	                new_rows[j - 1][key] = columns[i][j];
	            }
	        }
	        return new_rows;
	    };
	    c3_chart_internal_fn.convertDataToTargets = function (data, appendXs) {
	        var $$ = this, config = $$.config,
	            ids = $$.d3.keys(data[0]).filter($$.isNotX, $$),
	            xs = $$.d3.keys(data[0]).filter($$.isX, $$),
	            targets;

	        // save x for update data by load when custom x and c3.x API
	        ids.forEach(function (id) {
	            var xKey = $$.getXKey(id);

	            if ($$.isCustomX() || $$.isTimeSeries()) {
	                // if included in input data
	                if (xs.indexOf(xKey) >= 0) {
	                    $$.data.xs[id] = (appendXs && $$.data.xs[id] ? $$.data.xs[id] : []).concat(
	                        data.map(function (d) { return d[xKey]; })
	                            .filter(isValue)
	                            .map(function (rawX, i) { return $$.generateTargetX(rawX, id, i); })
	                    );
	                }
	                // if not included in input data, find from preloaded data of other id's x
	                else if (config.data_x) {
	                    $$.data.xs[id] = $$.getOtherTargetXs();
	                }
	                // if not included in input data, find from preloaded data
	                else if (notEmpty(config.data_xs)) {
	                    $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);
	                }
	                // MEMO: if no x included, use same x of current will be used
	            } else {
	                $$.data.xs[id] = data.map(function (d, i) { return i; });
	            }
	        });


	        // check x is defined
	        ids.forEach(function (id) {
	            if (!$$.data.xs[id]) {
	                throw new Error('x is not defined for id = "' + id + '".');
	            }
	        });

	        // convert to target
	        targets = ids.map(function (id, index) {
	            var convertedId = config.data_idConverter(id);
	            return {
	                id: convertedId,
	                id_org: id,
	                values: data.map(function (d, i) {
	                    var xKey = $$.getXKey(id), rawX = d[xKey],
	                        value = d[id] !== null && !isNaN(d[id]) ? +d[id] : null, x;
	                    // use x as categories if custom x and categorized
	                    if ($$.isCustomX() && $$.isCategorized() && index === 0 && !isUndefined(rawX)) {
	                        if (index === 0 && i === 0) {
	                            config.axis_x_categories = [];
	                        }
	                        x = config.axis_x_categories.indexOf(rawX);
	                        if (x === -1) {
	                            x = config.axis_x_categories.length;
	                            config.axis_x_categories.push(rawX);
	                        }
	                    } else {
	                        x  = $$.generateTargetX(rawX, id, i);
	                    }
	                    // mark as x = undefined if value is undefined and filter to remove after mapped
	                    if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {
	                        x = undefined;
	                    }
	                    return {x: x, value: value, id: convertedId};
	                }).filter(function (v) { return isDefined(v.x); })
	            };
	        });

	        // finish targets
	        targets.forEach(function (t) {
	            var i;
	            // sort values by its x
	            if (config.data_xSort) {
	                t.values = t.values.sort(function (v1, v2) {
	                    var x1 = v1.x || v1.x === 0 ? v1.x : Infinity,
	                        x2 = v2.x || v2.x === 0 ? v2.x : Infinity;
	                    return x1 - x2;
	                });
	            }
	            // indexing each value
	            i = 0;
	            t.values.forEach(function (v) {
	                v.index = i++;
	            });
	            // this needs to be sorted because its index and value.index is identical
	            $$.data.xs[t.id].sort(function (v1, v2) {
	                return v1 - v2;
	            });
	        });

	        // cache information about values
	        $$.hasNegativeValue = $$.hasNegativeValueInTargets(targets);
	        $$.hasPositiveValue = $$.hasPositiveValueInTargets(targets);

	        // set target types
	        if (config.data_type) {
	            $$.setTargetType($$.mapToIds(targets).filter(function (id) { return ! (id in config.data_types); }), config.data_type);
	        }

	        // cache as original id keyed
	        targets.forEach(function (d) {
	            $$.addCache(d.id_org, d);
	        });

	        return targets;
	    };

	    c3_chart_internal_fn.load = function (targets, args) {
	        var $$ = this;
	        if (targets) {
	            // filter loading targets if needed
	            if (args.filter) {
	                targets = targets.filter(args.filter);
	            }
	            // set type if args.types || args.type specified
	            if (args.type || args.types) {
	                targets.forEach(function (t) {
	                    var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;
	                    $$.setTargetType(t.id, type);
	                });
	            }
	            // Update/Add data
	            $$.data.targets.forEach(function (d) {
	                for (var i = 0; i < targets.length; i++) {
	                    if (d.id === targets[i].id) {
	                        d.values = targets[i].values;
	                        targets.splice(i, 1);
	                        break;
	                    }
	                }
	            });
	            $$.data.targets = $$.data.targets.concat(targets); // add remained
	        }

	        // Set targets
	        $$.updateTargets($$.data.targets);

	        // Redraw with new targets
	        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});

	        if (args.done) { args.done(); }
	    };
	    c3_chart_internal_fn.loadFromArgs = function (args) {
	        var $$ = this;
	        if (args.data) {
	            $$.load($$.convertDataToTargets(args.data), args);
	        }
	        else if (args.url) {
	            $$.convertUrlToData(args.url, args.mimeType, args.headers, args.keys, function (data) {
	                $$.load($$.convertDataToTargets(data), args);
	            });
	        }
	        else if (args.json) {
	            $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);
	        }
	        else if (args.rows) {
	            $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);
	        }
	        else if (args.columns) {
	            $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);
	        }
	        else {
	            $$.load(null, args);
	        }
	    };
	    c3_chart_internal_fn.unload = function (targetIds, done) {
	        var $$ = this;
	        if (!done) {
	            done = function () {};
	        }
	        // filter existing target
	        targetIds = targetIds.filter(function (id) { return $$.hasTarget($$.data.targets, id); });
	        // If no target, call done and return
	        if (!targetIds || targetIds.length === 0) {
	            done();
	            return;
	        }
	        $$.svg.selectAll(targetIds.map(function (id) { return $$.selectorTarget(id); }))
	            .transition()
	            .style('opacity', 0)
	            .remove()
	            .call($$.endall, done);
	        targetIds.forEach(function (id) {
	            // Reset fadein for future load
	            $$.withoutFadeIn[id] = false;
	            // Remove target's elements
	            if ($$.legend) {
	                $$.legend.selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id)).remove();
	            }
	            // Remove target
	            $$.data.targets = $$.data.targets.filter(function (t) {
	                return t.id !== id;
	            });
	        });
	    };

	    c3_chart_internal_fn.categoryName = function (i) {
	        var config = this.config;
	        return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;
	    };

	    c3_chart_internal_fn.initEventRect = function () {
	        var $$ = this;
	        $$.main.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.eventRects)
	            .style('fill-opacity', 0);
	    };
	    c3_chart_internal_fn.redrawEventRect = function () {
	        var $$ = this, config = $$.config,
	            eventRectUpdate, maxDataCountTarget,
	            isMultipleX = $$.isMultipleX();

	        // rects for mouseover
	        var eventRects = $$.main.select('.' + CLASS.eventRects)
	                .style('cursor', config.zoom_enabled ? config.axis_rotated ? 'ns-resize' : 'ew-resize' : null)
	                .classed(CLASS.eventRectsMultiple, isMultipleX)
	                .classed(CLASS.eventRectsSingle, !isMultipleX);

	        // clear old rects
	        eventRects.selectAll('.' + CLASS.eventRect).remove();

	        // open as public variable
	        $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);

	        if (isMultipleX) {
	            eventRectUpdate = $$.eventRect.data([0]);
	            // enter : only one rect will be added
	            $$.generateEventRectsForMultipleXs(eventRectUpdate.enter());
	            // update
	            $$.updateEventRect(eventRectUpdate);
	            // exit : not needed because always only one rect exists
	        }
	        else {
	            // Set data and update $$.eventRect
	            maxDataCountTarget = $$.getMaxDataCountTarget($$.data.targets);
	            eventRects.datum(maxDataCountTarget ? maxDataCountTarget.values : []);
	            $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);
	            eventRectUpdate = $$.eventRect.data(function (d) { return d; });
	            // enter
	            $$.generateEventRectsForSingleX(eventRectUpdate.enter());
	            // update
	            $$.updateEventRect(eventRectUpdate);
	            // exit
	            eventRectUpdate.exit().remove();
	        }
	    };
	    c3_chart_internal_fn.updateEventRect = function (eventRectUpdate) {
	        var $$ = this, config = $$.config,
	            x, y, w, h, rectW, rectX;

	        // set update selection if null
	        eventRectUpdate = eventRectUpdate || $$.eventRect.data(function (d) { return d; });

	        if ($$.isMultipleX()) {
	            // TODO: rotated not supported yet
	            x = 0;
	            y = 0;
	            w = $$.width;
	            h = $$.height;
	        }
	        else {
	            if (($$.isCustomX() || $$.isTimeSeries()) && !$$.isCategorized()) {

	                // update index for x that is used by prevX and nextX
	                $$.updateXs();

	                rectW = function (d) {
	                    var prevX = $$.getPrevX(d.index), nextX = $$.getNextX(d.index);

	                    // if there this is a single data point make the eventRect full width (or height)
	                    if (prevX === null && nextX === null) {
	                        return config.axis_rotated ? $$.height : $$.width;
	                    }

	                    if (prevX === null) { prevX = $$.x.domain()[0]; }
	                    if (nextX === null) { nextX = $$.x.domain()[1]; }

	                    return Math.max(0, ($$.x(nextX) - $$.x(prevX)) / 2);
	                };
	                rectX = function (d) {
	                    var prevX = $$.getPrevX(d.index), nextX = $$.getNextX(d.index),
	                        thisX = $$.data.xs[d.id][d.index];

	                    // if there this is a single data point position the eventRect at 0
	                    if (prevX === null && nextX === null) {
	                        return 0;
	                    }

	                    if (prevX === null) { prevX = $$.x.domain()[0]; }

	                    return ($$.x(thisX) + $$.x(prevX)) / 2;
	                };
	            } else {
	                rectW = $$.getEventRectWidth();
	                rectX = function (d) {
	                    return $$.x(d.x) - (rectW / 2);
	                };
	            }
	            x = config.axis_rotated ? 0 : rectX;
	            y = config.axis_rotated ? rectX : 0;
	            w = config.axis_rotated ? $$.width : rectW;
	            h = config.axis_rotated ? rectW : $$.height;
	        }

	        eventRectUpdate
	            .attr('class', $$.classEvent.bind($$))
	            .attr("x", x)
	            .attr("y", y)
	            .attr("width", w)
	            .attr("height", h);
	    };
	    c3_chart_internal_fn.generateEventRectsForSingleX = function (eventRectEnter) {
	        var $$ = this, d3 = $$.d3, config = $$.config;
	        eventRectEnter.append("rect")
	            .attr("class", $$.classEvent.bind($$))
	            .style("cursor", config.data_selection_enabled && config.data_selection_grouped ? "pointer" : null)
	            .on('mouseover', function (d) {
	                var index = d.index;

	                if ($$.dragging || $$.flowing) { return; } // do nothing while dragging/flowing
	                if ($$.hasArcType()) { return; }

	                // Expand shapes for selection
	                if (config.point_focus_expand_enabled) { $$.expandCircles(index, null, true); }
	                $$.expandBars(index, null, true);

	                // Call event handler
	                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
	                    config.data_onmouseover.call($$.api, d);
	                });
	            })
	            .on('mouseout', function (d) {
	                var index = d.index;
	                if (!$$.config) { return; } // chart is destroyed
	                if ($$.hasArcType()) { return; }
	                $$.hideXGridFocus();
	                $$.hideTooltip();
	                // Undo expanded shapes
	                $$.unexpandCircles();
	                $$.unexpandBars();
	                // Call event handler
	                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
	                    config.data_onmouseout.call($$.api, d);
	                });
	            })
	            .on('mousemove', function (d) {
	                var selectedData, index = d.index,
	                    eventRect = $$.svg.select('.' + CLASS.eventRect + '-' + index);

	                if ($$.dragging || $$.flowing) { return; } // do nothing while dragging/flowing
	                if ($$.hasArcType()) { return; }

	                if ($$.isStepType(d) && $$.config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
	                    index -= 1;
	                }

	                // Show tooltip
	                selectedData = $$.filterTargetsToShow($$.data.targets).map(function (t) {
	                    return $$.addName($$.getValueOnIndex(t.values, index));
	                });

	                if (config.tooltip_grouped) {
	                    $$.showTooltip(selectedData, this);
	                    $$.showXGridFocus(selectedData);
	                }

	                if (config.tooltip_grouped && (!config.data_selection_enabled || config.data_selection_grouped)) {
	                    return;
	                }

	                $$.main.selectAll('.' + CLASS.shape + '-' + index)
	                    .each(function () {
	                        d3.select(this).classed(CLASS.EXPANDED, true);
	                        if (config.data_selection_enabled) {
	                            eventRect.style('cursor', config.data_selection_grouped ? 'pointer' : null);
	                        }
	                        if (!config.tooltip_grouped) {
	                            $$.hideXGridFocus();
	                            $$.hideTooltip();
	                            if (!config.data_selection_grouped) {
	                                $$.unexpandCircles(index);
	                                $$.unexpandBars(index);
	                            }
	                        }
	                    })
	                    .filter(function (d) {
	                        return $$.isWithinShape(this, d);
	                    })
	                    .each(function (d) {
	                        if (config.data_selection_enabled && (config.data_selection_grouped || config.data_selection_isselectable(d))) {
	                            eventRect.style('cursor', 'pointer');
	                        }
	                        if (!config.tooltip_grouped) {
	                            $$.showTooltip([d], this);
	                            $$.showXGridFocus([d]);
	                            if (config.point_focus_expand_enabled) { $$.expandCircles(index, d.id, true); }
	                            $$.expandBars(index, d.id, true);
	                        }
	                    });
	            })
	            .on('click', function (d) {
	                var index = d.index;
	                if ($$.hasArcType() || !$$.toggleShape) { return; }
	                if ($$.cancelClick) {
	                    $$.cancelClick = false;
	                    return;
	                }
	                if ($$.isStepType(d) && config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
	                    index -= 1;
	                }
	                $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
	                    if (config.data_selection_grouped || $$.isWithinShape(this, d)) {
	                        $$.toggleShape(this, d, index);
	                        $$.config.data_onclick.call($$.api, d, this);
	                    }
	                });
	            })
	            .call(
	                config.data_selection_draggable && $$.drag ? (
	                    d3.behavior.drag().origin(Object)
	                        .on('drag', function () { $$.drag(d3.mouse(this)); })
	                        .on('dragstart', function () { $$.dragstart(d3.mouse(this)); })
	                        .on('dragend', function () { $$.dragend(); })
	                ) : function () {}
	            );
	    };

	    c3_chart_internal_fn.generateEventRectsForMultipleXs = function (eventRectEnter) {
	        var $$ = this, d3 = $$.d3, config = $$.config;

	        function mouseout() {
	            $$.svg.select('.' + CLASS.eventRect).style('cursor', null);
	            $$.hideXGridFocus();
	            $$.hideTooltip();
	            $$.unexpandCircles();
	            $$.unexpandBars();
	        }

	        eventRectEnter.append('rect')
	            .attr('x', 0)
	            .attr('y', 0)
	            .attr('width', $$.width)
	            .attr('height', $$.height)
	            .attr('class', CLASS.eventRect)
	            .on('mouseout', function () {
	                if (!$$.config) { return; } // chart is destroyed
	                if ($$.hasArcType()) { return; }
	                mouseout();
	            })
	            .on('mousemove', function () {
	                var targetsToShow = $$.filterTargetsToShow($$.data.targets);
	                var mouse, closest, sameXData, selectedData;

	                if ($$.dragging) { return; } // do nothing when dragging
	                if ($$.hasArcType(targetsToShow)) { return; }

	                mouse = d3.mouse(this);
	                closest = $$.findClosestFromTargets(targetsToShow, mouse);

	                if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id)) {
	                    config.data_onmouseout.call($$.api, $$.mouseover);
	                    $$.mouseover = undefined;
	                }

	                if (! closest) {
	                    mouseout();
	                    return;
	                }

	                if ($$.isScatterType(closest) || !config.tooltip_grouped) {
	                    sameXData = [closest];
	                } else {
	                    sameXData = $$.filterByX(targetsToShow, closest.x);
	                }

	                // show tooltip when cursor is close to some point
	                selectedData = sameXData.map(function (d) {
	                    return $$.addName(d);
	                });
	                $$.showTooltip(selectedData, this);

	                // expand points
	                if (config.point_focus_expand_enabled) {
	                    $$.expandCircles(closest.index, closest.id, true);
	                }
	                $$.expandBars(closest.index, closest.id, true);

	                // Show xgrid focus line
	                $$.showXGridFocus(selectedData);

	                // Show cursor as pointer if point is close to mouse position
	                if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
	                    $$.svg.select('.' + CLASS.eventRect).style('cursor', 'pointer');
	                    if (!$$.mouseover) {
	                        config.data_onmouseover.call($$.api, closest);
	                        $$.mouseover = closest;
	                    }
	                }
	            })
	            .on('click', function () {
	                var targetsToShow = $$.filterTargetsToShow($$.data.targets);
	                var mouse, closest;
	                if ($$.hasArcType(targetsToShow)) { return; }

	                mouse = d3.mouse(this);
	                closest = $$.findClosestFromTargets(targetsToShow, mouse);
	                if (! closest) { return; }
	                // select if selection enabled
	                if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
	                    $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).selectAll('.' + CLASS.shape + '-' + closest.index).each(function () {
	                        if (config.data_selection_grouped || $$.isWithinShape(this, closest)) {
	                            $$.toggleShape(this, closest, closest.index);
	                            $$.config.data_onclick.call($$.api, closest, this);
	                        }
	                    });
	                }
	            })
	            .call(
	                config.data_selection_draggable && $$.drag ? (
	                    d3.behavior.drag().origin(Object)
	                        .on('drag', function () { $$.drag(d3.mouse(this)); })
	                        .on('dragstart', function () { $$.dragstart(d3.mouse(this)); })
	                        .on('dragend', function () { $$.dragend(); })
	                ) : function () {}
	            );
	    };
	    c3_chart_internal_fn.dispatchEvent = function (type, index, mouse) {
	        var $$ = this,
	            selector = '.' + CLASS.eventRect + (!$$.isMultipleX() ? '-' + index : ''),
	            eventRect = $$.main.select(selector).node(),
	            box = eventRect.getBoundingClientRect(),
	            x = box.left + (mouse ? mouse[0] : 0),
	            y = box.top + (mouse ? mouse[1] : 0),
	            event = document.createEvent("MouseEvents");

	        event.initMouseEvent(type, true, true, window, 0, x, y, x, y,
	                             false, false, false, false, 0, null);
	        eventRect.dispatchEvent(event);
	    };

	    c3_chart_internal_fn.getCurrentWidth = function () {
	        var $$ = this, config = $$.config;
	        return config.size_width ? config.size_width : $$.getParentWidth();
	    };
	    c3_chart_internal_fn.getCurrentHeight = function () {
	        var $$ = this, config = $$.config,
	            h = config.size_height ? config.size_height : $$.getParentHeight();
	        return h > 0 ? h : 320 / ($$.hasType('gauge') && !config.gauge_fullCircle ? 2 : 1); 
	    };
	    c3_chart_internal_fn.getCurrentPaddingTop = function () {
	        var $$ = this,
	            config = $$.config,
	            padding = isValue(config.padding_top) ? config.padding_top : 0;
	        if ($$.title && $$.title.node()) {
	            padding += $$.getTitlePadding();
	        }
	        return padding;
	    };
	    c3_chart_internal_fn.getCurrentPaddingBottom = function () {
	        var config = this.config;
	        return isValue(config.padding_bottom) ? config.padding_bottom : 0;
	    };
	    c3_chart_internal_fn.getCurrentPaddingLeft = function (withoutRecompute) {
	        var $$ = this, config = $$.config;
	        if (isValue(config.padding_left)) {
	            return config.padding_left;
	        } else if (config.axis_rotated) {
	            return !config.axis_x_show ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);
	        } else if (!config.axis_y_show || config.axis_y_inner) { // && !config.axis_rotated
	            return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;
	        } else {
	            return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));
	        }
	    };
	    c3_chart_internal_fn.getCurrentPaddingRight = function () {
	        var $$ = this, config = $$.config,
	            defaultPadding = 10, legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;
	        if (isValue(config.padding_right)) {
	            return config.padding_right + 1; // 1 is needed not to hide tick line
	        } else if (config.axis_rotated) {
	            return defaultPadding + legendWidthOnRight;
	        } else if (!config.axis_y2_show || config.axis_y2_inner) { // && !config.axis_rotated
	            return 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);
	        } else {
	            return ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;
	        }
	    };

	    c3_chart_internal_fn.getParentRectValue = function (key) {
	        var parent = this.selectChart.node(), v;
	        while (parent && parent.tagName !== 'BODY') {
	            try {
	                v = parent.getBoundingClientRect()[key];
	            } catch(e) {
	                if (key === 'width') {
	                    // In IE in certain cases getBoundingClientRect
	                    // will cause an "unspecified error"
	                    v = parent.offsetWidth;
	                }
	            }
	            if (v) {
	                break;
	            }
	            parent = parent.parentNode;
	        }
	        return v;
	    };
	    c3_chart_internal_fn.getParentWidth = function () {
	        return this.getParentRectValue('width');
	    };
	    c3_chart_internal_fn.getParentHeight = function () {
	        var h = this.selectChart.style('height');
	        return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;
	    };


	    c3_chart_internal_fn.getSvgLeft = function (withoutRecompute) {
	        var $$ = this, config = $$.config,
	            hasLeftAxisRect = config.axis_rotated || (!config.axis_rotated && !config.axis_y_inner),
	            leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY,
	            leftAxis = $$.main.select('.' + leftAxisClass).node(),
	            svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : {right: 0},
	            chartRect = $$.selectChart.node().getBoundingClientRect(),
	            hasArc = $$.hasArcType(),
	            svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));
	        return svgLeft > 0 ? svgLeft : 0;
	    };


	    c3_chart_internal_fn.getAxisWidthByAxisId = function (id, withoutRecompute) {
	        var $$ = this, position = $$.axis.getLabelPositionById(id);
	        return $$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40);
	    };
	    c3_chart_internal_fn.getHorizontalAxisHeight = function (axisId) {
	        var $$ = this, config = $$.config, h = 30;
	        if (axisId === 'x' && !config.axis_x_show) { return 8; }
	        if (axisId === 'x' && config.axis_x_height) { return config.axis_x_height; }
	        if (axisId === 'y' && !config.axis_y_show) { 
	            return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1; 
	        }
	        if (axisId === 'y2' && !config.axis_y2_show) { return $$.rotated_padding_top; }
	        // Calculate x axis height when tick rotated
	        if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {
	            h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_x_tick_rotate) / 180);
	        }
	        // Calculate y axis height when tick rotated
	        if (axisId === 'y' && config.axis_rotated && config.axis_y_tick_rotate) {
	            h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_y_tick_rotate) / 180);
	        }
	        return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === 'y2' ? -10 : 0);
	    };

	    c3_chart_internal_fn.getEventRectWidth = function () {
	        return Math.max(0, this.xAxis.tickInterval());
	    };

	    c3_chart_internal_fn.getShapeIndices = function (typeFilter) {
	        var $$ = this, config = $$.config,
	            indices = {}, i = 0, j, k;
	        $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {
	            for (j = 0; j < config.data_groups.length; j++) {
	                if (config.data_groups[j].indexOf(d.id) < 0) { continue; }
	                for (k = 0; k < config.data_groups[j].length; k++) {
	                    if (config.data_groups[j][k] in indices) {
	                        indices[d.id] = indices[config.data_groups[j][k]];
	                        break;
	                    }
	                }
	            }
	            if (isUndefined(indices[d.id])) { indices[d.id] = i++; }
	        });
	        indices.__max__ = i - 1;
	        return indices;
	    };
	    c3_chart_internal_fn.getShapeX = function (offset, targetsNum, indices, isSub) {
	        var $$ = this, scale = isSub ? $$.subX : $$.x;
	        return function (d) {
	            var index = d.id in indices ? indices[d.id] : 0;
	            return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;
	        };
	    };
	    c3_chart_internal_fn.getShapeY = function (isSub) {
	        var $$ = this;
	        return function (d) {
	            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);
	            return scale(d.value);
	        };
	    };
	    c3_chart_internal_fn.getShapeOffset = function (typeFilter, indices, isSub) {
	        var $$ = this,
	            targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))),
	            targetIds = targets.map(function (t) { return t.id; });
	        return function (d, i) {
	            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id),
	                y0 = scale(0), offset = y0;
	            targets.forEach(function (t) {
	                var values = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;
	                if (t.id === d.id || indices[t.id] !== indices[d.id]) { return; }
	                if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {
	                    // check if the x values line up
	                    if (typeof values[i] === 'undefined' || +values[i].x !== +d.x) {  // "+" for timeseries
	                        // if not, try to find the value that does line up
	                        i = -1;
	                        values.forEach(function (v, j) {
	                            if (v.x === d.x) {
	                                i = j;
	                            }
	                        });
	                    }
	                    if (i in values && values[i].value * d.value >= 0) {
	                        offset += scale(values[i].value) - y0;
	                    }
	                }
	            });
	            return offset;
	        };
	    };
	    c3_chart_internal_fn.isWithinShape = function (that, d) {
	        var $$ = this,
	            shape = $$.d3.select(that), isWithin;
	        if (!$$.isTargetToShow(d.id)) {
	            isWithin = false;
	        }
	        else if (that.nodeName === 'circle') {
	            isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);
	        }
	        else if (that.nodeName === 'path') {
	            isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar(that) : true;
	        }
	        return isWithin;
	    };


	    c3_chart_internal_fn.getInterpolate = function (d) {
	        var $$ = this,
	            interpolation = $$.isInterpolationType($$.config.spline_interpolation_type) ? $$.config.spline_interpolation_type : 'cardinal';
	        return $$.isSplineType(d) ? interpolation : $$.isStepType(d) ? $$.config.line_step_type : "linear";
	    };

	    c3_chart_internal_fn.initLine = function () {
	        var $$ = this;
	        $$.main.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.chartLines);
	    };
	    c3_chart_internal_fn.updateTargetsForLine = function (targets) {
	        var $$ = this, config = $$.config,
	            mainLineUpdate, mainLineEnter,
	            classChartLine = $$.classChartLine.bind($$),
	            classLines = $$.classLines.bind($$),
	            classAreas = $$.classAreas.bind($$),
	            classCircles = $$.classCircles.bind($$),
	            classFocus = $$.classFocus.bind($$);
	        mainLineUpdate = $$.main.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine)
	            .data(targets)
	            .attr('class', function (d) { return classChartLine(d) + classFocus(d); });
	        mainLineEnter = mainLineUpdate.enter().append('g')
	            .attr('class', classChartLine)
	            .style('opacity', 0)
	            .style("pointer-events", "none");
	        // Lines for each data
	        mainLineEnter.append('g')
	            .attr("class", classLines);
	        // Areas
	        mainLineEnter.append('g')
	            .attr('class', classAreas);
	        // Circles for each data point on lines
	        mainLineEnter.append('g')
	            .attr("class", function (d) { return $$.generateClass(CLASS.selectedCircles, d.id); });
	        mainLineEnter.append('g')
	            .attr("class", classCircles)
	            .style("cursor", function (d) { return config.data_selection_isselectable(d) ? "pointer" : null; });
	        // Update date for selected circles
	        targets.forEach(function (t) {
	            $$.main.selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll('.' + CLASS.selectedCircle).each(function (d) {
	                d.value = t.values[d.index].value;
	            });
	        });
	        // MEMO: can not keep same color...
	        //mainLineUpdate.exit().remove();
	    };
	    c3_chart_internal_fn.updateLine = function (durationForExit) {
	        var $$ = this;
	        $$.mainLine = $$.main.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line)
	            .data($$.lineData.bind($$));
	        $$.mainLine.enter().append('path')
	            .attr('class', $$.classLine.bind($$))
	            .style("stroke", $$.color);
	        $$.mainLine
	            .style("opacity", $$.initialOpacity.bind($$))
	            .style('shape-rendering', function (d) { return $$.isStepType(d) ? 'crispEdges' : ''; })
	            .attr('transform', null);
	        $$.mainLine.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawLine = function (drawLine, withTransition) {
	        return [
	            (withTransition ? this.mainLine.transition(Math.random().toString()) : this.mainLine)
	                .attr("d", drawLine)
	                .style("stroke", this.color)
	                .style("opacity", 1)
	        ];
	    };
	    c3_chart_internal_fn.generateDrawLine = function (lineIndices, isSub) {
	        var $$ = this, config = $$.config,
	            line = $$.d3.svg.line(),
	            getPoints = $$.generateGetLinePoints(lineIndices, isSub),
	            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
	            xValue = function (d) { return (isSub ? $$.subxx : $$.xx).call($$, d); },
	            yValue = function (d, i) {
	                return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);
	            };

	        line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);
	        if (!config.line_connectNull) { line = line.defined(function (d) { return d.value != null; }); }
	        return function (d) {
	            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
	                x = isSub ? $$.x : $$.subX, y = yScaleGetter.call($$, d.id), x0 = 0, y0 = 0, path;
	            if ($$.isLineType(d)) {
	                if (config.data_regions[d.id]) {
	                    path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);
	                } else {
	                    if ($$.isStepType(d)) { values = $$.convertValuesToStep(values); }
	                    path = line.interpolate($$.getInterpolate(d))(values);
	                }
	            } else {
	                if (values[0]) {
	                    x0 = x(values[0].x);
	                    y0 = y(values[0].value);
	                }
	                path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
	            }
	            return path ? path : "M 0 0";
	        };
	    };
	    c3_chart_internal_fn.generateGetLinePoints = function (lineIndices, isSub) { // partial duplication of generateGetBarPoints
	        var $$ = this, config = $$.config,
	            lineTargetsNum = lineIndices.__max__ + 1,
	            x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub),
	            y = $$.getShapeY(!!isSub),
	            lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub),
	            yScale = isSub ? $$.getSubYScale : $$.getYScale;
	        return function (d, i) {
	            var y0 = yScale.call($$, d.id)(0),
	                offset = lineOffset(d, i) || y0, // offset is for stacked area chart
	                posX = x(d), posY = y(d);
	            // fix posY not to overflow opposite quadrant
	            if (config.axis_rotated) {
	                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }
	            }
	            // 1 point that marks the line position
	            return [
	                [posX, posY - (y0 - offset)],
	                [posX, posY - (y0 - offset)], // needed for compatibility
	                [posX, posY - (y0 - offset)], // needed for compatibility
	                [posX, posY - (y0 - offset)]  // needed for compatibility
	            ];
	        };
	    };


	    c3_chart_internal_fn.lineWithRegions = function (d, x, y, _regions) {
	        var $$ = this, config = $$.config,
	            prev = -1, i, j,
	            s = "M", sWithRegion,
	            xp, yp, dx, dy, dd, diff, diffx2,
	            xOffset = $$.isCategorized() ? 0.5 : 0,
	            xValue, yValue,
	            regions = [];

	        function isWithinRegions(x, regions) {
	            var i;
	            for (i = 0; i < regions.length; i++) {
	                if (regions[i].start < x && x <= regions[i].end) { return true; }
	            }
	            return false;
	        }

	        // Check start/end of regions
	        if (isDefined(_regions)) {
	            for (i = 0; i < _regions.length; i++) {
	                regions[i] = {};
	                if (isUndefined(_regions[i].start)) {
	                    regions[i].start = d[0].x;
	                } else {
	                    regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;
	                }
	                if (isUndefined(_regions[i].end)) {
	                    regions[i].end = d[d.length - 1].x;
	                } else {
	                    regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;
	                }
	            }
	        }

	        // Set scales
	        xValue = config.axis_rotated ? function (d) { return y(d.value); } : function (d) { return x(d.x); };
	        yValue = config.axis_rotated ? function (d) { return x(d.x); } : function (d) { return y(d.value); };

	        // Define svg generator function for region
	        function generateM(points) {
	            return 'M' + points[0][0] + ' ' + points[0][1] + ' ' + points[1][0] + ' ' + points[1][1];
	        }
	        if ($$.isTimeSeries()) {
	            sWithRegion = function (d0, d1, j, diff) {
	                var x0 = d0.x.getTime(), x_diff = d1.x - d0.x,
	                    xv0 = new Date(x0 + x_diff * j),
	                    xv1 = new Date(x0 + x_diff * (j + diff)),
	                    points;
	                if (config.axis_rotated) {
	                    points = [[y(yp(j)), x(xv0)], [y(yp(j + diff)), x(xv1)]];
	                } else {
	                    points = [[x(xv0), y(yp(j))], [x(xv1), y(yp(j + diff))]];
	                }
	                return generateM(points);
	            };
	        } else {
	            sWithRegion = function (d0, d1, j, diff) {
	                var points;
	                if (config.axis_rotated) {
	                    points = [[y(yp(j), true), x(xp(j))], [y(yp(j + diff), true), x(xp(j + diff))]];
	                } else {
	                    points = [[x(xp(j), true), y(yp(j))], [x(xp(j + diff), true), y(yp(j + diff))]];
	                }
	                return generateM(points);
	            };
	        }

	        // Generate
	        for (i = 0; i < d.length; i++) {

	            // Draw as normal
	            if (isUndefined(regions) || ! isWithinRegions(d[i].x, regions)) {
	                s += " " + xValue(d[i]) + " " + yValue(d[i]);
	            }
	            // Draw with region // TODO: Fix for horizotal charts
	            else {
	                xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());
	                yp = $$.getScale(d[i - 1].value, d[i].value);

	                dx = x(d[i].x) - x(d[i - 1].x);
	                dy = y(d[i].value) - y(d[i - 1].value);
	                dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
	                diff = 2 / dd;
	                diffx2 = diff * 2;

	                for (j = diff; j <= 1; j += diffx2) {
	                    s += sWithRegion(d[i - 1], d[i], j, diff);
	                }
	            }
	            prev = d[i].x;
	        }

	        return s;
	    };


	    c3_chart_internal_fn.updateArea = function (durationForExit) {
	        var $$ = this, d3 = $$.d3;
	        $$.mainArea = $$.main.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area)
	            .data($$.lineData.bind($$));
	        $$.mainArea.enter().append('path')
	            .attr("class", $$.classArea.bind($$))
	            .style("fill", $$.color)
	            .style("opacity", function () { $$.orgAreaOpacity = +d3.select(this).style('opacity'); return 0; });
	        $$.mainArea
	            .style("opacity", $$.orgAreaOpacity);
	        $$.mainArea.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawArea = function (drawArea, withTransition) {
	        return [
	            (withTransition ? this.mainArea.transition(Math.random().toString()) : this.mainArea)
	                .attr("d", drawArea)
	                .style("fill", this.color)
	                .style("opacity", this.orgAreaOpacity)
	        ];
	    };
	    c3_chart_internal_fn.generateDrawArea = function (areaIndices, isSub) {
	        var $$ = this, config = $$.config, area = $$.d3.svg.area(),
	            getPoints = $$.generateGetAreaPoints(areaIndices, isSub),
	            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
	            xValue = function (d) { return (isSub ? $$.subxx : $$.xx).call($$, d); },
	            value0 = function (d, i) {
	                return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));
	            },
	            value1 = function (d, i) {
	                return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);
	            };

	        area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(config.area_above ? 0 : value0).y1(value1);
	        if (!config.line_connectNull) {
	            area = area.defined(function (d) { return d.value !== null; });
	        }

	        return function (d) {
	            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
	                x0 = 0, y0 = 0, path;
	            if ($$.isAreaType(d)) {
	                if ($$.isStepType(d)) { values = $$.convertValuesToStep(values); }
	                path = area.interpolate($$.getInterpolate(d))(values);
	            } else {
	                if (values[0]) {
	                    x0 = $$.x(values[0].x);
	                    y0 = $$.getYScale(d.id)(values[0].value);
	                }
	                path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
	            }
	            return path ? path : "M 0 0";
	        };
	    };
	    c3_chart_internal_fn.getAreaBaseValue = function () {
	        return 0;
	    };
	    c3_chart_internal_fn.generateGetAreaPoints = function (areaIndices, isSub) { // partial duplication of generateGetBarPoints
	        var $$ = this, config = $$.config,
	            areaTargetsNum = areaIndices.__max__ + 1,
	            x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub),
	            y = $$.getShapeY(!!isSub),
	            areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub),
	            yScale = isSub ? $$.getSubYScale : $$.getYScale;
	        return function (d, i) {
	            var y0 = yScale.call($$, d.id)(0),
	                offset = areaOffset(d, i) || y0, // offset is for stacked area chart
	                posX = x(d), posY = y(d);
	            // fix posY not to overflow opposite quadrant
	            if (config.axis_rotated) {
	                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }
	            }
	            // 1 point that marks the area position
	            return [
	                [posX, offset],
	                [posX, posY - (y0 - offset)],
	                [posX, posY - (y0 - offset)], // needed for compatibility
	                [posX, offset] // needed for compatibility
	            ];
	        };
	    };


	    c3_chart_internal_fn.updateCircle = function () {
	        var $$ = this;
	        $$.mainCircle = $$.main.selectAll('.' + CLASS.circles).selectAll('.' + CLASS.circle)
	            .data($$.lineOrScatterData.bind($$));
	        $$.mainCircle.enter().append("circle")
	            .attr("class", $$.classCircle.bind($$))
	            .attr("r", $$.pointR.bind($$))
	            .style("fill", $$.color);
	        $$.mainCircle
	            .style("opacity", $$.initialOpacityForCircle.bind($$));
	        $$.mainCircle.exit().remove();
	    };
	    c3_chart_internal_fn.redrawCircle = function (cx, cy, withTransition) {
	        var selectedCircles = this.main.selectAll('.' + CLASS.selectedCircle);
	        return [
	            (withTransition ? this.mainCircle.transition(Math.random().toString()) : this.mainCircle)
	                .style('opacity', this.opacityForCircle.bind(this))
	                .style("fill", this.color)
	                .attr("cx", cx)
	                .attr("cy", cy),
	            (withTransition ? selectedCircles.transition(Math.random().toString()) : selectedCircles)
	                .attr("cx", cx)
	                .attr("cy", cy)
	        ];
	    };
	    c3_chart_internal_fn.circleX = function (d) {
	        return d.x || d.x === 0 ? this.x(d.x) : null;
	    };
	    c3_chart_internal_fn.updateCircleY = function () {
	        var $$ = this, lineIndices, getPoints;
	        if ($$.config.data_groups.length > 0) {
	            lineIndices = $$.getShapeIndices($$.isLineType),
	            getPoints = $$.generateGetLinePoints(lineIndices);
	            $$.circleY = function (d, i) {
	                return getPoints(d, i)[0][1];
	            };
	        } else {
	            $$.circleY = function (d) {
	                return $$.getYScale(d.id)(d.value);
	            };
	        }
	    };
	    c3_chart_internal_fn.getCircles = function (i, id) {
	        var $$ = this;
	        return (id ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));
	    };
	    c3_chart_internal_fn.expandCircles = function (i, id, reset) {
	        var $$ = this,
	            r = $$.pointExpandedR.bind($$);
	        if (reset) { $$.unexpandCircles(); }
	        $$.getCircles(i, id)
	            .classed(CLASS.EXPANDED, true)
	            .attr('r', r);
	    };
	    c3_chart_internal_fn.unexpandCircles = function (i) {
	        var $$ = this,
	            r = $$.pointR.bind($$);
	        $$.getCircles(i)
	            .filter(function () { return $$.d3.select(this).classed(CLASS.EXPANDED); })
	            .classed(CLASS.EXPANDED, false)
	            .attr('r', r);
	    };
	    c3_chart_internal_fn.pointR = function (d) {
	        var $$ = this, config = $$.config;
	        return $$.isStepType(d) ? 0 : (isFunction(config.point_r) ? config.point_r(d) : config.point_r);
	    };
	    c3_chart_internal_fn.pointExpandedR = function (d) {
	        var $$ = this, config = $$.config;
	        return config.point_focus_expand_enabled ? (config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75) : $$.pointR(d);
	    };
	    c3_chart_internal_fn.pointSelectR = function (d) {
	        var $$ = this, config = $$.config;
	        return isFunction(config.point_select_r) ? config.point_select_r(d) : ((config.point_select_r) ? config.point_select_r : $$.pointR(d) * 4);
	    };
	    c3_chart_internal_fn.isWithinCircle = function (that, r) {
	        var d3 = this.d3,
	            mouse = d3.mouse(that), d3_this = d3.select(that),
	            cx = +d3_this.attr("cx"), cy = +d3_this.attr("cy");
	        return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;
	    };
	    c3_chart_internal_fn.isWithinStep = function (that, y) {
	        return Math.abs(y - this.d3.mouse(that)[1]) < 30;
	    };

	    c3_chart_internal_fn.initBar = function () {
	        var $$ = this;
	        $$.main.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.chartBars);
	    };
	    c3_chart_internal_fn.updateTargetsForBar = function (targets) {
	        var $$ = this, config = $$.config,
	            mainBarUpdate, mainBarEnter,
	            classChartBar = $$.classChartBar.bind($$),
	            classBars = $$.classBars.bind($$),
	            classFocus = $$.classFocus.bind($$);
	        mainBarUpdate = $$.main.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar)
	            .data(targets)
	            .attr('class', function (d) { return classChartBar(d) + classFocus(d); });
	        mainBarEnter = mainBarUpdate.enter().append('g')
	            .attr('class', classChartBar)
	            .style('opacity', 0)
	            .style("pointer-events", "none");
	        // Bars for each data
	        mainBarEnter.append('g')
	            .attr("class", classBars)
	            .style("cursor", function (d) { return config.data_selection_isselectable(d) ? "pointer" : null; });

	    };
	    c3_chart_internal_fn.updateBar = function (durationForExit) {
	        var $$ = this,
	            barData = $$.barData.bind($$),
	            classBar = $$.classBar.bind($$),
	            initialOpacity = $$.initialOpacity.bind($$),
	            color = function (d) { return $$.color(d.id); };
	        $$.mainBar = $$.main.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar)
	            .data(barData);
	        $$.mainBar.enter().append('path')
	            .attr("class", classBar)
	            .style("stroke", color)
	            .style("fill", color);
	        $$.mainBar
	            .style("opacity", initialOpacity);
	        $$.mainBar.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawBar = function (drawBar, withTransition) {
	        return [
	            (withTransition ? this.mainBar.transition(Math.random().toString()) : this.mainBar)
	                .attr('d', drawBar)
	                .style("fill", this.color)
	                .style("opacity", 1)
	        ];
	    };
	    c3_chart_internal_fn.getBarW = function (axis, barTargetsNum) {
	        var $$ = this, config = $$.config,
	            w = typeof config.bar_width === 'number' ? config.bar_width : barTargetsNum ? (axis.tickInterval() * config.bar_width_ratio) / barTargetsNum : 0;
	        return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;
	    };
	    c3_chart_internal_fn.getBars = function (i, id) {
	        var $$ = this;
	        return (id ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));
	    };
	    c3_chart_internal_fn.expandBars = function (i, id, reset) {
	        var $$ = this;
	        if (reset) { $$.unexpandBars(); }
	        $$.getBars(i, id).classed(CLASS.EXPANDED, true);
	    };
	    c3_chart_internal_fn.unexpandBars = function (i) {
	        var $$ = this;
	        $$.getBars(i).classed(CLASS.EXPANDED, false);
	    };
	    c3_chart_internal_fn.generateDrawBar = function (barIndices, isSub) {
	        var $$ = this, config = $$.config,
	            getPoints = $$.generateGetBarPoints(barIndices, isSub);
	        return function (d, i) {
	            // 4 points that make a bar
	            var points = getPoints(d, i);

	            // switch points if axis is rotated, not applicable for sub chart
	            var indexX = config.axis_rotated ? 1 : 0;
	            var indexY = config.axis_rotated ? 0 : 1;

	            var path = 'M ' + points[0][indexX] + ',' + points[0][indexY] + ' ' +
	                    'L' + points[1][indexX] + ',' + points[1][indexY] + ' ' +
	                    'L' + points[2][indexX] + ',' + points[2][indexY] + ' ' +
	                    'L' + points[3][indexX] + ',' + points[3][indexY] + ' ' +
	                    'z';

	            return path;
	        };
	    };
	    c3_chart_internal_fn.generateGetBarPoints = function (barIndices, isSub) {
	        var $$ = this,
	            axis = isSub ? $$.subXAxis : $$.xAxis,
	            barTargetsNum = barIndices.__max__ + 1,
	            barW = $$.getBarW(axis, barTargetsNum),
	            barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub),
	            barY = $$.getShapeY(!!isSub),
	            barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub),
	            yScale = isSub ? $$.getSubYScale : $$.getYScale;
	        return function (d, i) {
	            var y0 = yScale.call($$, d.id)(0),
	                offset = barOffset(d, i) || y0, // offset is for stacked bar chart
	                posX = barX(d), posY = barY(d);
	            // fix posY not to overflow opposite quadrant
	            if ($$.config.axis_rotated) {
	                if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) { posY = y0; }
	            }
	            // 4 points that make a bar
	            return [
	                [posX, offset],
	                [posX, posY - (y0 - offset)],
	                [posX + barW, posY - (y0 - offset)],
	                [posX + barW, offset]
	            ];
	        };
	    };
	    c3_chart_internal_fn.isWithinBar = function (that) {
	        var mouse = this.d3.mouse(that), box = that.getBoundingClientRect(),
	            seg0 = that.pathSegList.getItem(0), seg1 = that.pathSegList.getItem(1),
	            x = Math.min(seg0.x, seg1.x), y = Math.min(seg0.y, seg1.y),
	            w = box.width, h = box.height, offset = 2,
	            sx = x - offset, ex = x + w + offset, sy = y + h + offset, ey = y - offset;
	        return sx < mouse[0] && mouse[0] < ex && ey < mouse[1] && mouse[1] < sy;
	    };

	    c3_chart_internal_fn.initText = function () {
	        var $$ = this;
	        $$.main.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.chartTexts);
	        $$.mainText = $$.d3.selectAll([]);
	    };
	    c3_chart_internal_fn.updateTargetsForText = function (targets) {
	        var $$ = this, mainTextUpdate, mainTextEnter,
	            classChartText = $$.classChartText.bind($$),
	            classTexts = $$.classTexts.bind($$),
	            classFocus = $$.classFocus.bind($$);
	        mainTextUpdate = $$.main.select('.' + CLASS.chartTexts).selectAll('.' + CLASS.chartText)
	            .data(targets)
	            .attr('class', function (d) { return classChartText(d) + classFocus(d); });
	        mainTextEnter = mainTextUpdate.enter().append('g')
	            .attr('class', classChartText)
	            .style('opacity', 0)
	            .style("pointer-events", "none");
	        mainTextEnter.append('g')
	            .attr('class', classTexts);
	    };
	    c3_chart_internal_fn.updateText = function (durationForExit) {
	        var $$ = this, config = $$.config,
	            barOrLineData = $$.barOrLineData.bind($$),
	            classText = $$.classText.bind($$);
	        $$.mainText = $$.main.selectAll('.' + CLASS.texts).selectAll('.' + CLASS.text)
	            .data(barOrLineData);
	        $$.mainText.enter().append('text')
	            .attr("class", classText)
	            .attr('text-anchor', function (d) { return config.axis_rotated ? (d.value < 0 ? 'end' : 'start') : 'middle'; })
	            .style("stroke", 'none')
	            .style("fill", function (d) { return $$.color(d); })
	            .style("fill-opacity", 0);
	        $$.mainText
	            .text(function (d, i, j) { return $$.dataLabelFormat(d.id)(d.value, d.id, i, j); });
	        $$.mainText.exit()
	            .transition().duration(durationForExit)
	            .style('fill-opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawText = function (xForText, yForText, forFlow, withTransition) {
	        return [
	            (withTransition ? this.mainText.transition() : this.mainText)
	                .attr('x', xForText)
	                .attr('y', yForText)
	                .style("fill", this.color)
	                .style("fill-opacity", forFlow ? 0 : this.opacityForText.bind(this))
	        ];
	    };
	    c3_chart_internal_fn.getTextRect = function (text, cls, element) {
	        var dummy = this.d3.select('body').append('div').classed('c3', true),
	            svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),
	            font = this.d3.select(element).style('font'),
	            rect;
	        svg.selectAll('.dummy')
	            .data([text])
	          .enter().append('text')
	            .classed(cls ? cls : "", true)
	            .style('font', font)
	            .text(text)
	          .each(function () { rect = this.getBoundingClientRect(); });
	        dummy.remove();
	        return rect;
	    };
	    c3_chart_internal_fn.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {
	        var $$ = this,
	            getAreaPoints = $$.generateGetAreaPoints(areaIndices, false),
	            getBarPoints = $$.generateGetBarPoints(barIndices, false),
	            getLinePoints = $$.generateGetLinePoints(lineIndices, false),
	            getter = forX ? $$.getXForText : $$.getYForText;
	        return function (d, i) {
	            var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;
	            return getter.call($$, getPoints(d, i), d, this);
	        };
	    };
	    c3_chart_internal_fn.getXForText = function (points, d, textElement) {
	        var $$ = this,
	            box = textElement.getBoundingClientRect(), xPos, padding;
	        if ($$.config.axis_rotated) {
	            padding = $$.isBarType(d) ? 4 : 6;
	            xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);
	        } else {
	            xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];
	        }
	        // show labels regardless of the domain if value is null
	        if (d.value === null) {
	            if (xPos > $$.width) {
	                xPos = $$.width - box.width;
	            } else if (xPos < 0) {
	                xPos = 4;
	            }
	        }
	        return xPos;
	    };
	    c3_chart_internal_fn.getYForText = function (points, d, textElement) {
	        var $$ = this,
	            box = textElement.getBoundingClientRect(),
	            yPos;
	        if ($$.config.axis_rotated) {
	            yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;
	        } else {
	            yPos = points[2][1];
	            if (d.value < 0  || (d.value === 0 && !$$.hasPositiveValue)) {
	                yPos += box.height;
	                if ($$.isBarType(d) && $$.isSafari()) {
	                    yPos -= 3;
	                }
	                else if (!$$.isBarType(d) && $$.isChrome()) {
	                    yPos += 3;
	                }
	            } else {
	                yPos += $$.isBarType(d) ? -3 : -6;
	            }
	        }
	        // show labels regardless of the domain if value is null
	        if (d.value === null && !$$.config.axis_rotated) {
	            if (yPos < box.height) {
	                yPos = box.height;
	            } else if (yPos > this.height) {
	                yPos = this.height - 4;
	            }
	        }
	        return yPos;
	    };

	    c3_chart_internal_fn.setTargetType = function (targetIds, type) {
	        var $$ = this, config = $$.config;
	        $$.mapToTargetIds(targetIds).forEach(function (id) {
	            $$.withoutFadeIn[id] = (type === config.data_types[id]);
	            config.data_types[id] = type;
	        });
	        if (!targetIds) {
	            config.data_type = type;
	        }
	    };
	    c3_chart_internal_fn.hasType = function (type, targets) {
	        var $$ = this, types = $$.config.data_types, has = false;
	        targets = targets || $$.data.targets;
	        if (targets && targets.length) {
	            targets.forEach(function (target) {
	                var t = types[target.id];
	                if ((t && t.indexOf(type) >= 0) || (!t && type === 'line')) {
	                    has = true;
	                }
	            });
	        } else if (Object.keys(types).length) {
	            Object.keys(types).forEach(function (id) {
	                if (types[id] === type) { has = true; }
	            });
	        } else {
	            has = $$.config.data_type === type;
	        }
	        return has;
	    };
	    c3_chart_internal_fn.hasArcType = function (targets) {
	        return this.hasType('pie', targets) || this.hasType('donut', targets) || this.hasType('gauge', targets);
	    };
	    c3_chart_internal_fn.isLineType = function (d) {
	        var config = this.config, id = isString(d) ? d : d.id;
	        return !config.data_types[id] || ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0;
	    };
	    c3_chart_internal_fn.isStepType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
	    };
	    c3_chart_internal_fn.isSplineType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;
	    };
	    c3_chart_internal_fn.isAreaType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return ['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
	    };
	    c3_chart_internal_fn.isBarType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return this.config.data_types[id] === 'bar';
	    };
	    c3_chart_internal_fn.isScatterType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return this.config.data_types[id] === 'scatter';
	    };
	    c3_chart_internal_fn.isPieType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return this.config.data_types[id] === 'pie';
	    };
	    c3_chart_internal_fn.isGaugeType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return this.config.data_types[id] === 'gauge';
	    };
	    c3_chart_internal_fn.isDonutType = function (d) {
	        var id = isString(d) ? d : d.id;
	        return this.config.data_types[id] === 'donut';
	    };
	    c3_chart_internal_fn.isArcType = function (d) {
	        return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);
	    };
	    c3_chart_internal_fn.lineData = function (d) {
	        return this.isLineType(d) ? [d] : [];
	    };
	    c3_chart_internal_fn.arcData = function (d) {
	        return this.isArcType(d.data) ? [d] : [];
	    };
	    /* not used
	     function scatterData(d) {
	     return isScatterType(d) ? d.values : [];
	     }
	     */
	    c3_chart_internal_fn.barData = function (d) {
	        return this.isBarType(d) ? d.values : [];
	    };
	    c3_chart_internal_fn.lineOrScatterData = function (d) {
	        return this.isLineType(d) || this.isScatterType(d) ? d.values : [];
	    };
	    c3_chart_internal_fn.barOrLineData = function (d) {
	        return this.isBarType(d) || this.isLineType(d) ? d.values : [];
	    };
	    c3_chart_internal_fn.isInterpolationType = function (type) {
	        return ['linear', 'linear-closed', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone'].indexOf(type) >= 0;
	    };

	    c3_chart_internal_fn.initGrid = function () {
	        var $$ = this, config = $$.config, d3 = $$.d3;
	        $$.grid = $$.main.append('g')
	            .attr("clip-path", $$.clipPathForGrid)
	            .attr('class', CLASS.grid);
	        if (config.grid_x_show) {
	            $$.grid.append("g").attr("class", CLASS.xgrids);
	        }
	        if (config.grid_y_show) {
	            $$.grid.append('g').attr('class', CLASS.ygrids);
	        }
	        if (config.grid_focus_show) {
	            $$.grid.append('g')
	                .attr("class", CLASS.xgridFocus)
	                .append('line')
	                .attr('class', CLASS.xgridFocus);
	        }
	        $$.xgrid = d3.selectAll([]);
	        if (!config.grid_lines_front) { $$.initGridLines(); }
	    };
	    c3_chart_internal_fn.initGridLines = function () {
	        var $$ = this, d3 = $$.d3;
	        $$.gridLines = $$.main.append('g')
	            .attr("clip-path", $$.clipPathForGrid)
	            .attr('class', CLASS.grid + ' ' + CLASS.gridLines);
	        $$.gridLines.append('g').attr("class", CLASS.xgridLines);
	        $$.gridLines.append('g').attr('class', CLASS.ygridLines);
	        $$.xgridLines = d3.selectAll([]);
	    };
	    c3_chart_internal_fn.updateXGrid = function (withoutUpdate) {
	        var $$ = this, config = $$.config, d3 = $$.d3,
	            xgridData = $$.generateGridData(config.grid_x_type, $$.x),
	            tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;

	        $$.xgridAttr = config.axis_rotated ? {
	            'x1': 0,
	            'x2': $$.width,
	            'y1': function (d) { return $$.x(d) - tickOffset; },
	            'y2': function (d) { return $$.x(d) - tickOffset; }
	        } : {
	            'x1': function (d) { return $$.x(d) + tickOffset; },
	            'x2': function (d) { return $$.x(d) + tickOffset; },
	            'y1': 0,
	            'y2': $$.height
	        };

	        $$.xgrid = $$.main.select('.' + CLASS.xgrids).selectAll('.' + CLASS.xgrid)
	            .data(xgridData);
	        $$.xgrid.enter().append('line').attr("class", CLASS.xgrid);
	        if (!withoutUpdate) {
	            $$.xgrid.attr($$.xgridAttr)
	                .style("opacity", function () { return +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1') === (config.axis_rotated ? $$.height : 0) ? 0 : 1; });
	        }
	        $$.xgrid.exit().remove();
	    };

	    c3_chart_internal_fn.updateYGrid = function () {
	        var $$ = this, config = $$.config,
	            gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);
	        $$.ygrid = $$.main.select('.' + CLASS.ygrids).selectAll('.' + CLASS.ygrid)
	            .data(gridValues);
	        $$.ygrid.enter().append('line')
	            .attr('class', CLASS.ygrid);
	        $$.ygrid.attr("x1", config.axis_rotated ? $$.y : 0)
	            .attr("x2", config.axis_rotated ? $$.y : $$.width)
	            .attr("y1", config.axis_rotated ? 0 : $$.y)
	            .attr("y2", config.axis_rotated ? $$.height : $$.y);
	        $$.ygrid.exit().remove();
	        $$.smoothLines($$.ygrid, 'grid');
	    };

	    c3_chart_internal_fn.gridTextAnchor = function (d) {
	        return d.position ? d.position : "end";
	    };
	    c3_chart_internal_fn.gridTextDx = function (d) {
	        return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;
	    };
	    c3_chart_internal_fn.xGridTextX = function (d) {
	        return d.position === 'start' ? -this.height : d.position === 'middle' ? -this.height / 2 : 0;
	    };
	    c3_chart_internal_fn.yGridTextX = function (d) {
	        return d.position === 'start' ? 0 : d.position === 'middle' ? this.width / 2 : this.width;
	    };
	    c3_chart_internal_fn.updateGrid = function (duration) {
	        var $$ = this, main = $$.main, config = $$.config,
	            xgridLine, ygridLine, yv;

	        // hide if arc type
	        $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

	        main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
	        if (config.grid_x_show) {
	            $$.updateXGrid();
	        }
	        $$.xgridLines = main.select('.' + CLASS.xgridLines).selectAll('.' + CLASS.xgridLine)
	            .data(config.grid_x_lines);
	        // enter
	        xgridLine = $$.xgridLines.enter().append('g')
	            .attr("class", function (d) { return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : ''); });
	        xgridLine.append('line')
	            .style("opacity", 0);
	        xgridLine.append('text')
	            .attr("text-anchor", $$.gridTextAnchor)
	            .attr("transform", config.axis_rotated ? "" : "rotate(-90)")
	            .attr('dx', $$.gridTextDx)
	            .attr('dy', -5)
	            .style("opacity", 0);
	        // udpate
	        // done in d3.transition() of the end of this function
	        // exit
	        $$.xgridLines.exit().transition().duration(duration)
	            .style("opacity", 0)
	            .remove();

	        // Y-Grid
	        if (config.grid_y_show) {
	            $$.updateYGrid();
	        }
	        $$.ygridLines = main.select('.' + CLASS.ygridLines).selectAll('.' + CLASS.ygridLine)
	            .data(config.grid_y_lines);
	        // enter
	        ygridLine = $$.ygridLines.enter().append('g')
	            .attr("class", function (d) { return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : ''); });
	        ygridLine.append('line')
	            .style("opacity", 0);
	        ygridLine.append('text')
	            .attr("text-anchor", $$.gridTextAnchor)
	            .attr("transform", config.axis_rotated ? "rotate(-90)" : "")
	            .attr('dx', $$.gridTextDx)
	            .attr('dy', -5)
	            .style("opacity", 0);
	        // update
	        yv = $$.yv.bind($$);
	        $$.ygridLines.select('line')
	          .transition().duration(duration)
	            .attr("x1", config.axis_rotated ? yv : 0)
	            .attr("x2", config.axis_rotated ? yv : $$.width)
	            .attr("y1", config.axis_rotated ? 0 : yv)
	            .attr("y2", config.axis_rotated ? $$.height : yv)
	            .style("opacity", 1);
	        $$.ygridLines.select('text')
	          .transition().duration(duration)
	            .attr("x", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$))
	            .attr("y", yv)
	            .text(function (d) { return d.text; })
	            .style("opacity", 1);
	        // exit
	        $$.ygridLines.exit().transition().duration(duration)
	            .style("opacity", 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawGrid = function (withTransition) {
	        var $$ = this, config = $$.config, xv = $$.xv.bind($$),
	            lines = $$.xgridLines.select('line'),
	            texts = $$.xgridLines.select('text');
	        return [
	            (withTransition ? lines.transition() : lines)
	                .attr("x1", config.axis_rotated ? 0 : xv)
	                .attr("x2", config.axis_rotated ? $$.width : xv)
	                .attr("y1", config.axis_rotated ? xv : 0)
	                .attr("y2", config.axis_rotated ? xv : $$.height)
	                .style("opacity", 1),
	            (withTransition ? texts.transition() : texts)
	                .attr("x", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$))
	                .attr("y", xv)
	                .text(function (d) { return d.text; })
	                .style("opacity", 1)
	        ];
	    };
	    c3_chart_internal_fn.showXGridFocus = function (selectedData) {
	        var $$ = this, config = $$.config,
	            dataToShow = selectedData.filter(function (d) { return d && isValue(d.value); }),
	            focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus),
	            xx = $$.xx.bind($$);
	        if (! config.tooltip_show) { return; }
	        // Hide when scatter plot exists
	        if ($$.hasType('scatter') || $$.hasArcType()) { return; }
	        focusEl
	            .style("visibility", "visible")
	            .data([dataToShow[0]])
	            .attr(config.axis_rotated ? 'y1' : 'x1', xx)
	            .attr(config.axis_rotated ? 'y2' : 'x2', xx);
	        $$.smoothLines(focusEl, 'grid');
	    };
	    c3_chart_internal_fn.hideXGridFocus = function () {
	        this.main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
	    };
	    c3_chart_internal_fn.updateXgridFocus = function () {
	        var $$ = this, config = $$.config;
	        $$.main.select('line.' + CLASS.xgridFocus)
	            .attr("x1", config.axis_rotated ? 0 : -10)
	            .attr("x2", config.axis_rotated ? $$.width : -10)
	            .attr("y1", config.axis_rotated ? -10 : 0)
	            .attr("y2", config.axis_rotated ? -10 : $$.height);
	    };
	    c3_chart_internal_fn.generateGridData = function (type, scale) {
	        var $$ = this,
	            gridData = [], xDomain, firstYear, lastYear, i,
	            tickNum = $$.main.select("." + CLASS.axisX).selectAll('.tick').size();
	        if (type === 'year') {
	            xDomain = $$.getXDomain();
	            firstYear = xDomain[0].getFullYear();
	            lastYear = xDomain[1].getFullYear();
	            for (i = firstYear; i <= lastYear; i++) {
	                gridData.push(new Date(i + '-01-01 00:00:00'));
	            }
	        } else {
	            gridData = scale.ticks(10);
	            if (gridData.length > tickNum) { // use only int
	                gridData = gridData.filter(function (d) { return ("" + d).indexOf('.') < 0; });
	            }
	        }
	        return gridData;
	    };
	    c3_chart_internal_fn.getGridFilterToRemove = function (params) {
	        return params ? function (line) {
	            var found = false;
	            [].concat(params).forEach(function (param) {
	                if ((('value' in param && line.value === param.value) || ('class' in param && line['class'] === param['class']))) {
	                    found = true;
	                }
	            });
	            return found;
	        } : function () { return true; };
	    };
	    c3_chart_internal_fn.removeGridLines = function (params, forX) {
	        var $$ = this, config = $$.config,
	            toRemove = $$.getGridFilterToRemove(params),
	            toShow = function (line) { return !toRemove(line); },
	            classLines = forX ? CLASS.xgridLines : CLASS.ygridLines,
	            classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;
	        $$.main.select('.' + classLines).selectAll('.' + classLine).filter(toRemove)
	            .transition().duration(config.transition_duration)
	            .style('opacity', 0).remove();
	        if (forX) {
	            config.grid_x_lines = config.grid_x_lines.filter(toShow);
	        } else {
	            config.grid_y_lines = config.grid_y_lines.filter(toShow);
	        }
	    };

	    c3_chart_internal_fn.initTooltip = function () {
	        var $$ = this, config = $$.config, i;
	        $$.tooltip = $$.selectChart
	            .style("position", "relative")
	          .append("div")
	            .attr('class', CLASS.tooltipContainer)
	            .style("position", "absolute")
	            .style("pointer-events", "none")
	            .style("display", "none");
	        // Show tooltip if needed
	        if (config.tooltip_init_show) {
	            if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {
	                config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);
	                for (i = 0; i < $$.data.targets[0].values.length; i++) {
	                    if (($$.data.targets[0].values[i].x - config.tooltip_init_x) === 0) { break; }
	                }
	                config.tooltip_init_x = i;
	            }
	            $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {
	                return $$.addName(d.values[config.tooltip_init_x]);
	            }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));
	            $$.tooltip.style("top", config.tooltip_init_position.top)
	                .style("left", config.tooltip_init_position.left)
	                .style("display", "block");
	        }
	    };
	    c3_chart_internal_fn.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {
	        var $$ = this, config = $$.config,
	            titleFormat = config.tooltip_format_title || defaultTitleFormat,
	            nameFormat = config.tooltip_format_name || function (name) { return name; },
	            valueFormat = config.tooltip_format_value || defaultValueFormat,
	            text, i, title, value, name, bgcolor,
	            orderAsc = $$.isOrderAsc();

	        if (config.data_groups.length === 0) {
	            d.sort(function(a, b){
	                var v1 = a ? a.value : null, v2 = b ? b.value : null;
	                return orderAsc ? v1 - v2 : v2 - v1;
	            });
	        } else {
	            var ids = $$.orderTargets($$.data.targets).map(function (i) {
	                return i.id;
	            });
	            d.sort(function(a, b) {
	                var v1 = a ? a.value : null, v2 = b ? b.value : null;
	                if (v1 > 0 && v2 > 0) {
	                    v1 = a ? ids.indexOf(a.id) : null;
	                    v2 = b ? ids.indexOf(b.id) : null;
	                }
	                return orderAsc ? v1 - v2 : v2 - v1;
	            });
	        }

	        for (i = 0; i < d.length; i++) {
	            if (! (d[i] && (d[i].value || d[i].value === 0))) { continue; }

	            if (! text) {
	                title = sanitise(titleFormat ? titleFormat(d[i].x) : d[i].x);
	                text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
	            }

	            value = sanitise(valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index, d));
	            if (value !== undefined) {
	                // Skip elements when their name is set to null
	                if (d[i].name === null) { continue; }
	                name = sanitise(nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index));
	                bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);

	                text += "<tr class='" + $$.CLASS.tooltipName + "-" + $$.getTargetSelectorSuffix(d[i].id) + "'>";
	                text += "<td class='name'><span style='background-color:" + bgcolor + "'></span>" + name + "</td>";
	                text += "<td class='value'>" + value + "</td>";
	                text += "</tr>";
	            }
	        }
	        return text + "</table>";
	    };
	    c3_chart_internal_fn.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {
	        var $$ = this, config = $$.config, d3 = $$.d3;
	        var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;
	        var forArc = $$.hasArcType(),
	            mouse = d3.mouse(element);
	      // Determin tooltip position
	        if (forArc) {
	            tooltipLeft = (($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2) + mouse[0];
	            tooltipTop = ($$.height / 2) + mouse[1] + 20;
	        } else {
	            svgLeft = $$.getSvgLeft(true);
	            if (config.axis_rotated) {
	                tooltipLeft = svgLeft + mouse[0] + 100;
	                tooltipRight = tooltipLeft + tWidth;
	                chartRight = $$.currentWidth - $$.getCurrentPaddingRight();
	                tooltipTop = $$.x(dataToShow[0].x) + 20;
	            } else {
	                tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;
	                tooltipRight = tooltipLeft + tWidth;
	                chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();
	                tooltipTop = mouse[1] + 15;
	            }

	            if (tooltipRight > chartRight) {
	                // 20 is needed for Firefox to keep tooltip width
	                tooltipLeft -= tooltipRight - chartRight + 20;
	            }
	            if (tooltipTop + tHeight > $$.currentHeight) {
	                tooltipTop -= tHeight + 30;
	            }
	        }
	        if (tooltipTop < 0) {
	            tooltipTop = 0;
	        }
	        return {top: tooltipTop, left: tooltipLeft};
	    };
	    c3_chart_internal_fn.showTooltip = function (selectedData, element) {
	        var $$ = this, config = $$.config;
	        var tWidth, tHeight, position;
	        var forArc = $$.hasArcType(),
	            dataToShow = selectedData.filter(function (d) { return d && isValue(d.value); }),
	            positionFunction = config.tooltip_position || c3_chart_internal_fn.tooltipPosition;
	        if (dataToShow.length === 0 || !config.tooltip_show) {
	            return;
	        }
	        $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style("display", "block");

	        // Get tooltip dimensions
	        tWidth = $$.tooltip.property('offsetWidth');
	        tHeight = $$.tooltip.property('offsetHeight');

	        position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);
	        // Set tooltip
	        $$.tooltip
	            .style("top", position.top + "px")
	            .style("left", position.left + 'px');
	    };
	    c3_chart_internal_fn.hideTooltip = function () {
	        this.tooltip.style("display", "none");
	    };

	    c3_chart_internal_fn.initLegend = function () {
	        var $$ = this;
	        $$.legendItemTextBox = {};
	        $$.legendHasRendered = false;
	        $$.legend = $$.svg.append("g").attr("transform", $$.getTranslate('legend'));
	        if (!$$.config.legend_show) {
	            $$.legend.style('visibility', 'hidden');
	            $$.hiddenLegendIds = $$.mapToIds($$.data.targets);
	            return;
	        }
	        // MEMO: call here to update legend box and tranlate for all
	        // MEMO: translate will be upated by this, so transform not needed in updateLegend()
	        $$.updateLegendWithDefaults();
	    };
	    c3_chart_internal_fn.updateLegendWithDefaults = function () {
	        var $$ = this;
	        $$.updateLegend($$.mapToIds($$.data.targets), {withTransform: false, withTransitionForTransform: false, withTransition: false});
	    };
	    c3_chart_internal_fn.updateSizeForLegend = function (legendHeight, legendWidth) {
	        var $$ = this, config = $$.config, insetLegendPosition = {
	            top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,
	            left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5
	        };

	        $$.margin3 = {
	            top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,
	            right: NaN,
	            bottom: 0,
	            left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0
	        };
	    };
	    c3_chart_internal_fn.transformLegend = function (withTransition) {
	        var $$ = this;
	        (withTransition ? $$.legend.transition() : $$.legend).attr("transform", $$.getTranslate('legend'));
	    };
	    c3_chart_internal_fn.updateLegendStep = function (step) {
	        this.legendStep = step;
	    };
	    c3_chart_internal_fn.updateLegendItemWidth = function (w) {
	        this.legendItemWidth = w;
	    };
	    c3_chart_internal_fn.updateLegendItemHeight = function (h) {
	        this.legendItemHeight = h;
	    };
	    c3_chart_internal_fn.getLegendWidth = function () {
	        var $$ = this;
	        return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;
	    };
	    c3_chart_internal_fn.getLegendHeight = function () {
	        var $$ = this, h = 0;
	        if ($$.config.legend_show) {
	            if ($$.isLegendRight) {
	                h = $$.currentHeight;
	            } else {
	                h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);
	            }
	        }
	        return h;
	    };
	    c3_chart_internal_fn.opacityForLegend = function (legendItem) {
	        return legendItem.classed(CLASS.legendItemHidden) ? null : 1;
	    };
	    c3_chart_internal_fn.opacityForUnfocusedLegend = function (legendItem) {
	        return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;
	    };
	    c3_chart_internal_fn.toggleFocusLegend = function (targetIds, focus) {
	        var $$ = this;
	        targetIds = $$.mapToTargetIds(targetIds);
	        $$.legend.selectAll('.' + CLASS.legendItem)
	            .filter(function (id) { return targetIds.indexOf(id) >= 0; })
	            .classed(CLASS.legendItemFocused, focus)
	          .transition().duration(100)
	            .style('opacity', function () {
	                var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;
	                return opacity.call($$, $$.d3.select(this));
	            });
	    };
	    c3_chart_internal_fn.revertLegend = function () {
	        var $$ = this, d3 = $$.d3;
	        $$.legend.selectAll('.' + CLASS.legendItem)
	            .classed(CLASS.legendItemFocused, false)
	            .transition().duration(100)
	            .style('opacity', function () { return $$.opacityForLegend(d3.select(this)); });
	    };
	    c3_chart_internal_fn.showLegend = function (targetIds) {
	        var $$ = this, config = $$.config;
	        if (!config.legend_show) {
	            config.legend_show = true;
	            $$.legend.style('visibility', 'visible');
	            if (!$$.legendHasRendered) {
	                $$.updateLegendWithDefaults();
	            }
	        }
	        $$.removeHiddenLegendIds(targetIds);
	        $$.legend.selectAll($$.selectorLegends(targetIds))
	            .style('visibility', 'visible')
	            .transition()
	            .style('opacity', function () { return $$.opacityForLegend($$.d3.select(this)); });
	    };
	    c3_chart_internal_fn.hideLegend = function (targetIds) {
	        var $$ = this, config = $$.config;
	        if (config.legend_show && isEmpty(targetIds)) {
	            config.legend_show = false;
	            $$.legend.style('visibility', 'hidden');
	        }
	        $$.addHiddenLegendIds(targetIds);
	        $$.legend.selectAll($$.selectorLegends(targetIds))
	            .style('opacity', 0)
	            .style('visibility', 'hidden');
	    };
	    c3_chart_internal_fn.clearLegendItemTextBoxCache = function () {
	        this.legendItemTextBox = {};
	    };
	    c3_chart_internal_fn.updateLegend = function (targetIds, options, transitions) {
	        var $$ = this, config = $$.config;
	        var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect, x1ForLegendTile, x2ForLegendTile, yForLegendTile;
	        var paddingTop = 4, paddingRight = 10, maxWidth = 0, maxHeight = 0, posMin = 10, tileWidth = config.legend_item_tile_width + 5;
	        var l, totalLength = 0, offsets = {}, widths = {}, heights = {}, margins = [0], steps = {}, step = 0;
	        var withTransition, withTransitionForTransform;
	        var texts, rects, tiles, background;

	        // Skip elements when their name is set to null
	        targetIds = targetIds.filter(function(id) {
	            return !isDefined(config.data_names[id]) || config.data_names[id] !== null;
	        });

	        options = options || {};
	        withTransition = getOption(options, "withTransition", true);
	        withTransitionForTransform = getOption(options, "withTransitionForTransform", true);

	        function getTextBox(textElement, id) {
	            if (!$$.legendItemTextBox[id]) {
	                $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem, textElement);
	            }
	            return $$.legendItemTextBox[id];
	        }

	        function updatePositions(textElement, id, index) {
	            var reset = index === 0, isLast = index === targetIds.length - 1,
	                box = getTextBox(textElement, id),
	                itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight) + config.legend_padding,
	                itemHeight = box.height + paddingTop,
	                itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth,
	                areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(),
	                margin, maxLength;

	            // MEMO: care about condifion of step, totalLength
	            function updateValues(id, withoutStep) {
	                if (!withoutStep) {
	                    margin = (areaLength - totalLength - itemLength) / 2;
	                    if (margin < posMin) {
	                        margin = (areaLength - itemLength) / 2;
	                        totalLength = 0;
	                        step++;
	                    }
	                }
	                steps[id] = step;
	                margins[step] = $$.isLegendInset ? 10 : margin;
	                offsets[id] = totalLength;
	                totalLength += itemLength;
	            }

	            if (reset) {
	                totalLength = 0;
	                step = 0;
	                maxWidth = 0;
	                maxHeight = 0;
	            }

	            if (config.legend_show && !$$.isLegendToShow(id)) {
	                widths[id] = heights[id] = steps[id] = offsets[id] = 0;
	                return;
	            }

	            widths[id] = itemWidth;
	            heights[id] = itemHeight;

	            if (!maxWidth || itemWidth >= maxWidth) { maxWidth = itemWidth; }
	            if (!maxHeight || itemHeight >= maxHeight) { maxHeight = itemHeight; }
	            maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;

	            if (config.legend_equally) {
	                Object.keys(widths).forEach(function (id) { widths[id] = maxWidth; });
	                Object.keys(heights).forEach(function (id) { heights[id] = maxHeight; });
	                margin = (areaLength - maxLength * targetIds.length) / 2;
	                if (margin < posMin) {
	                    totalLength = 0;
	                    step = 0;
	                    targetIds.forEach(function (id) { updateValues(id); });
	                }
	                else {
	                    updateValues(id, true);
	                }
	            } else {
	                updateValues(id);
	            }
	        }

	        if ($$.isLegendInset) {
	            step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;
	            $$.updateLegendStep(step);
	        }

	        if ($$.isLegendRight) {
	            xForLegend = function (id) { return maxWidth * steps[id]; };
	            yForLegend = function (id) { return margins[steps[id]] + offsets[id]; };
	        } else if ($$.isLegendInset) {
	            xForLegend = function (id) { return maxWidth * steps[id] + 10; };
	            yForLegend = function (id) { return margins[steps[id]] + offsets[id]; };
	        } else {
	            xForLegend = function (id) { return margins[steps[id]] + offsets[id]; };
	            yForLegend = function (id) { return maxHeight * steps[id]; };
	        }
	        xForLegendText = function (id, i) { return xForLegend(id, i) + 4 + config.legend_item_tile_width; };
	        yForLegendText = function (id, i) { return yForLegend(id, i) + 9; };
	        xForLegendRect = function (id, i) { return xForLegend(id, i); };
	        yForLegendRect = function (id, i) { return yForLegend(id, i) - 5; };
	        x1ForLegendTile = function (id, i) { return xForLegend(id, i) - 2; };
	        x2ForLegendTile = function (id, i) { return xForLegend(id, i) - 2 + config.legend_item_tile_width; };
	        yForLegendTile = function (id, i) { return yForLegend(id, i) + 4; };

	        // Define g for legend area
	        l = $$.legend.selectAll('.' + CLASS.legendItem)
	            .data(targetIds)
	            .enter().append('g')
	            .attr('class', function (id) { return $$.generateClass(CLASS.legendItem, id); })
	            .style('visibility', function (id) { return $$.isLegendToShow(id) ? 'visible' : 'hidden'; })
	            .style('cursor', 'pointer')
	            .on('click', function (id) {
	                if (config.legend_item_onclick) {
	                    config.legend_item_onclick.call($$, id);
	                } else {
	                    if ($$.d3.event.altKey) {
	                        $$.api.hide();
	                        $$.api.show(id);
	                    } else {
	                        $$.api.toggle(id);
	                        $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();
	                    }
	                }
	            })
	            .on('mouseover', function (id) {
	                if (config.legend_item_onmouseover) {
	                    config.legend_item_onmouseover.call($$, id);
	                }
	                else {
	                    $$.d3.select(this).classed(CLASS.legendItemFocused, true);
	                    if (!$$.transiting && $$.isTargetToShow(id)) {
	                        $$.api.focus(id);
	                    }
	                }
	            })
	            .on('mouseout', function (id) {
	                if (config.legend_item_onmouseout) {
	                    config.legend_item_onmouseout.call($$, id);
	                }
	                else {
	                    $$.d3.select(this).classed(CLASS.legendItemFocused, false);
	                    $$.api.revert();
	                }
	            });
	        l.append('text')
	            .text(function (id) { return isDefined(config.data_names[id]) ? config.data_names[id] : id; })
	            .each(function (id, i) { updatePositions(this, id, i); })
	            .style("pointer-events", "none")
	            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200)
	            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);
	        l.append('rect')
	            .attr("class", CLASS.legendItemEvent)
	            .style('fill-opacity', 0)
	            .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200)
	            .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);
	        l.append('line')
	            .attr('class', CLASS.legendItemTile)
	            .style('stroke', $$.color)
	            .style("pointer-events", "none")
	            .attr('x1', $$.isLegendRight || $$.isLegendInset ? x1ForLegendTile : -200)
	            .attr('y1', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile)
	            .attr('x2', $$.isLegendRight || $$.isLegendInset ? x2ForLegendTile : -200)
	            .attr('y2', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile)
	            .attr('stroke-width', config.legend_item_tile_height);

	        // Set background for inset legend
	        background = $$.legend.select('.' + CLASS.legendBackground + ' rect');
	        if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {
	            background = $$.legend.insert('g', '.' + CLASS.legendItem)
	                .attr("class", CLASS.legendBackground)
	                .append('rect');
	        }

	        texts = $$.legend.selectAll('text')
	            .data(targetIds)
	            .text(function (id) { return isDefined(config.data_names[id]) ? config.data_names[id] : id; }) // MEMO: needed for update
	            .each(function (id, i) { updatePositions(this, id, i); });
	        (withTransition ? texts.transition() : texts)
	            .attr('x', xForLegendText)
	            .attr('y', yForLegendText);

	        rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent)
	            .data(targetIds);
	        (withTransition ? rects.transition() : rects)
	            .attr('width', function (id) { return widths[id]; })
	            .attr('height', function (id) { return heights[id]; })
	            .attr('x', xForLegendRect)
	            .attr('y', yForLegendRect);

	        tiles = $$.legend.selectAll('line.' + CLASS.legendItemTile)
	                .data(targetIds);
	            (withTransition ? tiles.transition() : tiles)
	                .style('stroke', $$.color)
	                .attr('x1', x1ForLegendTile)
	                .attr('y1', yForLegendTile)
	                .attr('x2', x2ForLegendTile)
	                .attr('y2', yForLegendTile);

	        if (background) {
	            (withTransition ? background.transition() : background)
	                .attr('height', $$.getLegendHeight() - 12)
	                .attr('width', maxWidth * (step + 1) + 10);
	        }

	        // toggle legend state
	        $$.legend.selectAll('.' + CLASS.legendItem)
	            .classed(CLASS.legendItemHidden, function (id) { return !$$.isTargetToShow(id); });

	        // Update all to reflect change of legend
	        $$.updateLegendItemWidth(maxWidth);
	        $$.updateLegendItemHeight(maxHeight);
	        $$.updateLegendStep(step);
	        // Update size and scale
	        $$.updateSizes();
	        $$.updateScales();
	        $$.updateSvgSize();
	        // Update g positions
	        $$.transformAll(withTransitionForTransform, transitions);
	        $$.legendHasRendered = true;
	    };

	    c3_chart_internal_fn.initTitle = function () {
	        var $$ = this;
	        $$.title = $$.svg.append("text")
	              .text($$.config.title_text)
	              .attr("class", $$.CLASS.title);
	    };
	    c3_chart_internal_fn.redrawTitle = function () {
	        var $$ = this;
	        $$.title
	              .attr("x", $$.xForTitle.bind($$))
	              .attr("y", $$.yForTitle.bind($$));
	    };
	    c3_chart_internal_fn.xForTitle = function () {
	        var $$ = this, config = $$.config, position = config.title_position || 'left', x;
	        if (position.indexOf('right') >= 0) {
	            x = $$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width - config.title_padding.right;
	        } else if (position.indexOf('center') >= 0) {
	            x = ($$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width) / 2;
	        } else { // left
	            x = config.title_padding.left;
	        }
	        return x;
	    };
	    c3_chart_internal_fn.yForTitle = function () {
	        var $$ = this;
	        return $$.config.title_padding.top + $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).height;
	    };
	    c3_chart_internal_fn.getTitlePadding = function() {
	        var $$ = this;
	        return $$.yForTitle() + $$.config.title_padding.bottom;
	    };

	    function Axis(owner) {
	        API.call(this, owner);
	    }

	    inherit(API, Axis);

	    Axis.prototype.init = function init() {

	        var $$ = this.owner, config = $$.config, main = $$.main;
	        $$.axes.x = main.append("g")
	            .attr("class", CLASS.axis + ' ' + CLASS.axisX)
	            .attr("clip-path", $$.clipPathForXAxis)
	            .attr("transform", $$.getTranslate('x'))
	            .style("visibility", config.axis_x_show ? 'visible' : 'hidden');
	        $$.axes.x.append("text")
	            .attr("class", CLASS.axisXLabel)
	            .attr("transform", config.axis_rotated ? "rotate(-90)" : "")
	            .style("text-anchor", this.textAnchorForXAxisLabel.bind(this));
	        $$.axes.y = main.append("g")
	            .attr("class", CLASS.axis + ' ' + CLASS.axisY)
	            .attr("clip-path", config.axis_y_inner ? "" : $$.clipPathForYAxis)
	            .attr("transform", $$.getTranslate('y'))
	            .style("visibility", config.axis_y_show ? 'visible' : 'hidden');
	        $$.axes.y.append("text")
	            .attr("class", CLASS.axisYLabel)
	            .attr("transform", config.axis_rotated ? "" : "rotate(-90)")
	            .style("text-anchor", this.textAnchorForYAxisLabel.bind(this));

	        $$.axes.y2 = main.append("g")
	            .attr("class", CLASS.axis + ' ' + CLASS.axisY2)
	            // clip-path?
	            .attr("transform", $$.getTranslate('y2'))
	            .style("visibility", config.axis_y2_show ? 'visible' : 'hidden');
	        $$.axes.y2.append("text")
	            .attr("class", CLASS.axisY2Label)
	            .attr("transform", config.axis_rotated ? "" : "rotate(-90)")
	            .style("text-anchor", this.textAnchorForY2AxisLabel.bind(this));
	    };
	    Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
	        var $$ = this.owner, config = $$.config,
	            axisParams = {
	                isCategory: $$.isCategorized(),
	                withOuterTick: withOuterTick,
	                tickMultiline: config.axis_x_tick_multiline,
	                tickWidth: config.axis_x_tick_width,
	                tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,
	                withoutTransition: withoutTransition,
	            },
	            axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient);

	        if ($$.isTimeSeries() && tickValues && typeof tickValues !== "function") {
	            tickValues = tickValues.map(function (v) { return $$.parseDate(v); });
	        }

	        // Set tick
	        axis.tickFormat(tickFormat).tickValues(tickValues);
	        if ($$.isCategorized()) {
	            axis.tickCentered(config.axis_x_tick_centered);
	            if (isEmpty(config.axis_x_tick_culling)) {
	                config.axis_x_tick_culling = false;
	            }
	        }

	        return axis;
	    };
	    Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {
	        var $$ = this.owner, config = $$.config, tickValues;
	        if (config.axis_x_tick_fit || config.axis_x_tick_count) {
	            tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());
	        }
	        if (axis) {
	            axis.tickValues(tickValues);
	        } else {
	            $$.xAxis.tickValues(tickValues);
	            $$.subXAxis.tickValues(tickValues);
	        }
	        return tickValues;
	    };
	    Axis.prototype.getYAxis = function getYAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
	        var $$ = this.owner, config = $$.config,
	            axisParams = {
	                withOuterTick: withOuterTick,
	                withoutTransition: withoutTransition,
	                tickTextRotate: withoutRotateTickText ? 0 : config.axis_y_tick_rotate
	            },
	            axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient).tickFormat(tickFormat);
	        if ($$.isTimeSeriesY()) {
	            axis.ticks($$.d3.time[config.axis_y_tick_time_value], config.axis_y_tick_time_interval);
	        } else {
	            axis.tickValues(tickValues);
	        }
	        return axis;
	    };
	    Axis.prototype.getId = function getId(id) {
	        var config = this.owner.config;
	        return id in config.data_axes ? config.data_axes[id] : 'y';
	    };
	    Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {
	        var $$ = this.owner, config = $$.config,
	            format = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function (v) { return v < 0 ? v.toFixed(0) : v; };
	        if (config.axis_x_tick_format) {
	            if (isFunction(config.axis_x_tick_format)) {
	                format = config.axis_x_tick_format;
	            } else if ($$.isTimeSeries()) {
	                format = function (date) {
	                    return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : "";
	                };
	            }
	        }
	        return isFunction(format) ? function (v) { return format.call($$, v); } : format;
	    };
	    Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {
	        return tickValues ? tickValues : axis ? axis.tickValues() : undefined;
	    };
	    Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {
	        return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);
	    };
	    Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {
	        return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);
	    };
	    Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {
	        return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);
	    };
	    Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {
	        var $$ = this.owner, config = $$.config, option;
	        if (axisId === 'y') {
	            option = config.axis_y_label;
	        } else if (axisId === 'y2') {
	            option = config.axis_y2_label;
	        } else if (axisId === 'x') {
	            option = config.axis_x_label;
	        }
	        return option;
	    };
	    Axis.prototype.getLabelText = function getLabelText(axisId) {
	        var option = this.getLabelOptionByAxisId(axisId);
	        return isString(option) ? option : option ? option.text : null;
	    };
	    Axis.prototype.setLabelText = function setLabelText(axisId, text) {
	        var $$ = this.owner, config = $$.config,
	            option = this.getLabelOptionByAxisId(axisId);
	        if (isString(option)) {
	            if (axisId === 'y') {
	                config.axis_y_label = text;
	            } else if (axisId === 'y2') {
	                config.axis_y2_label = text;
	            } else if (axisId === 'x') {
	                config.axis_x_label = text;
	            }
	        } else if (option) {
	            option.text = text;
	        }
	    };
	    Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {
	        var option = this.getLabelOptionByAxisId(axisId),
	            position = (option && typeof option === 'object' && option.position) ? option.position : defaultPosition;
	        return {
	            isInner: position.indexOf('inner') >= 0,
	            isOuter: position.indexOf('outer') >= 0,
	            isLeft: position.indexOf('left') >= 0,
	            isCenter: position.indexOf('center') >= 0,
	            isRight: position.indexOf('right') >= 0,
	            isTop: position.indexOf('top') >= 0,
	            isMiddle: position.indexOf('middle') >= 0,
	            isBottom: position.indexOf('bottom') >= 0
	        };
	    };
	    Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {
	        return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');
	    };
	    Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {
	        return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
	    };
	    Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {
	        return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
	    };
	    Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {
	        return id === 'y2' ? this.getY2AxisLabelPosition() : id === 'y' ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();
	    };
	    Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {
	        return this.getLabelText('x');
	    };
	    Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {
	        return this.getLabelText('y');
	    };
	    Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {
	        return this.getLabelText('y2');
	    };
	    Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {
	        var $$ = this.owner;
	        if (forHorizontal) {
	            return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;
	        } else {
	            return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;
	        }
	    };
	    Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {
	        if (forHorizontal) {
	            return position.isLeft ? "0.5em" : position.isRight ? "-0.5em" : "0";
	        } else {
	            return position.isTop ? "-0.5em" : position.isBottom ? "0.5em" : "0";
	        }
	    };
	    Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {
	        if (forHorizontal) {
	            return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';
	        } else {
	            return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';
	        }
	    };
	    Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {
	        return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
	    };
	    Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {
	        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
	    };
	    Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {
	        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
	    };
	    Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {
	        return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
	    };
	    Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {
	        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
	    };
	    Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {
	        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
	    };
	    Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {
	        var $$ = this.owner, config = $$.config,
	            position = this.getXAxisLabelPosition();
	        if (config.axis_rotated) {
	            return position.isInner ? "1.2em" : -25 - this.getMaxTickWidth('x');
	        } else {
	            return position.isInner ? "-0.5em" : config.axis_x_height ? config.axis_x_height - 10 : "3em";
	        }
	    };
	    Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {
	        var $$ = this.owner,
	            position = this.getYAxisLabelPosition();
	        if ($$.config.axis_rotated) {
	            return position.isInner ? "-0.5em" : "3em";
	        } else {
	            return position.isInner ? "1.2em" : -10 - ($$.config.axis_y_inner ? 0 : (this.getMaxTickWidth('y') + 10));
	        }
	    };
	    Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {
	        var $$ = this.owner,
	            position = this.getY2AxisLabelPosition();
	        if ($$.config.axis_rotated) {
	            return position.isInner ? "1.2em" : "-2.2em";
	        } else {
	            return position.isInner ? "-0.5em" : 15 + ($$.config.axis_y2_inner ? 0 : (this.getMaxTickWidth('y2') + 15));
	        }
	    };
	    Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {
	        var $$ = this.owner;
	        return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());
	    };
	    Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {
	        var $$ = this.owner;
	        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());
	    };
	    Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {
	        var $$ = this.owner;
	        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());
	    };
	    Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {
	        var $$ = this.owner, config = $$.config,
	            maxWidth = 0, targetsToShow, scale, axis, dummy, svg;
	        if (withoutRecompute && $$.currentMaxTickWidths[id]) {
	            return $$.currentMaxTickWidths[id];
	        }
	        if ($$.svg) {
	            targetsToShow = $$.filterTargetsToShow($$.data.targets);
	            if (id === 'y') {
	                scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));
	                axis = this.getYAxis(scale, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, false, true, true);
	            } else if (id === 'y2') {
	                scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));
	                axis = this.getYAxis(scale, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, false, true, true);
	            } else {
	                scale = $$.x.copy().domain($$.getXDomain(targetsToShow));
	                axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);
	                this.updateXAxisTickValues(targetsToShow, axis);
	            }
	            dummy = $$.d3.select('body').append('div').classed('c3', true);
	            svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),
	            svg.append('g').call(axis).each(function () {
	                $$.d3.select(this).selectAll('text').each(function () {
	                    var box = this.getBoundingClientRect();
	                    if (maxWidth < box.width) { maxWidth = box.width; }
	                });
	                dummy.remove();
	            });
	        }
	        $$.currentMaxTickWidths[id] = maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;
	        return $$.currentMaxTickWidths[id];
	    };

	    Axis.prototype.updateLabels = function updateLabels(withTransition) {
	        var $$ = this.owner;
	        var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel),
	            axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel),
	            axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);
	        (withTransition ? axisXLabel.transition() : axisXLabel)
	            .attr("x", this.xForXAxisLabel.bind(this))
	            .attr("dx", this.dxForXAxisLabel.bind(this))
	            .attr("dy", this.dyForXAxisLabel.bind(this))
	            .text(this.textForXAxisLabel.bind(this));
	        (withTransition ? axisYLabel.transition() : axisYLabel)
	            .attr("x", this.xForYAxisLabel.bind(this))
	            .attr("dx", this.dxForYAxisLabel.bind(this))
	            .attr("dy", this.dyForYAxisLabel.bind(this))
	            .text(this.textForYAxisLabel.bind(this));
	        (withTransition ? axisY2Label.transition() : axisY2Label)
	            .attr("x", this.xForY2AxisLabel.bind(this))
	            .attr("dx", this.dxForY2AxisLabel.bind(this))
	            .attr("dy", this.dyForY2AxisLabel.bind(this))
	            .text(this.textForY2AxisLabel.bind(this));
	    };
	    Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {
	        var p = typeof padding === 'number' ? padding : padding[key];
	        if (!isValue(p)) {
	            return defaultValue;
	        }
	        if (padding.unit === 'ratio') {
	            return padding[key] * domainLength;
	        }
	        // assume padding is pixels if unit is not specified
	        return this.convertPixelsToAxisPadding(p, domainLength);
	    };
	    Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {
	        var $$ = this.owner,
	            length = $$.config.axis_rotated ? $$.width : $$.height;
	        return domainLength * (pixels / length);
	    };
	    Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {
	        var tickValues = values, targetCount, start, end, count, interval, i, tickValue;
	        if (tickCount) {
	            targetCount = isFunction(tickCount) ? tickCount() : tickCount;
	            // compute ticks according to tickCount
	            if (targetCount === 1) {
	                tickValues = [values[0]];
	            } else if (targetCount === 2) {
	                tickValues = [values[0], values[values.length - 1]];
	            } else if (targetCount > 2) {
	                count = targetCount - 2;
	                start = values[0];
	                end = values[values.length - 1];
	                interval = (end - start) / (count + 1);
	                // re-construct unique values
	                tickValues = [start];
	                for (i = 0; i < count; i++) {
	                    tickValue = +start + interval * (i + 1);
	                    tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);
	                }
	                tickValues.push(end);
	            }
	        }
	        if (!forTimeSeries) { tickValues = tickValues.sort(function (a, b) { return a - b; }); }
	        return tickValues;
	    };
	    Axis.prototype.generateTransitions = function generateTransitions(duration) {
	        var $$ = this.owner, axes = $$.axes;
	        return {
	            axisX: duration ? axes.x.transition().duration(duration) : axes.x,
	            axisY: duration ? axes.y.transition().duration(duration) : axes.y,
	            axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,
	            axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx
	        };
	    };
	    Axis.prototype.redraw = function redraw(transitions, isHidden) {
	        var $$ = this.owner;
	        $$.axes.x.style("opacity", isHidden ? 0 : 1);
	        $$.axes.y.style("opacity", isHidden ? 0 : 1);
	        $$.axes.y2.style("opacity", isHidden ? 0 : 1);
	        $$.axes.subx.style("opacity", isHidden ? 0 : 1);
	        transitions.axisX.call($$.xAxis);
	        transitions.axisY.call($$.yAxis);
	        transitions.axisY2.call($$.y2Axis);
	        transitions.axisSubX.call($$.subXAxis);
	    };

	    c3_chart_internal_fn.getClipPath = function (id) {
	        var isIE9 = window.navigator.appVersion.toLowerCase().indexOf("msie 9.") >= 0;
	        return "url(" + (isIE9 ? "" : document.URL.split('#')[0]) + "#" + id + ")";
	    };
	    c3_chart_internal_fn.appendClip = function (parent, id) {
	        return parent.append("clipPath").attr("id", id).append("rect");
	    };
	    c3_chart_internal_fn.getAxisClipX = function (forHorizontal) {
	        // axis line width + padding for left
	        var left = Math.max(30, this.margin.left);
	        return forHorizontal ? -(1 + left) : -(left - 1);
	    };
	    c3_chart_internal_fn.getAxisClipY = function (forHorizontal) {
	        return forHorizontal ? -20 : -this.margin.top;
	    };
	    c3_chart_internal_fn.getXAxisClipX = function () {
	        var $$ = this;
	        return $$.getAxisClipX(!$$.config.axis_rotated);
	    };
	    c3_chart_internal_fn.getXAxisClipY = function () {
	        var $$ = this;
	        return $$.getAxisClipY(!$$.config.axis_rotated);
	    };
	    c3_chart_internal_fn.getYAxisClipX = function () {
	        var $$ = this;
	        return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);
	    };
	    c3_chart_internal_fn.getYAxisClipY = function () {
	        var $$ = this;
	        return $$.getAxisClipY($$.config.axis_rotated);
	    };
	    c3_chart_internal_fn.getAxisClipWidth = function (forHorizontal) {
	        var $$ = this,
	            left = Math.max(30, $$.margin.left),
	            right = Math.max(30, $$.margin.right);
	        // width + axis line width + padding for left/right
	        return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;
	    };
	    c3_chart_internal_fn.getAxisClipHeight = function (forHorizontal) {
	        // less than 20 is not enough to show the axis label 'outer' without legend
	        return (forHorizontal ? this.margin.bottom : (this.margin.top + this.height)) + 20;
	    };
	    c3_chart_internal_fn.getXAxisClipWidth = function () {
	        var $$ = this;
	        return $$.getAxisClipWidth(!$$.config.axis_rotated);
	    };
	    c3_chart_internal_fn.getXAxisClipHeight = function () {
	        var $$ = this;
	        return $$.getAxisClipHeight(!$$.config.axis_rotated);
	    };
	    c3_chart_internal_fn.getYAxisClipWidth = function () {
	        var $$ = this;
	        return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);
	    };
	    c3_chart_internal_fn.getYAxisClipHeight = function () {
	        var $$ = this;
	        return $$.getAxisClipHeight($$.config.axis_rotated);
	    };

	    c3_chart_internal_fn.initPie = function () {
	        var $$ = this, d3 = $$.d3, config = $$.config;
	        $$.pie = d3.layout.pie().value(function (d) {
	            return d.values.reduce(function (a, b) { return a + b.value; }, 0);
	        });
	        if (!config.data_order) {
	            $$.pie.sort(null);
	        }
	    };

	    c3_chart_internal_fn.updateRadius = function () {
	        var $$ = this, config = $$.config,
	            w = config.gauge_width || config.donut_width;
	        $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2;
	        $$.radius = $$.radiusExpanded * 0.95;
	        $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;
	        $$.innerRadius = $$.hasType('donut') || $$.hasType('gauge') ? $$.radius * $$.innerRadiusRatio : 0;
	    };

	    c3_chart_internal_fn.updateArc = function () {
	        var $$ = this;
	        $$.svgArc = $$.getSvgArc();
	        $$.svgArcExpanded = $$.getSvgArcExpanded();
	        $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);
	    };

	    c3_chart_internal_fn.updateAngle = function (d) {
	        var $$ = this, config = $$.config,
	            found = false, index = 0,
	            gMin, gMax, gTic, gValue;

	        if (!config) {
	            return null;
	        }

	        $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {
	            if (! found && t.data.id === d.data.id) {
	                found = true;
	                d = t;
	                d.index = index;
	            }
	            index++;
	        });
	        if (isNaN(d.startAngle)) {
	            d.startAngle = 0;
	        }
	        if (isNaN(d.endAngle)) {
	            d.endAngle = d.startAngle;
	        }
	        if ($$.isGaugeType(d.data)) {
	            gMin = config.gauge_min;
	            gMax = config.gauge_max;
	            gTic = (Math.PI * (config.gauge_fullCircle ? 2 : 1)) / (gMax - gMin);
	            gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : (gMax - gMin);
	            d.startAngle = config.gauge_startingAngle;
	            d.endAngle = d.startAngle + gTic * gValue;
	        }
	        return found ? d : null;
	    };

	    c3_chart_internal_fn.getSvgArc = function () {
	        var $$ = this,
	            arc = $$.d3.svg.arc().outerRadius($$.radius).innerRadius($$.innerRadius),
	            newArc = function (d, withoutUpdate) {
	                var updated;
	                if (withoutUpdate) { return arc(d); } // for interpolate
	                updated = $$.updateAngle(d);
	                return updated ? arc(updated) : "M 0 0";
	            };
	        // TODO: extends all function
	        newArc.centroid = arc.centroid;
	        return newArc;
	    };

	    c3_chart_internal_fn.getSvgArcExpanded = function (rate) {
	        var $$ = this,
	            arc = $$.d3.svg.arc().outerRadius($$.radiusExpanded * (rate ? rate : 1)).innerRadius($$.innerRadius);
	        return function (d) {
	            var updated = $$.updateAngle(d);
	            return updated ? arc(updated) : "M 0 0";
	        };
	    };

	    c3_chart_internal_fn.getArc = function (d, withoutUpdate, force) {
	        return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : "M 0 0";
	    };


	    c3_chart_internal_fn.transformForArcLabel = function (d) {
	        var $$ = this, config = $$.config,
	            updated = $$.updateAngle(d), c, x, y, h, ratio, translate = "";
	        if (updated && !$$.hasType('gauge')) {
	            c = this.svgArc.centroid(updated);
	            x = isNaN(c[0]) ? 0 : c[0];
	            y = isNaN(c[1]) ? 0 : c[1];
	            h = Math.sqrt(x * x + y * y);
	            if ($$.hasType('donut') && config.donut_label_ratio) {
	                ratio = isFunction(config.donut_label_ratio) ? config.donut_label_ratio(d, $$.radius, h) : config.donut_label_ratio;
	            } else if ($$.hasType('pie') && config.pie_label_ratio) {
	                ratio = isFunction(config.pie_label_ratio) ? config.pie_label_ratio(d, $$.radius, h) : config.pie_label_ratio;
	            } else {
	                ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;
	            }
	            translate = "translate(" + (x * ratio) +  ',' + (y * ratio) +  ")";
	        }
	        return translate;
	    };

	    c3_chart_internal_fn.getArcRatio = function (d) {
	        var $$ = this,
	            config = $$.config,
	            whole = Math.PI * ($$.hasType('gauge') && !config.gauge_fullCircle ? 1 : 2);
	        return d ? (d.endAngle - d.startAngle) / whole : null;
	    };

	    c3_chart_internal_fn.convertToArcData = function (d) {
	        return this.addName({
	            id: d.data.id,
	            value: d.value,
	            ratio: this.getArcRatio(d),
	            index: d.index
	        });
	    };

	    c3_chart_internal_fn.textForArcLabel = function (d) {
	        var $$ = this,
	            updated, value, ratio, id, format;
	        if (! $$.shouldShowArcLabel()) { return ""; }
	        updated = $$.updateAngle(d);
	        value = updated ? updated.value : null;
	        ratio = $$.getArcRatio(updated);
	        id = d.data.id;
	        if (! $$.hasType('gauge') && ! $$.meetsArcLabelThreshold(ratio)) { return ""; }
	        format = $$.getArcLabelFormat();
	        return format ? format(value, ratio, id) : $$.defaultArcValueFormat(value, ratio);
	    };

	    c3_chart_internal_fn.expandArc = function (targetIds) {
	        var $$ = this, interval;

	        // MEMO: avoid to cancel transition
	        if ($$.transiting) {
	            interval = window.setInterval(function () {
	                if (!$$.transiting) {
	                    window.clearInterval(interval);
	                    if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {
	                        $$.expandArc(targetIds);
	                    }
	                }
	            }, 10);
	            return;
	        }

	        targetIds = $$.mapToTargetIds(targetIds);

	        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).each(function (d) {
	            if (! $$.shouldExpand(d.data.id)) { return; }
	            $$.d3.select(this).selectAll('path')
	                .transition().duration($$.expandDuration(d.data.id))
	                .attr("d", $$.svgArcExpanded)
	                .transition().duration($$.expandDuration(d.data.id) * 2)
	                .attr("d", $$.svgArcExpandedSub)
	                .each(function (d) {
	                    if ($$.isDonutType(d.data)) {
	                        // callback here
	                    }
	                });
	        });
	    };

	    c3_chart_internal_fn.unexpandArc = function (targetIds) {
	        var $$ = this;

	        if ($$.transiting) { return; }

	        targetIds = $$.mapToTargetIds(targetIds);

	        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).selectAll('path')
	            .transition().duration(function(d) {
	                return $$.expandDuration(d.data.id);
	            })
	            .attr("d", $$.svgArc);
	        $$.svg.selectAll('.' + CLASS.arc)
	            .style("opacity", 1);
	    };

	    c3_chart_internal_fn.expandDuration = function (id) {
	        var $$ = this, config = $$.config;

	        if ($$.isDonutType(id)) {
	            return config.donut_expand_duration;
	        } else if ($$.isGaugeType(id)) {
	            return config.gauge_expand_duration;
	        } else if ($$.isPieType(id)) {
	            return config.pie_expand_duration;
	        } else {
	            return 50;
	        }

	    };

	    c3_chart_internal_fn.shouldExpand = function (id) {
	        var $$ = this, config = $$.config;
	        return ($$.isDonutType(id) && config.donut_expand) ||
	               ($$.isGaugeType(id) && config.gauge_expand) ||
	               ($$.isPieType(id) && config.pie_expand);
	    };

	    c3_chart_internal_fn.shouldShowArcLabel = function () {
	        var $$ = this, config = $$.config, shouldShow = true;
	        if ($$.hasType('donut')) {
	            shouldShow = config.donut_label_show;
	        } else if ($$.hasType('pie')) {
	            shouldShow = config.pie_label_show;
	        }
	        // when gauge, always true
	        return shouldShow;
	    };

	    c3_chart_internal_fn.meetsArcLabelThreshold = function (ratio) {
	        var $$ = this, config = $$.config,
	            threshold = $$.hasType('donut') ? config.donut_label_threshold : config.pie_label_threshold;
	        return ratio >= threshold;
	    };

	    c3_chart_internal_fn.getArcLabelFormat = function () {
	        var $$ = this, config = $$.config,
	            format = config.pie_label_format;
	        if ($$.hasType('gauge')) {
	            format = config.gauge_label_format;
	        } else if ($$.hasType('donut')) {
	            format = config.donut_label_format;
	        }
	        return format;
	    };

	    c3_chart_internal_fn.getArcTitle = function () {
	        var $$ = this;
	        return $$.hasType('donut') ? $$.config.donut_title : "";
	    };

	    c3_chart_internal_fn.updateTargetsForArc = function (targets) {
	        var $$ = this, main = $$.main,
	            mainPieUpdate, mainPieEnter,
	            classChartArc = $$.classChartArc.bind($$),
	            classArcs = $$.classArcs.bind($$),
	            classFocus = $$.classFocus.bind($$);
	        mainPieUpdate = main.select('.' + CLASS.chartArcs).selectAll('.' + CLASS.chartArc)
	            .data($$.pie(targets))
	            .attr("class", function (d) { return classChartArc(d) + classFocus(d.data); });
	        mainPieEnter = mainPieUpdate.enter().append("g")
	            .attr("class", classChartArc);
	        mainPieEnter.append('g')
	            .attr('class', classArcs);
	        mainPieEnter.append("text")
	            .attr("dy", $$.hasType('gauge') ? "-.1em" : ".35em")
	            .style("opacity", 0)
	            .style("text-anchor", "middle")
	            .style("pointer-events", "none");
	        // MEMO: can not keep same color..., but not bad to update color in redraw
	        //mainPieUpdate.exit().remove();
	    };

	    c3_chart_internal_fn.initArc = function () {
	        var $$ = this;
	        $$.arcs = $$.main.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.chartArcs)
	            .attr("transform", $$.getTranslate('arc'));
	        $$.arcs.append('text')
	            .attr('class', CLASS.chartArcsTitle)
	            .style("text-anchor", "middle")
	            .text($$.getArcTitle());
	    };

	    c3_chart_internal_fn.redrawArc = function (duration, durationForExit, withTransform) {
	        var $$ = this, d3 = $$.d3, config = $$.config, main = $$.main,
	            mainArc;
	        mainArc = main.selectAll('.' + CLASS.arcs).selectAll('.' + CLASS.arc)
	            .data($$.arcData.bind($$));
	        mainArc.enter().append('path')
	            .attr("class", $$.classArc.bind($$))
	            .style("fill", function (d) { return $$.color(d.data); })
	            .style("cursor", function (d) { return config.interaction_enabled && config.data_selection_isselectable(d) ? "pointer" : null; })
	            .style("opacity", 0)
	            .each(function (d) {
	                if ($$.isGaugeType(d.data)) {
	                    d.startAngle = d.endAngle = config.gauge_startingAngle;
	                }
	                this._current = d;
	            });
	        mainArc
	            .attr("transform", function (d) { return !$$.isGaugeType(d.data) && withTransform ? "scale(0)" : ""; })
	            .style("opacity", function (d) { return d === this._current ? 0 : 1; })
	            .on('mouseover', config.interaction_enabled ? function (d) {
	                var updated, arcData;
	                if ($$.transiting) { // skip while transiting
	                    return;
	                }
	                updated = $$.updateAngle(d);
	                if (updated) {
	                    arcData = $$.convertToArcData(updated);
	                    // transitions
	                    $$.expandArc(updated.data.id);
	                    $$.api.focus(updated.data.id);
	                    $$.toggleFocusLegend(updated.data.id, true);
	                    $$.config.data_onmouseover(arcData, this);
	                }
	            } : null)
	            .on('mousemove', config.interaction_enabled ? function (d) {
	                var updated = $$.updateAngle(d), arcData, selectedData;
	                if (updated) {
	                    arcData = $$.convertToArcData(updated),
	                    selectedData = [arcData];
	                    $$.showTooltip(selectedData, this);
	                }
	            } : null)
	            .on('mouseout', config.interaction_enabled ? function (d) {
	                var updated, arcData;
	                if ($$.transiting) { // skip while transiting
	                    return;
	                }
	                updated = $$.updateAngle(d);
	                if (updated) {
	                    arcData = $$.convertToArcData(updated);
	                    // transitions
	                    $$.unexpandArc(updated.data.id);
	                    $$.api.revert();
	                    $$.revertLegend();
	                    $$.hideTooltip();
	                    $$.config.data_onmouseout(arcData, this);
	                }
	            } : null)
	            .on('click', config.interaction_enabled ? function (d, i) {
	                var updated = $$.updateAngle(d), arcData;
	                if (updated) {
	                    arcData = $$.convertToArcData(updated);
	                    if ($$.toggleShape) {
	                        $$.toggleShape(this, arcData, i);
	                    }
	                    $$.config.data_onclick.call($$.api, arcData, this);
	                }
	            } : null)
	            .each(function () { $$.transiting = true; })
	            .transition().duration(duration)
	            .attrTween("d", function (d) {
	                var updated = $$.updateAngle(d), interpolate;
	                if (! updated) {
	                    return function () { return "M 0 0"; };
	                }
	                //                if (this._current === d) {
	                //                    this._current = {
	                //                        startAngle: Math.PI*2,
	                //                        endAngle: Math.PI*2,
	                //                    };
	                //                }
	                if (isNaN(this._current.startAngle)) {
	                    this._current.startAngle = 0;
	                }
	                if (isNaN(this._current.endAngle)) {
	                    this._current.endAngle = this._current.startAngle;
	                }
	                interpolate = d3.interpolate(this._current, updated);
	                this._current = interpolate(0);
	                return function (t) {
	                    var interpolated = interpolate(t);
	                    interpolated.data = d.data; // data.id will be updated by interporator
	                    return $$.getArc(interpolated, true);
	                };
	            })
	            .attr("transform", withTransform ? "scale(1)" : "")
	            .style("fill", function (d) {
	                return $$.levelColor ? $$.levelColor(d.data.values[0].value) : $$.color(d.data.id);
	            }) // Where gauge reading color would receive customization.
	            .style("opacity", 1)
	            .call($$.endall, function () {
	                $$.transiting = false;
	            });
	        mainArc.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	        main.selectAll('.' + CLASS.chartArc).select('text')
	            .style("opacity", 0)
	            .attr('class', function (d) { return $$.isGaugeType(d.data) ? CLASS.gaugeValue : ''; })
	            .text($$.textForArcLabel.bind($$))
	            .attr("transform", $$.transformForArcLabel.bind($$))
	            .style('font-size', function (d) { return $$.isGaugeType(d.data) ? Math.round($$.radius / 5) + 'px' : ''; })
	          .transition().duration(duration)
	            .style("opacity", function (d) { return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0; });
	        main.select('.' + CLASS.chartArcsTitle)
	            .style("opacity", $$.hasType('donut') || $$.hasType('gauge') ? 1 : 0);

	        if ($$.hasType('gauge')) {
	            $$.arcs.select('.' + CLASS.chartArcsBackground)
	                .attr("d", function () {
	                    var d = {
	                        data: [{value: config.gauge_max}],
	                        startAngle: config.gauge_startingAngle,
	                        endAngle: -1 * config.gauge_startingAngle
	                    };
	                    return $$.getArc(d, true, true);
	                });
	            $$.arcs.select('.' + CLASS.chartArcsGaugeUnit)
	                .attr("dy", ".75em")
	                .text(config.gauge_label_show ? config.gauge_units : '');
	            $$.arcs.select('.' + CLASS.chartArcsGaugeMin)
	                .attr("dx", -1 * ($$.innerRadius + (($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2))) + "px")
	                .attr("dy", "1.2em")
	                .text(config.gauge_label_show ? config.gauge_min : '');
	            $$.arcs.select('.' + CLASS.chartArcsGaugeMax)
	                .attr("dx", $$.innerRadius + (($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2)) + "px")
	                .attr("dy", "1.2em")
	                .text(config.gauge_label_show ? config.gauge_max : '');
	        }
	    };
	    c3_chart_internal_fn.initGauge = function () {
	        var arcs = this.arcs;
	        if (this.hasType('gauge')) {
	            arcs.append('path')
	                .attr("class", CLASS.chartArcsBackground);
	            arcs.append("text")
	                .attr("class", CLASS.chartArcsGaugeUnit)
	                .style("text-anchor", "middle")
	                .style("pointer-events", "none");
	            arcs.append("text")
	                .attr("class", CLASS.chartArcsGaugeMin)
	                .style("text-anchor", "middle")
	                .style("pointer-events", "none");
	            arcs.append("text")
	                .attr("class", CLASS.chartArcsGaugeMax)
	                .style("text-anchor", "middle")
	                .style("pointer-events", "none");
	        }
	    };
	    c3_chart_internal_fn.getGaugeLabelHeight = function () {
	        return this.config.gauge_label_show ? 20 : 0;
	    };

	    c3_chart_internal_fn.initRegion = function () {
	        var $$ = this;
	        $$.region = $$.main.append('g')
	            .attr("clip-path", $$.clipPath)
	            .attr("class", CLASS.regions);
	    };
	    c3_chart_internal_fn.updateRegion = function (duration) {
	        var $$ = this, config = $$.config;

	        // hide if arc type
	        $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

	        $$.mainRegion = $$.main.select('.' + CLASS.regions).selectAll('.' + CLASS.region)
	            .data(config.regions);
	        $$.mainRegion.enter().append('g')
	          .append('rect')
	            .style("fill-opacity", 0);
	        $$.mainRegion
	            .attr('class', $$.classRegion.bind($$));
	        $$.mainRegion.exit().transition().duration(duration)
	            .style("opacity", 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawRegion = function (withTransition) {
	        var $$ = this,
	            regions = $$.mainRegion.selectAll('rect').each(function () {
	                // data is binded to g and it's not transferred to rect (child node) automatically,
	                // then data of each rect has to be updated manually.
	                // TODO: there should be more efficient way to solve this?
	                var parentData = $$.d3.select(this.parentNode).datum();
	                $$.d3.select(this).datum(parentData);
	            }),
	            x = $$.regionX.bind($$),
	            y = $$.regionY.bind($$),
	            w = $$.regionWidth.bind($$),
	            h = $$.regionHeight.bind($$);
	        return [
	            (withTransition ? regions.transition() : regions)
	                .attr("x", x)
	                .attr("y", y)
	                .attr("width", w)
	                .attr("height", h)
	                .style("fill-opacity", function (d) { return isValue(d.opacity) ? d.opacity : 0.1; })
	        ];
	    };
	    c3_chart_internal_fn.regionX = function (d) {
	        var $$ = this, config = $$.config,
	            xPos, yScale = d.axis === 'y' ? $$.y : $$.y2;
	        if (d.axis === 'y' || d.axis === 'y2') {
	            xPos = config.axis_rotated ? ('start' in d ? yScale(d.start) : 0) : 0;
	        } else {
	            xPos = config.axis_rotated ? 0 : ('start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0);
	        }
	        return xPos;
	    };
	    c3_chart_internal_fn.regionY = function (d) {
	        var $$ = this, config = $$.config,
	            yPos, yScale = d.axis === 'y' ? $$.y : $$.y2;
	        if (d.axis === 'y' || d.axis === 'y2') {
	            yPos = config.axis_rotated ? 0 : ('end' in d ? yScale(d.end) : 0);
	        } else {
	            yPos = config.axis_rotated ? ('start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0) : 0;
	        }
	        return yPos;
	    };
	    c3_chart_internal_fn.regionWidth = function (d) {
	        var $$ = this, config = $$.config,
	            start = $$.regionX(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;
	        if (d.axis === 'y' || d.axis === 'y2') {
	            end = config.axis_rotated ? ('end' in d ? yScale(d.end) : $$.width) : $$.width;
	        } else {
	            end = config.axis_rotated ? $$.width : ('end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width);
	        }
	        return end < start ? 0 : end - start;
	    };
	    c3_chart_internal_fn.regionHeight = function (d) {
	        var $$ = this, config = $$.config,
	            start = this.regionY(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;
	        if (d.axis === 'y' || d.axis === 'y2') {
	            end = config.axis_rotated ? $$.height : ('start' in d ? yScale(d.start) : $$.height);
	        } else {
	            end = config.axis_rotated ? ('end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height) : $$.height;
	        }
	        return end < start ? 0 : end - start;
	    };
	    c3_chart_internal_fn.isRegionOnX = function (d) {
	        return !d.axis || d.axis === 'x';
	    };

	    c3_chart_internal_fn.drag = function (mouse) {
	        var $$ = this, config = $$.config, main = $$.main, d3 = $$.d3;
	        var sx, sy, mx, my, minX, maxX, minY, maxY;

	        if ($$.hasArcType()) { return; }
	        if (! config.data_selection_enabled) { return; } // do nothing if not selectable
	        if (config.zoom_enabled && ! $$.zoom.altDomain) { return; } // skip if zoomable because of conflict drag dehavior
	        if (!config.data_selection_multiple) { return; } // skip when single selection because drag is used for multiple selection

	        sx = $$.dragStart[0];
	        sy = $$.dragStart[1];
	        mx = mouse[0];
	        my = mouse[1];
	        minX = Math.min(sx, mx);
	        maxX = Math.max(sx, mx);
	        minY = (config.data_selection_grouped) ? $$.margin.top : Math.min(sy, my);
	        maxY = (config.data_selection_grouped) ? $$.height : Math.max(sy, my);

	        main.select('.' + CLASS.dragarea)
	            .attr('x', minX)
	            .attr('y', minY)
	            .attr('width', maxX - minX)
	            .attr('height', maxY - minY);
	        // TODO: binary search when multiple xs
	        main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape)
	            .filter(function (d) { return config.data_selection_isselectable(d); })
	            .each(function (d, i) {
	                var shape = d3.select(this),
	                    isSelected = shape.classed(CLASS.SELECTED),
	                    isIncluded = shape.classed(CLASS.INCLUDED),
	                    _x, _y, _w, _h, toggle, isWithin = false, box;
	                if (shape.classed(CLASS.circle)) {
	                    _x = shape.attr("cx") * 1;
	                    _y = shape.attr("cy") * 1;
	                    toggle = $$.togglePoint;
	                    isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;
	                }
	                else if (shape.classed(CLASS.bar)) {
	                    box = getPathBox(this);
	                    _x = box.x;
	                    _y = box.y;
	                    _w = box.width;
	                    _h = box.height;
	                    toggle = $$.togglePath;
	                    isWithin = !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);
	                } else {
	                    // line/area selection not supported yet
	                    return;
	                }
	                if (isWithin ^ isIncluded) {
	                    shape.classed(CLASS.INCLUDED, !isIncluded);
	                    // TODO: included/unincluded callback here
	                    shape.classed(CLASS.SELECTED, !isSelected);
	                    toggle.call($$, !isSelected, shape, d, i);
	                }
	            });
	    };

	    c3_chart_internal_fn.dragstart = function (mouse) {
	        var $$ = this, config = $$.config;
	        if ($$.hasArcType()) { return; }
	        if (! config.data_selection_enabled) { return; } // do nothing if not selectable
	        $$.dragStart = mouse;
	        $$.main.select('.' + CLASS.chart).append('rect')
	            .attr('class', CLASS.dragarea)
	            .style('opacity', 0.1);
	        $$.dragging = true;
	    };

	    c3_chart_internal_fn.dragend = function () {
	        var $$ = this, config = $$.config;
	        if ($$.hasArcType()) { return; }
	        if (! config.data_selection_enabled) { return; } // do nothing if not selectable
	        $$.main.select('.' + CLASS.dragarea)
	            .transition().duration(100)
	            .style('opacity', 0)
	            .remove();
	        $$.main.selectAll('.' + CLASS.shape)
	            .classed(CLASS.INCLUDED, false);
	        $$.dragging = false;
	    };

	    c3_chart_internal_fn.selectPoint = function (target, d, i) {
	        var $$ = this, config = $$.config,
	            cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$),
	            cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$),
	            r = $$.pointSelectR.bind($$);
	        config.data_onselected.call($$.api, d, target.node());
	        // add selected-circle on low layer g
	        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i)
	            .data([d])
	            .enter().append('circle')
	            .attr("class", function () { return $$.generateClass(CLASS.selectedCircle, i); })
	            .attr("cx", cx)
	            .attr("cy", cy)
	            .attr("stroke", function () { return $$.color(d); })
	            .attr("r", function (d) { return $$.pointSelectR(d) * 1.4; })
	            .transition().duration(100)
	            .attr("r", r);
	    };
	    c3_chart_internal_fn.unselectPoint = function (target, d, i) {
	        var $$ = this;
	        $$.config.data_onunselected.call($$.api, d, target.node());
	        // remove selected-circle from low layer g
	        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i)
	            .transition().duration(100).attr('r', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.togglePoint = function (selected, target, d, i) {
	        selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);
	    };
	    c3_chart_internal_fn.selectPath = function (target, d) {
	        var $$ = this;
	        $$.config.data_onselected.call($$, d, target.node());
	        if ($$.config.interaction_brighten) {
	            target.transition().duration(100)
	                .style("fill", function () { return $$.d3.rgb($$.color(d)).brighter(0.75); });
	        }
	    };
	    c3_chart_internal_fn.unselectPath = function (target, d) {
	        var $$ = this;
	        $$.config.data_onunselected.call($$, d, target.node());
	        if ($$.config.interaction_brighten) {
	            target.transition().duration(100)
	                .style("fill", function () { return $$.color(d); });
	        }
	    };
	    c3_chart_internal_fn.togglePath = function (selected, target, d, i) {
	        selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);
	    };
	    c3_chart_internal_fn.getToggle = function (that, d) {
	        var $$ = this, toggle;
	        if (that.nodeName === 'circle') {
	            if ($$.isStepType(d)) {
	                // circle is hidden in step chart, so treat as within the click area
	                toggle = function () {}; // TODO: how to select step chart?
	            } else {
	                toggle = $$.togglePoint;
	            }
	        }
	        else if (that.nodeName === 'path') {
	            toggle = $$.togglePath;
	        }
	        return toggle;
	    };
	    c3_chart_internal_fn.toggleShape = function (that, d, i) {
	        var $$ = this, d3 = $$.d3, config = $$.config,
	            shape = d3.select(that), isSelected = shape.classed(CLASS.SELECTED),
	            toggle = $$.getToggle(that, d).bind($$);

	        if (config.data_selection_enabled && config.data_selection_isselectable(d)) {
	            if (!config.data_selection_multiple) {
	                $$.main.selectAll('.' + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : "")).selectAll('.' + CLASS.shape).each(function (d, i) {
	                    var shape = d3.select(this);
	                    if (shape.classed(CLASS.SELECTED)) { toggle(false, shape.classed(CLASS.SELECTED, false), d, i); }
	                });
	            }
	            shape.classed(CLASS.SELECTED, !isSelected);
	            toggle(!isSelected, shape, d, i);
	        }
	    };

	    c3_chart_internal_fn.initBrush = function () {
	        var $$ = this, d3 = $$.d3;
	        $$.brush = d3.svg.brush().on("brush", function () { $$.redrawForBrush(); });
	        $$.brush.update = function () {
	            if ($$.context) { $$.context.select('.' + CLASS.brush).call(this); }
	            return this;
	        };
	        $$.brush.scale = function (scale) {
	            return $$.config.axis_rotated ? this.y(scale) : this.x(scale);
	        };
	    };
	    c3_chart_internal_fn.initSubchart = function () {
	        var $$ = this, config = $$.config,
	            context = $$.context = $$.svg.append("g").attr("transform", $$.getTranslate('context')),
	            visibility = config.subchart_show ? 'visible' : 'hidden';

	        context.style('visibility', visibility);

	        // Define g for chart area
	        context.append('g')
	            .attr("clip-path", $$.clipPathForSubchart)
	            .attr('class', CLASS.chart);

	        // Define g for bar chart area
	        context.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.chartBars);

	        // Define g for line chart area
	        context.select('.' + CLASS.chart).append("g")
	            .attr("class", CLASS.chartLines);

	        // Add extent rect for Brush
	        context.append("g")
	            .attr("clip-path", $$.clipPath)
	            .attr("class", CLASS.brush)
	            .call($$.brush);

	        // ATTENTION: This must be called AFTER chart added
	        // Add Axis
	        $$.axes.subx = context.append("g")
	            .attr("class", CLASS.axisX)
	            .attr("transform", $$.getTranslate('subx'))
	            .attr("clip-path", config.axis_rotated ? "" : $$.clipPathForXAxis)
	            .style("visibility", config.subchart_axis_x_show ? visibility : 'hidden');
	    };
	    c3_chart_internal_fn.updateTargetsForSubchart = function (targets) {
	        var $$ = this, context = $$.context, config = $$.config,
	            contextLineEnter, contextLineUpdate, contextBarEnter, contextBarUpdate,
	            classChartBar = $$.classChartBar.bind($$),
	            classBars = $$.classBars.bind($$),
	            classChartLine = $$.classChartLine.bind($$),
	            classLines = $$.classLines.bind($$),
	            classAreas = $$.classAreas.bind($$);

	        if (config.subchart_show) {
	            //-- Bar --//
	            contextBarUpdate = context.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar)
	                .data(targets)
	                .attr('class', classChartBar);
	            contextBarEnter = contextBarUpdate.enter().append('g')
	                .style('opacity', 0)
	                .attr('class', classChartBar);
	            // Bars for each data
	            contextBarEnter.append('g')
	                .attr("class", classBars);

	            //-- Line --//
	            contextLineUpdate = context.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine)
	                .data(targets)
	                .attr('class', classChartLine);
	            contextLineEnter = contextLineUpdate.enter().append('g')
	                .style('opacity', 0)
	                .attr('class', classChartLine);
	            // Lines for each data
	            contextLineEnter.append("g")
	                .attr("class", classLines);
	            // Area
	            contextLineEnter.append("g")
	                .attr("class", classAreas);

	            //-- Brush --//
	            context.selectAll('.' + CLASS.brush + ' rect')
	                .attr(config.axis_rotated ? "width" : "height", config.axis_rotated ? $$.width2 : $$.height2);
	        }
	    };
	    c3_chart_internal_fn.updateBarForSubchart = function (durationForExit) {
	        var $$ = this;
	        $$.contextBar = $$.context.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar)
	            .data($$.barData.bind($$));
	        $$.contextBar.enter().append('path')
	            .attr("class", $$.classBar.bind($$))
	            .style("stroke", 'none')
	            .style("fill", $$.color);
	        $$.contextBar
	            .style("opacity", $$.initialOpacity.bind($$));
	        $$.contextBar.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {
	        (withTransition ? this.contextBar.transition(Math.random().toString()).duration(duration) : this.contextBar)
	            .attr('d', drawBarOnSub)
	            .style('opacity', 1);
	    };
	    c3_chart_internal_fn.updateLineForSubchart = function (durationForExit) {
	        var $$ = this;
	        $$.contextLine = $$.context.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line)
	            .data($$.lineData.bind($$));
	        $$.contextLine.enter().append('path')
	            .attr('class', $$.classLine.bind($$))
	            .style('stroke', $$.color);
	        $$.contextLine
	            .style("opacity", $$.initialOpacity.bind($$));
	        $$.contextLine.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {
	        (withTransition ? this.contextLine.transition(Math.random().toString()).duration(duration) : this.contextLine)
	            .attr("d", drawLineOnSub)
	            .style('opacity', 1);
	    };
	    c3_chart_internal_fn.updateAreaForSubchart = function (durationForExit) {
	        var $$ = this, d3 = $$.d3;
	        $$.contextArea = $$.context.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area)
	            .data($$.lineData.bind($$));
	        $$.contextArea.enter().append('path')
	            .attr("class", $$.classArea.bind($$))
	            .style("fill", $$.color)
	            .style("opacity", function () { $$.orgAreaOpacity = +d3.select(this).style('opacity'); return 0; });
	        $$.contextArea
	            .style("opacity", 0);
	        $$.contextArea.exit().transition().duration(durationForExit)
	            .style('opacity', 0)
	            .remove();
	    };
	    c3_chart_internal_fn.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {
	        (withTransition ? this.contextArea.transition(Math.random().toString()).duration(duration) : this.contextArea)
	            .attr("d", drawAreaOnSub)
	            .style("fill", this.color)
	            .style("opacity", this.orgAreaOpacity);
	    };
	    c3_chart_internal_fn.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {
	        var $$ = this, d3 = $$.d3, config = $$.config,
	            drawAreaOnSub, drawBarOnSub, drawLineOnSub;

	        $$.context.style('visibility', config.subchart_show ? 'visible' : 'hidden');

	        // subchart
	        if (config.subchart_show) {
	            // reflect main chart to extent on subchart if zoomed
	            if (d3.event && d3.event.type === 'zoom') {
	                $$.brush.extent($$.x.orgDomain()).update();
	            }
	            // update subchart elements if needed
	            if (withSubchart) {

	                // extent rect
	                if (!$$.brush.empty()) {
	                    $$.brush.extent($$.x.orgDomain()).update();
	                }
	                // setup drawer - MEMO: this must be called after axis updated
	                drawAreaOnSub = $$.generateDrawArea(areaIndices, true);
	                drawBarOnSub = $$.generateDrawBar(barIndices, true);
	                drawLineOnSub = $$.generateDrawLine(lineIndices, true);

	                $$.updateBarForSubchart(duration);
	                $$.updateLineForSubchart(duration);
	                $$.updateAreaForSubchart(duration);

	                $$.redrawBarForSubchart(drawBarOnSub, duration, duration);
	                $$.redrawLineForSubchart(drawLineOnSub, duration, duration);
	                $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);
	            }
	        }
	    };
	    c3_chart_internal_fn.redrawForBrush = function () {
	        var $$ = this, x = $$.x;
	        $$.redraw({
	            withTransition: false,
	            withY: $$.config.zoom_rescale,
	            withSubchart: false,
	            withUpdateXDomain: true,
	            withDimension: false
	        });
	        $$.config.subchart_onbrush.call($$.api, x.orgDomain());
	    };
	    c3_chart_internal_fn.transformContext = function (withTransition, transitions) {
	        var $$ = this, subXAxis;
	        if (transitions && transitions.axisSubX) {
	            subXAxis = transitions.axisSubX;
	        } else {
	            subXAxis = $$.context.select('.' + CLASS.axisX);
	            if (withTransition) { subXAxis = subXAxis.transition(); }
	        }
	        $$.context.attr("transform", $$.getTranslate('context'));
	        subXAxis.attr("transform", $$.getTranslate('subx'));
	    };
	    c3_chart_internal_fn.getDefaultExtent = function () {
	        var $$ = this, config = $$.config,
	            extent = isFunction(config.axis_x_extent) ? config.axis_x_extent($$.getXDomain($$.data.targets)) : config.axis_x_extent;
	        if ($$.isTimeSeries()) {
	            extent = [$$.parseDate(extent[0]), $$.parseDate(extent[1])];
	        }
	        return extent;
	    };

	    c3_chart_internal_fn.initZoom = function () {
	        var $$ = this, d3 = $$.d3, config = $$.config, startEvent;

	        $$.zoom = d3.behavior.zoom()
	            .on("zoomstart", function () {
	                startEvent = d3.event.sourceEvent;
	                $$.zoom.altDomain = d3.event.sourceEvent.altKey ? $$.x.orgDomain() : null;
	                config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);
	            })
	            .on("zoom", function () {
	                $$.redrawForZoom.call($$);
	            })
	            .on('zoomend', function () {
	                var event = d3.event.sourceEvent;
	                // if click, do nothing. otherwise, click interaction will be canceled.
	                if (event && startEvent.clientX === event.clientX && startEvent.clientY === event.clientY) {
	                    return;
	                }
	                $$.redrawEventRect();
	                $$.updateZoom();
	                config.zoom_onzoomend.call($$.api, $$.x.orgDomain());
	            });
	        $$.zoom.scale = function (scale) {
	            return config.axis_rotated ? this.y(scale) : this.x(scale);
	        };
	        $$.zoom.orgScaleExtent = function () {
	            var extent = config.zoom_extent ? config.zoom_extent : [1, 10];
	            return [extent[0], Math.max($$.getMaxDataCount() / extent[1], extent[1])];
	        };
	        $$.zoom.updateScaleExtent = function () {
	            var ratio = diffDomain($$.x.orgDomain()) / diffDomain($$.getZoomDomain()),
	                extent = this.orgScaleExtent();
	            this.scaleExtent([extent[0] * ratio, extent[1] * ratio]);
	            return this;
	        };
	    };
	    c3_chart_internal_fn.getZoomDomain = function () {
	        var $$ = this, config = $$.config, d3 = $$.d3,
	            min = d3.min([$$.orgXDomain[0], config.zoom_x_min]),
	            max = d3.max([$$.orgXDomain[1], config.zoom_x_max]);
	        return [min, max];
	    };
	    c3_chart_internal_fn.updateZoom = function () {
	        var $$ = this, z = $$.config.zoom_enabled ? $$.zoom : function () {};
	        $$.main.select('.' + CLASS.zoomRect).call(z).on("dblclick.zoom", null);
	        $$.main.selectAll('.' + CLASS.eventRect).call(z).on("dblclick.zoom", null);
	    };
	    c3_chart_internal_fn.redrawForZoom = function () {
	        var $$ = this, d3 = $$.d3, config = $$.config, zoom = $$.zoom, x = $$.x;
	        if (!config.zoom_enabled) {
	            return;
	        }
	        if ($$.filterTargetsToShow($$.data.targets).length === 0) {
	            return;
	        }
	        if (d3.event.sourceEvent.type === 'mousemove' && zoom.altDomain) {
	            x.domain(zoom.altDomain);
	            zoom.scale(x).updateScaleExtent();
	            return;
	        }
	        if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {
	            x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);
	        }
	        $$.redraw({
	            withTransition: false,
	            withY: config.zoom_rescale,
	            withSubchart: false,
	            withEventRect: false,
	            withDimension: false
	        });
	        if (d3.event.sourceEvent.type === 'mousemove') {
	            $$.cancelClick = true;
	        }
	        config.zoom_onzoom.call($$.api, x.orgDomain());
	    };

	    c3_chart_internal_fn.generateColor = function () {
	        var $$ = this, config = $$.config, d3 = $$.d3,
	            colors = config.data_colors,
	            pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.scale.category10().range(),
	            callback = config.data_color,
	            ids = [];

	        return function (d) {
	            var id = d.id || (d.data && d.data.id) || d, color;

	            // if callback function is provided
	            if (colors[id] instanceof Function) {
	                color = colors[id](d);
	            }
	            // if specified, choose that color
	            else if (colors[id]) {
	                color = colors[id];
	            }
	            // if not specified, choose from pattern
	            else {
	                if (ids.indexOf(id) < 0) { ids.push(id); }
	                color = pattern[ids.indexOf(id) % pattern.length];
	                colors[id] = color;
	            }
	            return callback instanceof Function ? callback(color, d) : color;
	        };
	    };
	    c3_chart_internal_fn.generateLevelColor = function () {
	        var $$ = this, config = $$.config,
	            colors = config.color_pattern,
	            threshold = config.color_threshold,
	            asValue = threshold.unit === 'value',
	            values = threshold.values && threshold.values.length ? threshold.values : [],
	            max = threshold.max || 100;
	        return notEmpty(config.color_threshold) ? function (value) {
	            var i, v, color = colors[colors.length - 1];
	            for (i = 0; i < values.length; i++) {
	                v = asValue ? value : (value * 100 / max);
	                if (v < values[i]) {
	                    color = colors[i];
	                    break;
	                }
	            }
	            return color;
	        } : null;
	    };

	    c3_chart_internal_fn.getYFormat = function (forArc) {
	        var $$ = this,
	            formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat,
	            formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;
	        return function (v, ratio, id) {
	            var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;
	            return format.call($$, v, ratio);
	        };
	    };
	    c3_chart_internal_fn.yFormat = function (v) {
	        var $$ = this, config = $$.config,
	            format = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;
	        return format(v);
	    };
	    c3_chart_internal_fn.y2Format = function (v) {
	        var $$ = this, config = $$.config,
	            format = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;
	        return format(v);
	    };
	    c3_chart_internal_fn.defaultValueFormat = function (v) {
	        return isValue(v) ? +v : "";
	    };
	    c3_chart_internal_fn.defaultArcValueFormat = function (v, ratio) {
	        return (ratio * 100).toFixed(1) + '%';
	    };
	    c3_chart_internal_fn.dataLabelFormat = function (targetId) {
	        var $$ = this, data_labels = $$.config.data_labels,
	            format, defaultFormat = function (v) { return isValue(v) ? +v : ""; };
	        // find format according to axis id
	        if (typeof data_labels.format === 'function') {
	            format = data_labels.format;
	        } else if (typeof data_labels.format === 'object') {
	            if (data_labels.format[targetId]) {
	                format = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];
	            } else {
	                format = function () { return ''; };
	            }
	        } else {
	            format = defaultFormat;
	        }
	        return format;
	    };

	    c3_chart_internal_fn.hasCaches = function (ids) {
	        for (var i = 0; i < ids.length; i++) {
	            if (! (ids[i] in this.cache)) { return false; }
	        }
	        return true;
	    };
	    c3_chart_internal_fn.addCache = function (id, target) {
	        this.cache[id] = this.cloneTarget(target);
	    };
	    c3_chart_internal_fn.getCaches = function (ids) {
	        var targets = [], i;
	        for (i = 0; i < ids.length; i++) {
	            if (ids[i] in this.cache) { targets.push(this.cloneTarget(this.cache[ids[i]])); }
	        }
	        return targets;
	    };

	    var CLASS = c3_chart_internal_fn.CLASS = {
	        target: 'c3-target',
	        chart: 'c3-chart',
	        chartLine: 'c3-chart-line',
	        chartLines: 'c3-chart-lines',
	        chartBar: 'c3-chart-bar',
	        chartBars: 'c3-chart-bars',
	        chartText: 'c3-chart-text',
	        chartTexts: 'c3-chart-texts',
	        chartArc: 'c3-chart-arc',
	        chartArcs: 'c3-chart-arcs',
	        chartArcsTitle: 'c3-chart-arcs-title',
	        chartArcsBackground: 'c3-chart-arcs-background',
	        chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',
	        chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',
	        chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',
	        selectedCircle: 'c3-selected-circle',
	        selectedCircles: 'c3-selected-circles',
	        eventRect: 'c3-event-rect',
	        eventRects: 'c3-event-rects',
	        eventRectsSingle: 'c3-event-rects-single',
	        eventRectsMultiple: 'c3-event-rects-multiple',
	        zoomRect: 'c3-zoom-rect',
	        brush: 'c3-brush',
	        focused: 'c3-focused',
	        defocused: 'c3-defocused',
	        region: 'c3-region',
	        regions: 'c3-regions',
	        title: 'c3-title',
	        tooltipContainer: 'c3-tooltip-container',
	        tooltip: 'c3-tooltip',
	        tooltipName: 'c3-tooltip-name',
	        shape: 'c3-shape',
	        shapes: 'c3-shapes',
	        line: 'c3-line',
	        lines: 'c3-lines',
	        bar: 'c3-bar',
	        bars: 'c3-bars',
	        circle: 'c3-circle',
	        circles: 'c3-circles',
	        arc: 'c3-arc',
	        arcs: 'c3-arcs',
	        area: 'c3-area',
	        areas: 'c3-areas',
	        empty: 'c3-empty',
	        text: 'c3-text',
	        texts: 'c3-texts',
	        gaugeValue: 'c3-gauge-value',
	        grid: 'c3-grid',
	        gridLines: 'c3-grid-lines',
	        xgrid: 'c3-xgrid',
	        xgrids: 'c3-xgrids',
	        xgridLine: 'c3-xgrid-line',
	        xgridLines: 'c3-xgrid-lines',
	        xgridFocus: 'c3-xgrid-focus',
	        ygrid: 'c3-ygrid',
	        ygrids: 'c3-ygrids',
	        ygridLine: 'c3-ygrid-line',
	        ygridLines: 'c3-ygrid-lines',
	        axis: 'c3-axis',
	        axisX: 'c3-axis-x',
	        axisXLabel: 'c3-axis-x-label',
	        axisY: 'c3-axis-y',
	        axisYLabel: 'c3-axis-y-label',
	        axisY2: 'c3-axis-y2',
	        axisY2Label: 'c3-axis-y2-label',
	        legendBackground: 'c3-legend-background',
	        legendItem: 'c3-legend-item',
	        legendItemEvent: 'c3-legend-item-event',
	        legendItemTile: 'c3-legend-item-tile',
	        legendItemHidden: 'c3-legend-item-hidden',
	        legendItemFocused: 'c3-legend-item-focused',
	        dragarea: 'c3-dragarea',
	        EXPANDED: '_expanded_',
	        SELECTED: '_selected_',
	        INCLUDED: '_included_'
	    };
	    c3_chart_internal_fn.generateClass = function (prefix, targetId) {
	        return " " + prefix + " " + prefix + this.getTargetSelectorSuffix(targetId);
	    };
	    c3_chart_internal_fn.classText = function (d) {
	        return this.generateClass(CLASS.text, d.index);
	    };
	    c3_chart_internal_fn.classTexts = function (d) {
	        return this.generateClass(CLASS.texts, d.id);
	    };
	    c3_chart_internal_fn.classShape = function (d) {
	        return this.generateClass(CLASS.shape, d.index);
	    };
	    c3_chart_internal_fn.classShapes = function (d) {
	        return this.generateClass(CLASS.shapes, d.id);
	    };
	    c3_chart_internal_fn.classLine = function (d) {
	        return this.classShape(d) + this.generateClass(CLASS.line, d.id);
	    };
	    c3_chart_internal_fn.classLines = function (d) {
	        return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);
	    };
	    c3_chart_internal_fn.classCircle = function (d) {
	        return this.classShape(d) + this.generateClass(CLASS.circle, d.index);
	    };
	    c3_chart_internal_fn.classCircles = function (d) {
	        return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);
	    };
	    c3_chart_internal_fn.classBar = function (d) {
	        return this.classShape(d) + this.generateClass(CLASS.bar, d.index);
	    };
	    c3_chart_internal_fn.classBars = function (d) {
	        return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);
	    };
	    c3_chart_internal_fn.classArc = function (d) {
	        return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);
	    };
	    c3_chart_internal_fn.classArcs = function (d) {
	        return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);
	    };
	    c3_chart_internal_fn.classArea = function (d) {
	        return this.classShape(d) + this.generateClass(CLASS.area, d.id);
	    };
	    c3_chart_internal_fn.classAreas = function (d) {
	        return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);
	    };
	    c3_chart_internal_fn.classRegion = function (d, i) {
	        return this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : '');
	    };
	    c3_chart_internal_fn.classEvent = function (d) {
	        return this.generateClass(CLASS.eventRect, d.index);
	    };
	    c3_chart_internal_fn.classTarget = function (id) {
	        var $$ = this;
	        var additionalClassSuffix = $$.config.data_classes[id], additionalClass = '';
	        if (additionalClassSuffix) {
	            additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;
	        }
	        return $$.generateClass(CLASS.target, id) + additionalClass;
	    };
	    c3_chart_internal_fn.classFocus = function (d) {
	        return this.classFocused(d) + this.classDefocused(d);
	    };
	    c3_chart_internal_fn.classFocused = function (d) {
	        return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');
	    };
	    c3_chart_internal_fn.classDefocused = function (d) {
	        return ' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : '');
	    };
	    c3_chart_internal_fn.classChartText = function (d) {
	        return CLASS.chartText + this.classTarget(d.id);
	    };
	    c3_chart_internal_fn.classChartLine = function (d) {
	        return CLASS.chartLine + this.classTarget(d.id);
	    };
	    c3_chart_internal_fn.classChartBar = function (d) {
	        return CLASS.chartBar + this.classTarget(d.id);
	    };
	    c3_chart_internal_fn.classChartArc = function (d) {
	        return CLASS.chartArc + this.classTarget(d.data.id);
	    };
	    c3_chart_internal_fn.getTargetSelectorSuffix = function (targetId) {
	        return targetId || targetId === 0 ? ('-' + targetId).replace(/[\s?!@#$%^&*()_=+,.<>'":;\[\]\/|~`{}\\]/g, '-') : '';
	    };
	    c3_chart_internal_fn.selectorTarget = function (id, prefix) {
	        return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);
	    };
	    c3_chart_internal_fn.selectorTargets = function (ids, prefix) {
	        var $$ = this;
	        ids = ids || [];
	        return ids.length ? ids.map(function (id) { return $$.selectorTarget(id, prefix); }) : null;
	    };
	    c3_chart_internal_fn.selectorLegend = function (id) {
	        return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);
	    };
	    c3_chart_internal_fn.selectorLegends = function (ids) {
	        var $$ = this;
	        return ids && ids.length ? ids.map(function (id) { return $$.selectorLegend(id); }) : null;
	    };

	    var isValue = c3_chart_internal_fn.isValue = function (v) {
	        return v || v === 0;
	    },
	        isFunction = c3_chart_internal_fn.isFunction = function (o) {
	            return typeof o === 'function';
	        },
	        isString = c3_chart_internal_fn.isString = function (o) {
	            return typeof o === 'string';
	        },
	        isUndefined = c3_chart_internal_fn.isUndefined = function (v) {
	            return typeof v === 'undefined';
	        },
	        isDefined = c3_chart_internal_fn.isDefined = function (v) {
	            return typeof v !== 'undefined';
	        },
	        ceil10 = c3_chart_internal_fn.ceil10 = function (v) {
	            return Math.ceil(v / 10) * 10;
	        },
	        asHalfPixel = c3_chart_internal_fn.asHalfPixel = function (n) {
	            return Math.ceil(n) + 0.5;
	        },
	        diffDomain = c3_chart_internal_fn.diffDomain = function (d) {
	            return d[1] - d[0];
	        },
	        isEmpty = c3_chart_internal_fn.isEmpty = function (o) {
	            return typeof o === 'undefined' || o === null || (isString(o) && o.length === 0) || (typeof o === 'object' && Object.keys(o).length === 0);
	        },
	        notEmpty = c3_chart_internal_fn.notEmpty = function (o) {
	            return !c3_chart_internal_fn.isEmpty(o);
	        },
	        getOption = c3_chart_internal_fn.getOption = function (options, key, defaultValue) {
	            return isDefined(options[key]) ? options[key] : defaultValue;
	        },
	        hasValue = c3_chart_internal_fn.hasValue = function (dict, value) {
	            var found = false;
	            Object.keys(dict).forEach(function (key) {
	                if (dict[key] === value) { found = true; }
	            });
	            return found;
	        },
	        sanitise = c3_chart_internal_fn.sanitise = function (str) {
	            return typeof str === 'string' ? str.replace(/</g, '&lt;').replace(/>/g, '&gt;') : str;
	        },
	        getPathBox = c3_chart_internal_fn.getPathBox = function (path) {
	            var box = path.getBoundingClientRect(),
	                items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)],
	                minX = items[0].x, minY = Math.min(items[0].y, items[1].y);
	            return {x: minX, y: minY, width: box.width, height: box.height};
	        };

	    c3_chart_fn.focus = function (targetIds) {
	        var $$ = this.internal, candidates;

	        targetIds = $$.mapToTargetIds(targetIds);
	        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))),

	        this.revert();
	        this.defocus();
	        candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);
	        if ($$.hasArcType()) {
	            $$.expandArc(targetIds);
	        }
	        $$.toggleFocusLegend(targetIds, true);

	        $$.focusedTargetIds = targetIds;
	        $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {
	            return targetIds.indexOf(id) < 0;
	        });
	    };

	    c3_chart_fn.defocus = function (targetIds) {
	        var $$ = this.internal, candidates;

	        targetIds = $$.mapToTargetIds(targetIds);
	        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))),

	        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);
	        if ($$.hasArcType()) {
	            $$.unexpandArc(targetIds);
	        }
	        $$.toggleFocusLegend(targetIds, false);

	        $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {
	            return targetIds.indexOf(id) < 0;
	        });
	        $$.defocusedTargetIds = targetIds;
	    };

	    c3_chart_fn.revert = function (targetIds) {
	        var $$ = this.internal, candidates;

	        targetIds = $$.mapToTargetIds(targetIds);
	        candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets

	        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);
	        if ($$.hasArcType()) {
	            $$.unexpandArc(targetIds);
	        }
	        if ($$.config.legend_show) {
	            $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));
	            $$.legend.selectAll($$.selectorLegends(targetIds))
	                .filter(function () {
	                    return $$.d3.select(this).classed(CLASS.legendItemFocused);
	                })
	                .classed(CLASS.legendItemFocused, false);
	        }

	        $$.focusedTargetIds = [];
	        $$.defocusedTargetIds = [];
	    };

	    c3_chart_fn.show = function (targetIds, options) {
	        var $$ = this.internal, targets;

	        targetIds = $$.mapToTargetIds(targetIds);
	        options = options || {};

	        $$.removeHiddenTargetIds(targetIds);
	        targets = $$.svg.selectAll($$.selectorTargets(targetIds));

	        targets.transition()
	            .style('opacity', 1, 'important')
	            .call($$.endall, function () {
	                targets.style('opacity', null).style('opacity', 1);
	            });

	        if (options.withLegend) {
	            $$.showLegend(targetIds);
	        }

	        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});
	    };

	    c3_chart_fn.hide = function (targetIds, options) {
	        var $$ = this.internal, targets;

	        targetIds = $$.mapToTargetIds(targetIds);
	        options = options || {};

	        $$.addHiddenTargetIds(targetIds);
	        targets = $$.svg.selectAll($$.selectorTargets(targetIds));

	        targets.transition()
	            .style('opacity', 0, 'important')
	            .call($$.endall, function () {
	                targets.style('opacity', null).style('opacity', 0);
	            });

	        if (options.withLegend) {
	            $$.hideLegend(targetIds);
	        }

	        $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});
	    };

	    c3_chart_fn.toggle = function (targetIds, options) {
	        var that = this, $$ = this.internal;
	        $$.mapToTargetIds(targetIds).forEach(function (targetId) {
	            $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);
	        });
	    };

	    c3_chart_fn.zoom = function (domain) {
	        var $$ = this.internal;
	        if (domain) {
	            if ($$.isTimeSeries()) {
	                domain = domain.map(function (x) { return $$.parseDate(x); });
	            }
	            $$.brush.extent(domain);
	            $$.redraw({withUpdateXDomain: true, withY: $$.config.zoom_rescale});
	            $$.config.zoom_onzoom.call(this, $$.x.orgDomain());
	        }
	        return $$.brush.extent();
	    };
	    c3_chart_fn.zoom.enable = function (enabled) {
	        var $$ = this.internal;
	        $$.config.zoom_enabled = enabled;
	        $$.updateAndRedraw();
	    };
	    c3_chart_fn.unzoom = function () {
	        var $$ = this.internal;
	        $$.brush.clear().update();
	        $$.redraw({withUpdateXDomain: true});
	    };

	    c3_chart_fn.zoom.max = function (max) {
	        var $$ = this.internal, config = $$.config, d3 = $$.d3;
	        if (max === 0 || max) {
	            config.zoom_x_max = d3.max([$$.orgXDomain[1], max]);
	        }
	        else {
	            return config.zoom_x_max;
	        }
	    };

	    c3_chart_fn.zoom.min = function (min) {
	        var $$ = this.internal, config = $$.config, d3 = $$.d3;
	        if (min === 0 || min) {
	            config.zoom_x_min = d3.min([$$.orgXDomain[0], min]);
	        }
	        else {
	            return config.zoom_x_min;
	        }
	    };

	    c3_chart_fn.zoom.range = function (range) {
	        if (arguments.length) {
	            if (isDefined(range.max)) { this.domain.max(range.max); }
	            if (isDefined(range.min)) { this.domain.min(range.min); }
	        } else {
	            return {
	                max: this.domain.max(),
	                min: this.domain.min()
	            };
	        }
	    };

	    c3_chart_fn.load = function (args) {
	        var $$ = this.internal, config = $$.config;
	        // update xs if specified
	        if (args.xs) {
	            $$.addXs(args.xs);
	        }
	        // update names if exists
	        if ('names' in args) {
	            c3_chart_fn.data.names.bind(this)(args.names);
	        }
	        // update classes if exists
	        if ('classes' in args) {
	            Object.keys(args.classes).forEach(function (id) {
	                config.data_classes[id] = args.classes[id];
	            });
	        }
	        // update categories if exists
	        if ('categories' in args && $$.isCategorized()) {
	            config.axis_x_categories = args.categories;
	        }
	        // update axes if exists
	        if ('axes' in args) {
	            Object.keys(args.axes).forEach(function (id) {
	                config.data_axes[id] = args.axes[id];
	            });
	        }
	        // update colors if exists
	        if ('colors' in args) {
	            Object.keys(args.colors).forEach(function (id) {
	                config.data_colors[id] = args.colors[id];
	            });
	        }
	        // use cache if exists
	        if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {
	            $$.load($$.getCaches(args.cacheIds), args.done);
	            return;
	        }
	        // unload if needed
	        if ('unload' in args) {
	            // TODO: do not unload if target will load (included in url/rows/columns)
	            $$.unload($$.mapToTargetIds((typeof args.unload === 'boolean' && args.unload) ? null : args.unload), function () {
	                $$.loadFromArgs(args);
	            });
	        } else {
	            $$.loadFromArgs(args);
	        }
	    };

	    c3_chart_fn.unload = function (args) {
	        var $$ = this.internal;
	        args = args || {};
	        if (args instanceof Array) {
	            args = {ids: args};
	        } else if (typeof args === 'string') {
	            args = {ids: [args]};
	        }
	        $$.unload($$.mapToTargetIds(args.ids), function () {
	            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true});
	            if (args.done) { args.done(); }
	        });
	    };

	    c3_chart_fn.flow = function (args) {
	        var $$ = this.internal,
	            targets, data, notfoundIds = [], orgDataCount = $$.getMaxDataCount(),
	            dataCount, domain, baseTarget, baseValue, length = 0, tail = 0, diff, to;

	        if (args.json) {
	            data = $$.convertJsonToData(args.json, args.keys);
	        }
	        else if (args.rows) {
	            data = $$.convertRowsToData(args.rows);
	        }
	        else if (args.columns) {
	            data = $$.convertColumnsToData(args.columns);
	        }
	        else {
	            return;
	        }
	        targets = $$.convertDataToTargets(data, true);

	        // Update/Add data
	        $$.data.targets.forEach(function (t) {
	            var found = false, i, j;
	            for (i = 0; i < targets.length; i++) {
	                if (t.id === targets[i].id) {
	                    found = true;

	                    if (t.values[t.values.length - 1]) {
	                        tail = t.values[t.values.length - 1].index + 1;
	                    }
	                    length = targets[i].values.length;

	                    for (j = 0; j < length; j++) {
	                        targets[i].values[j].index = tail + j;
	                        if (!$$.isTimeSeries()) {
	                            targets[i].values[j].x = tail + j;
	                        }
	                    }
	                    t.values = t.values.concat(targets[i].values);

	                    targets.splice(i, 1);
	                    break;
	                }
	            }
	            if (!found) { notfoundIds.push(t.id); }
	        });

	        // Append null for not found targets
	        $$.data.targets.forEach(function (t) {
	            var i, j;
	            for (i = 0; i < notfoundIds.length; i++) {
	                if (t.id === notfoundIds[i]) {
	                    tail = t.values[t.values.length - 1].index + 1;
	                    for (j = 0; j < length; j++) {
	                        t.values.push({
	                            id: t.id,
	                            index: tail + j,
	                            x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,
	                            value: null
	                        });
	                    }
	                }
	            }
	        });

	        // Generate null values for new target
	        if ($$.data.targets.length) {
	            targets.forEach(function (t) {
	                var i, missing = [];
	                for (i = $$.data.targets[0].values[0].index; i < tail; i++) {
	                    missing.push({
	                        id: t.id,
	                        index: i,
	                        x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,
	                        value: null
	                    });
	                }
	                t.values.forEach(function (v) {
	                    v.index += tail;
	                    if (!$$.isTimeSeries()) {
	                        v.x += tail;
	                    }
	                });
	                t.values = missing.concat(t.values);
	            });
	        }
	        $$.data.targets = $$.data.targets.concat(targets); // add remained

	        // check data count because behavior needs to change when it's only one
	        dataCount = $$.getMaxDataCount();
	        baseTarget = $$.data.targets[0];
	        baseValue = baseTarget.values[0];

	        // Update length to flow if needed
	        if (isDefined(args.to)) {
	            length = 0;
	            to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;
	            baseTarget.values.forEach(function (v) {
	                if (v.x < to) { length++; }
	            });
	        } else if (isDefined(args.length)) {
	            length = args.length;
	        }

	        // If only one data, update the domain to flow from left edge of the chart
	        if (!orgDataCount) {
	            if ($$.isTimeSeries()) {
	                if (baseTarget.values.length > 1) {
	                    diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;
	                } else {
	                    diff = baseValue.x - $$.getXDomain($$.data.targets)[0];
	                }
	            } else {
	                diff = 1;
	            }
	            domain = [baseValue.x - diff, baseValue.x];
	            $$.updateXDomain(null, true, true, false, domain);
	        } else if (orgDataCount === 1) {
	            if ($$.isTimeSeries()) {
	                diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;
	                domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];
	                $$.updateXDomain(null, true, true, false, domain);
	            }
	        }

	        // Set targets
	        $$.updateTargets($$.data.targets);

	        // Redraw with new targets
	        $$.redraw({
	            flow: {
	                index: baseValue.index,
	                length: length,
	                duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,
	                done: args.done,
	                orgDataCount: orgDataCount,
	            },
	            withLegend: true,
	            withTransition: orgDataCount > 1,
	            withTrimXDomain: false,
	            withUpdateXAxis: true,
	        });
	    };

	    c3_chart_internal_fn.generateFlow = function (args) {
	        var $$ = this, config = $$.config, d3 = $$.d3;

	        return function () {
	            var targets = args.targets,
	                flow = args.flow,
	                drawBar = args.drawBar,
	                drawLine = args.drawLine,
	                drawArea = args.drawArea,
	                cx = args.cx,
	                cy = args.cy,
	                xv = args.xv,
	                xForText = args.xForText,
	                yForText = args.yForText,
	                duration = args.duration;

	            var translateX, scaleX = 1, transform,
	                flowIndex = flow.index,
	                flowLength = flow.length,
	                flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex),
	                flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength),
	                orgDomain = $$.x.domain(), domain,
	                durationForFlow = flow.duration || duration,
	                done = flow.done || function () {},
	                wait = $$.generateWait();

	            var xgrid = $$.xgrid || d3.selectAll([]),
	                xgridLines = $$.xgridLines || d3.selectAll([]),
	                mainRegion = $$.mainRegion || d3.selectAll([]),
	                mainText = $$.mainText || d3.selectAll([]),
	                mainBar = $$.mainBar || d3.selectAll([]),
	                mainLine = $$.mainLine || d3.selectAll([]),
	                mainArea = $$.mainArea || d3.selectAll([]),
	                mainCircle = $$.mainCircle || d3.selectAll([]);

	            // set flag
	            $$.flowing = true;

	            // remove head data after rendered
	            $$.data.targets.forEach(function (d) {
	                d.values.splice(0, flowLength);
	            });

	            // update x domain to generate axis elements for flow
	            domain = $$.updateXDomain(targets, true, true);
	            // update elements related to x scale
	            if ($$.updateXGrid) { $$.updateXGrid(true); }

	            // generate transform to flow
	            if (!flow.orgDataCount) { // if empty
	                if ($$.data.targets[0].values.length !== 1) {
	                    translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
	                } else {
	                    if ($$.isTimeSeries()) {
	                        flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);
	                        flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);
	                        translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
	                    } else {
	                        translateX = diffDomain(domain) / 2;
	                    }
	                }
	            } else if (flow.orgDataCount === 1 || (flowStart && flowStart.x) === (flowEnd && flowEnd.x)) {
	                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
	            } else {
	                if ($$.isTimeSeries()) {
	                    translateX = ($$.x(orgDomain[0]) - $$.x(domain[0]));
	                } else {
	                    translateX = ($$.x(flowStart.x) - $$.x(flowEnd.x));
	                }
	            }
	            scaleX = (diffDomain(orgDomain) / diffDomain(domain));
	            transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';

	            $$.hideXGridFocus();

	            d3.transition().ease('linear').duration(durationForFlow).each(function () {
	                wait.add($$.axes.x.transition().call($$.xAxis));
	                wait.add(mainBar.transition().attr('transform', transform));
	                wait.add(mainLine.transition().attr('transform', transform));
	                wait.add(mainArea.transition().attr('transform', transform));
	                wait.add(mainCircle.transition().attr('transform', transform));
	                wait.add(mainText.transition().attr('transform', transform));
	                wait.add(mainRegion.filter($$.isRegionOnX).transition().attr('transform', transform));
	                wait.add(xgrid.transition().attr('transform', transform));
	                wait.add(xgridLines.transition().attr('transform', transform));
	            })
	            .call(wait, function () {
	                var i, shapes = [], texts = [], eventRects = [];

	                // remove flowed elements
	                if (flowLength) {
	                    for (i = 0; i < flowLength; i++) {
	                        shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));
	                        texts.push('.' + CLASS.text + '-' + (flowIndex + i));
	                        eventRects.push('.' + CLASS.eventRect + '-' + (flowIndex + i));
	                    }
	                    $$.svg.selectAll('.' + CLASS.shapes).selectAll(shapes).remove();
	                    $$.svg.selectAll('.' + CLASS.texts).selectAll(texts).remove();
	                    $$.svg.selectAll('.' + CLASS.eventRects).selectAll(eventRects).remove();
	                    $$.svg.select('.' + CLASS.xgrid).remove();
	                }

	                // draw again for removing flowed elements and reverting attr
	                xgrid
	                    .attr('transform', null)
	                    .attr($$.xgridAttr);
	                xgridLines
	                    .attr('transform', null);
	                xgridLines.select('line')
	                    .attr("x1", config.axis_rotated ? 0 : xv)
	                    .attr("x2", config.axis_rotated ? $$.width : xv);
	                xgridLines.select('text')
	                    .attr("x", config.axis_rotated ? $$.width : 0)
	                    .attr("y", xv);
	                mainBar
	                    .attr('transform', null)
	                    .attr("d", drawBar);
	                mainLine
	                    .attr('transform', null)
	                    .attr("d", drawLine);
	                mainArea
	                    .attr('transform', null)
	                    .attr("d", drawArea);
	                mainCircle
	                    .attr('transform', null)
	                    .attr("cx", cx)
	                    .attr("cy", cy);
	                mainText
	                    .attr('transform', null)
	                    .attr('x', xForText)
	                    .attr('y', yForText)
	                    .style('fill-opacity', $$.opacityForText.bind($$));
	                mainRegion
	                    .attr('transform', null);
	                mainRegion.select('rect').filter($$.isRegionOnX)
	                    .attr("x", $$.regionX.bind($$))
	                    .attr("width", $$.regionWidth.bind($$));

	                if (config.interaction_enabled) {
	                    $$.redrawEventRect();
	                }

	                // callback for end of flow
	                done();

	                $$.flowing = false;
	            });
	        };
	    };

	    c3_chart_fn.selected = function (targetId) {
	        var $$ = this.internal, d3 = $$.d3;
	        return d3.merge(
	            $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll('.' + CLASS.shape)
	                .filter(function () { return d3.select(this).classed(CLASS.SELECTED); })
	                .map(function (d) { return d.map(function (d) { var data = d.__data__; return data.data ? data.data : data; }); })
	        );
	    };
	    c3_chart_fn.select = function (ids, indices, resetOther) {
	        var $$ = this.internal, d3 = $$.d3, config = $$.config;
	        if (! config.data_selection_enabled) { return; }
	        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
	            var shape = d3.select(this), id = d.data ? d.data.id : d.id,
	                toggle = $$.getToggle(this, d).bind($$),
	                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
	                isTargetIndex = !indices || indices.indexOf(i) >= 0,
	                isSelected = shape.classed(CLASS.SELECTED);
	            // line/area selection not supported yet
	            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
	                return;
	            }
	            if (isTargetId && isTargetIndex) {
	                if (config.data_selection_isselectable(d) && !isSelected) {
	                    toggle(true, shape.classed(CLASS.SELECTED, true), d, i);
	                }
	            } else if (isDefined(resetOther) && resetOther) {
	                if (isSelected) {
	                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
	                }
	            }
	        });
	    };
	    c3_chart_fn.unselect = function (ids, indices) {
	        var $$ = this.internal, d3 = $$.d3, config = $$.config;
	        if (! config.data_selection_enabled) { return; }
	        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
	            var shape = d3.select(this), id = d.data ? d.data.id : d.id,
	                toggle = $$.getToggle(this, d).bind($$),
	                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
	                isTargetIndex = !indices || indices.indexOf(i) >= 0,
	                isSelected = shape.classed(CLASS.SELECTED);
	            // line/area selection not supported yet
	            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
	                return;
	            }
	            if (isTargetId && isTargetIndex) {
	                if (config.data_selection_isselectable(d)) {
	                    if (isSelected) {
	                        toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
	                    }
	                }
	            }
	        });
	    };

	    c3_chart_fn.transform = function (type, targetIds) {
	        var $$ = this.internal,
	            options = ['pie', 'donut'].indexOf(type) >= 0 ? {withTransform: true} : null;
	        $$.transformTo(targetIds, type, options);
	    };

	    c3_chart_internal_fn.transformTo = function (targetIds, type, optionsForRedraw) {
	        var $$ = this,
	            withTransitionForAxis = !$$.hasArcType(),
	            options = optionsForRedraw || {withTransitionForAxis: withTransitionForAxis};
	        options.withTransitionForTransform = false;
	        $$.transiting = false;
	        $$.setTargetType(targetIds, type);
	        $$.updateTargets($$.data.targets); // this is needed when transforming to arc
	        $$.updateAndRedraw(options);
	    };

	    c3_chart_fn.groups = function (groups) {
	        var $$ = this.internal, config = $$.config;
	        if (isUndefined(groups)) { return config.data_groups; }
	        config.data_groups = groups;
	        $$.redraw();
	        return config.data_groups;
	    };

	    c3_chart_fn.xgrids = function (grids) {
	        var $$ = this.internal, config = $$.config;
	        if (! grids) { return config.grid_x_lines; }
	        config.grid_x_lines = grids;
	        $$.redrawWithoutRescale();
	        return config.grid_x_lines;
	    };
	    c3_chart_fn.xgrids.add = function (grids) {
	        var $$ = this.internal;
	        return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));
	    };
	    c3_chart_fn.xgrids.remove = function (params) { // TODO: multiple
	        var $$ = this.internal;
	        $$.removeGridLines(params, true);
	    };

	    c3_chart_fn.ygrids = function (grids) {
	        var $$ = this.internal, config = $$.config;
	        if (! grids) { return config.grid_y_lines; }
	        config.grid_y_lines = grids;
	        $$.redrawWithoutRescale();
	        return config.grid_y_lines;
	    };
	    c3_chart_fn.ygrids.add = function (grids) {
	        var $$ = this.internal;
	        return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));
	    };
	    c3_chart_fn.ygrids.remove = function (params) { // TODO: multiple
	        var $$ = this.internal;
	        $$.removeGridLines(params, false);
	    };

	    c3_chart_fn.regions = function (regions) {
	        var $$ = this.internal, config = $$.config;
	        if (!regions) { return config.regions; }
	        config.regions = regions;
	        $$.redrawWithoutRescale();
	        return config.regions;
	    };
	    c3_chart_fn.regions.add = function (regions) {
	        var $$ = this.internal, config = $$.config;
	        if (!regions) { return config.regions; }
	        config.regions = config.regions.concat(regions);
	        $$.redrawWithoutRescale();
	        return config.regions;
	    };
	    c3_chart_fn.regions.remove = function (options) {
	        var $$ = this.internal, config = $$.config,
	            duration, classes, regions;

	        options = options || {};
	        duration = $$.getOption(options, "duration", config.transition_duration);
	        classes = $$.getOption(options, "classes", [CLASS.region]);

	        regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) { return '.' + c; }));
	        (duration ? regions.transition().duration(duration) : regions)
	            .style('opacity', 0)
	            .remove();

	        config.regions = config.regions.filter(function (region) {
	            var found = false;
	            if (!region['class']) {
	                return true;
	            }
	            region['class'].split(' ').forEach(function (c) {
	                if (classes.indexOf(c) >= 0) { found = true; }
	            });
	            return !found;
	        });

	        return config.regions;
	    };

	    c3_chart_fn.data = function (targetIds) {
	        var targets = this.internal.data.targets;
	        return typeof targetIds === 'undefined' ? targets : targets.filter(function (t) {
	            return [].concat(targetIds).indexOf(t.id) >= 0;
	        });
	    };
	    c3_chart_fn.data.shown = function (targetIds) {
	        return this.internal.filterTargetsToShow(this.data(targetIds));
	    };
	    c3_chart_fn.data.values = function (targetId) {
	        var targets, values = null;
	        if (targetId) {
	            targets = this.data(targetId);
	            values = targets[0] ? targets[0].values.map(function (d) { return d.value; }) : null;
	        }
	        return values;
	    };
	    c3_chart_fn.data.names = function (names) {
	        this.internal.clearLegendItemTextBoxCache();
	        return this.internal.updateDataAttributes('names', names);
	    };
	    c3_chart_fn.data.colors = function (colors) {
	        return this.internal.updateDataAttributes('colors', colors);
	    };
	    c3_chart_fn.data.axes = function (axes) {
	        return this.internal.updateDataAttributes('axes', axes);
	    };

	    c3_chart_fn.category = function (i, category) {
	        var $$ = this.internal, config = $$.config;
	        if (arguments.length > 1) {
	            config.axis_x_categories[i] = category;
	            $$.redraw();
	        }
	        return config.axis_x_categories[i];
	    };
	    c3_chart_fn.categories = function (categories) {
	        var $$ = this.internal, config = $$.config;
	        if (!arguments.length) { return config.axis_x_categories; }
	        config.axis_x_categories = categories;
	        $$.redraw();
	        return config.axis_x_categories;
	    };

	    // TODO: fix
	    c3_chart_fn.color = function (id) {
	        var $$ = this.internal;
	        return $$.color(id); // more patterns
	    };

	    c3_chart_fn.x = function (x) {
	        var $$ = this.internal;
	        if (arguments.length) {
	            $$.updateTargetX($$.data.targets, x);
	            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});
	        }
	        return $$.data.xs;
	    };
	    c3_chart_fn.xs = function (xs) {
	        var $$ = this.internal;
	        if (arguments.length) {
	            $$.updateTargetXs($$.data.targets, xs);
	            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});
	        }
	        return $$.data.xs;
	    };

	    c3_chart_fn.axis = function () {};
	    c3_chart_fn.axis.labels = function (labels) {
	        var $$ = this.internal;
	        if (arguments.length) {
	            Object.keys(labels).forEach(function (axisId) {
	                $$.axis.setLabelText(axisId, labels[axisId]);
	            });
	            $$.axis.updateLabels();
	        }
	        // TODO: return some values?
	    };
	    c3_chart_fn.axis.max = function (max) {
	        var $$ = this.internal, config = $$.config;
	        if (arguments.length) {
	            if (typeof max === 'object') {
	                if (isValue(max.x)) { config.axis_x_max = max.x; }
	                if (isValue(max.y)) { config.axis_y_max = max.y; }
	                if (isValue(max.y2)) { config.axis_y2_max = max.y2; }
	            } else {
	                config.axis_y_max = config.axis_y2_max = max;
	            }
	            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});
	        } else {
	            return {
	                x: config.axis_x_max,
	                y: config.axis_y_max,
	                y2: config.axis_y2_max
	            };
	        }
	    };
	    c3_chart_fn.axis.min = function (min) {
	        var $$ = this.internal, config = $$.config;
	        if (arguments.length) {
	            if (typeof min === 'object') {
	                if (isValue(min.x)) { config.axis_x_min = min.x; }
	                if (isValue(min.y)) { config.axis_y_min = min.y; }
	                if (isValue(min.y2)) { config.axis_y2_min = min.y2; }
	            } else {
	                config.axis_y_min = config.axis_y2_min = min;
	            }
	            $$.redraw({withUpdateOrgXDomain: true, withUpdateXDomain: true});
	        } else {
	            return {
	                x: config.axis_x_min,
	                y: config.axis_y_min,
	                y2: config.axis_y2_min
	            };
	        }
	    };
	    c3_chart_fn.axis.range = function (range) {
	        if (arguments.length) {
	            if (isDefined(range.max)) { this.axis.max(range.max); }
	            if (isDefined(range.min)) { this.axis.min(range.min); }
	        } else {
	            return {
	                max: this.axis.max(),
	                min: this.axis.min()
	            };
	        }
	    };

	    c3_chart_fn.legend = function () {};
	    c3_chart_fn.legend.show = function (targetIds) {
	        var $$ = this.internal;
	        $$.showLegend($$.mapToTargetIds(targetIds));
	        $$.updateAndRedraw({withLegend: true});
	    };
	    c3_chart_fn.legend.hide = function (targetIds) {
	        var $$ = this.internal;
	        $$.hideLegend($$.mapToTargetIds(targetIds));
	        $$.updateAndRedraw({withLegend: true});
	    };

	    c3_chart_fn.resize = function (size) {
	        var $$ = this.internal, config = $$.config;
	        config.size_width = size ? size.width : null;
	        config.size_height = size ? size.height : null;
	        this.flush();
	    };

	    c3_chart_fn.flush = function () {
	        var $$ = this.internal;
	        $$.updateAndRedraw({withLegend: true, withTransition: false, withTransitionForTransform: false});
	    };

	    c3_chart_fn.destroy = function () {
	        var $$ = this.internal;

	        window.clearInterval($$.intervalForObserveInserted);

	        if ($$.resizeTimeout !== undefined) {
	            window.clearTimeout($$.resizeTimeout);
	        }

	        if (window.detachEvent) {
	            window.detachEvent('onresize', $$.resizeFunction);
	        } else if (window.removeEventListener) {
	            window.removeEventListener('resize', $$.resizeFunction);
	        } else {
	            var wrapper = window.onresize;
	            // check if no one else removed our wrapper and remove our resizeFunction from it
	            if (wrapper && wrapper.add && wrapper.remove) {
	                wrapper.remove($$.resizeFunction);
	            }
	        }

	        $$.selectChart.classed('c3', false).html("");

	        // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.
	        Object.keys($$).forEach(function (key) {
	            $$[key] = null;
	        });

	        return null;
	    };

	    c3_chart_fn.tooltip = function () {};
	    c3_chart_fn.tooltip.show = function (args) {
	        var $$ = this.internal, index, mouse;

	        // determine mouse position on the chart
	        if (args.mouse) {
	            mouse = args.mouse;
	        }

	        // determine focus data
	        if (args.data) {
	            if ($$.isMultipleX()) {
	                // if multiple xs, target point will be determined by mouse
	                mouse = [$$.x(args.data.x), $$.getYScale(args.data.id)(args.data.value)];
	                index = null;
	            } else {
	                // TODO: when tooltip_grouped = false
	                index = isValue(args.data.index) ? args.data.index : $$.getIndexByX(args.data.x);
	            }
	        }
	        else if (typeof args.x !== 'undefined') {
	            index = $$.getIndexByX(args.x);
	        }
	        else if (typeof args.index !== 'undefined') {
	            index = args.index;
	        }

	        // emulate mouse events to show
	        $$.dispatchEvent('mouseover', index, mouse);
	        $$.dispatchEvent('mousemove', index, mouse);

	        $$.config.tooltip_onshow.call($$, args.data);
	    };
	    c3_chart_fn.tooltip.hide = function () {
	        // TODO: get target data by checking the state of focus
	        this.internal.dispatchEvent('mouseout', 0);

	        this.internal.config.tooltip_onhide.call(this);
	    };

	    // Features:
	    // 1. category axis
	    // 2. ceil values of translate/x/y to int for half pixel antialiasing
	    // 3. multiline tick text
	    var tickTextCharSize;
	    function c3_axis(d3, params) {
	        var scale = d3.scale.linear(), orient = "bottom", innerTickSize = 6, outerTickSize, tickPadding = 3, tickValues = null, tickFormat, tickArguments;

	        var tickOffset = 0, tickCulling = true, tickCentered;

	        params = params || {};
	        outerTickSize = params.withOuterTick ? 6 : 0;

	        function axisX(selection, x) {
	            selection.attr("transform", function (d) {
	                return "translate(" + Math.ceil(x(d) + tickOffset) + ", 0)";
	            });
	        }
	        function axisY(selection, y) {
	            selection.attr("transform", function (d) {
	                return "translate(0," + Math.ceil(y(d)) + ")";
	            });
	        }
	        function scaleExtent(domain) {
	            var start = domain[0], stop = domain[domain.length - 1];
	            return start < stop ? [ start, stop ] : [ stop, start ];
	        }
	        function generateTicks(scale) {
	            var i, domain, ticks = [];
	            if (scale.ticks) {
	                return scale.ticks.apply(scale, tickArguments);
	            }
	            domain = scale.domain();
	            for (i = Math.ceil(domain[0]); i < domain[1]; i++) {
	                ticks.push(i);
	            }
	            if (ticks.length > 0 && ticks[0] > 0) {
	                ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));
	            }
	            return ticks;
	        }
	        function copyScale() {
	            var newScale = scale.copy(), domain;
	            if (params.isCategory) {
	                domain = scale.domain();
	                newScale.domain([domain[0], domain[1] - 1]);
	            }
	            return newScale;
	        }
	        function textFormatted(v) {
	            var formatted = tickFormat ? tickFormat(v) : v;
	            return typeof formatted !== 'undefined' ? formatted : '';
	        }
	        function getSizeFor1Char(tick) {
	            if (tickTextCharSize) {
	                return tickTextCharSize;
	            }
	            var size = {
	                h: 11.5,
	                w: 5.5
	            };
	            tick.select('text').text(textFormatted).each(function (d) {
	                var box = this.getBoundingClientRect(),
	                    text = textFormatted(d),
	                    h = box.height,
	                    w = text ? (box.width / text.length) : undefined;
	                if (h && w) {
	                    size.h = h;
	                    size.w = w;
	                }
	            }).text('');
	            tickTextCharSize = size;
	            return size;
	        }
	        function transitionise(selection) {
	            return params.withoutTransition ? selection : d3.transition(selection);
	        }
	        function axis(g) {
	            g.each(function () {
	                var g = axis.g = d3.select(this);

	                var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = copyScale();

	                var ticks = tickValues ? tickValues : generateTicks(scale1),
	                    tick = g.selectAll(".tick").data(ticks, scale1),
	                    tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", 1e-6),
	                    // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.
	                    tickExit = tick.exit().remove(),
	                    tickUpdate = transitionise(tick).style("opacity", 1),
	                    tickTransform, tickX, tickY;

	                var range = scale.rangeExtent ? scale.rangeExtent() : scaleExtent(scale.range()),
	                    path = g.selectAll(".domain").data([ 0 ]),
	                    pathUpdate = (path.enter().append("path").attr("class", "domain"), transitionise(path));
	                tickEnter.append("line");
	                tickEnter.append("text");

	                var lineEnter = tickEnter.select("line"),
	                    lineUpdate = tickUpdate.select("line"),
	                    textEnter = tickEnter.select("text"),
	                    textUpdate = tickUpdate.select("text");

	                if (params.isCategory) {
	                    tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);
	                    tickX = tickCentered ? 0 : tickOffset;
	                    tickY = tickCentered ? tickOffset : 0;
	                } else {
	                    tickOffset = tickX = 0;
	                }

	                var text, tspan, sizeFor1Char = getSizeFor1Char(g.select('.tick')), counts = [];
	                var tickLength = Math.max(innerTickSize, 0) + tickPadding,
	                    isVertical = orient === 'left' || orient === 'right';

	                // this should be called only when category axis
	                function splitTickText(d, maxWidth) {
	                    var tickText = textFormatted(d),
	                        subtext, spaceIndex, textWidth, splitted = [];

	                    if (Object.prototype.toString.call(tickText) === "[object Array]") {
	                        return tickText;
	                    }

	                    if (!maxWidth || maxWidth <= 0) {
	                        maxWidth = isVertical ? 95 : params.isCategory ? (Math.ceil(scale1(ticks[1]) - scale1(ticks[0])) - 12) : 110;
	                    }

	                    function split(splitted, text) {
	                        spaceIndex = undefined;
	                        for (var i = 1; i < text.length; i++) {
	                            if (text.charAt(i) === ' ') {
	                                spaceIndex = i;
	                            }
	                            subtext = text.substr(0, i + 1);
	                            textWidth = sizeFor1Char.w * subtext.length;
	                            // if text width gets over tick width, split by space index or crrent index
	                            if (maxWidth < textWidth) {
	                                return split(
	                                    splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)),
	                                    text.slice(spaceIndex ? spaceIndex + 1 : i)
	                                );
	                            }
	                        }
	                        return splitted.concat(text);
	                    }

	                    return split(splitted, tickText + "");
	                }

	                function tspanDy(d, i) {
	                    var dy = sizeFor1Char.h;
	                    if (i === 0) {
	                        if (orient === 'left' || orient === 'right') {
	                            dy = -((counts[d.index] - 1) * (sizeFor1Char.h / 2) - 3);
	                        } else {
	                            dy = ".71em";
	                        }
	                    }
	                    return dy;
	                }

	                function tickSize(d) {
	                    var tickPosition = scale(d) + (tickCentered ? 0 : tickOffset);
	                    return range[0] < tickPosition && tickPosition < range[1] ? innerTickSize : 0;
	                }

	                text = tick.select("text");
	                tspan = text.selectAll('tspan')
	                    .data(function (d, i) {
	                        var splitted = params.tickMultiline ? splitTickText(d, params.tickWidth) : [].concat(textFormatted(d));
	                        counts[i] = splitted.length;
	                        return splitted.map(function (s) {
	                            return { index: i, splitted: s };
	                        });
	                    });
	                tspan.enter().append('tspan');
	                tspan.exit().remove();
	                tspan.text(function (d) { return d.splitted; });

	                var rotate = params.tickTextRotate;

	                function textAnchorForText(rotate) {
	                    if (!rotate) {
	                        return 'middle';
	                    }
	                    return rotate > 0 ? "start" : "end";
	                }
	                function textTransform(rotate) {
	                    if (!rotate) {
	                        return '';
	                    }
	                    return "rotate(" + rotate + ")";
	                }
	                function dxForText(rotate) {
	                    if (!rotate) {
	                        return 0;
	                    }
	                    return 8 * Math.sin(Math.PI * (rotate / 180));
	                }
	                function yForText(rotate) {
	                    if (!rotate) {
	                        return tickLength;
	                    }
	                    return 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1);
	                }

	                switch (orient) {
	                case "bottom":
	                    {
	                        tickTransform = axisX;
	                        lineEnter.attr("y2", innerTickSize);
	                        textEnter.attr("y", tickLength);
	                        lineUpdate.attr("x1", tickX).attr("x2", tickX).attr("y2", tickSize);
	                        textUpdate.attr("x", 0).attr("y", yForText(rotate))
	                            .style("text-anchor", textAnchorForText(rotate))
	                            .attr("transform", textTransform(rotate));
	                        tspan.attr('x', 0).attr("dy", tspanDy).attr('dx', dxForText(rotate));
	                        pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
	                        break;
	                    }
	                case "top":
	                    {
	                        // TODO: rotated tick text
	                        tickTransform = axisX;
	                        lineEnter.attr("y2", -innerTickSize);
	                        textEnter.attr("y", -tickLength);
	                        lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
	                        textUpdate.attr("x", 0).attr("y", -tickLength);
	                        text.style("text-anchor", "middle");
	                        tspan.attr('x', 0).attr("dy", "0em");
	                        pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
	                        break;
	                    }
	                case "left":
	                    {
	                        tickTransform = axisY;
	                        lineEnter.attr("x2", -innerTickSize);
	                        textEnter.attr("x", -tickLength);
	                        lineUpdate.attr("x2", -innerTickSize).attr("y1", tickY).attr("y2", tickY);
	                        textUpdate.attr("x", -tickLength).attr("y", tickOffset);
	                        text.style("text-anchor", "end");
	                        tspan.attr('x', -tickLength).attr("dy", tspanDy);
	                        pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
	                        break;
	                    }
	                case "right":
	                    {
	                        tickTransform = axisY;
	                        lineEnter.attr("x2", innerTickSize);
	                        textEnter.attr("x", tickLength);
	                        lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
	                        textUpdate.attr("x", tickLength).attr("y", 0);
	                        text.style("text-anchor", "start");
	                        tspan.attr('x', tickLength).attr("dy", tspanDy);
	                        pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
	                        break;
	                    }
	                }
	                if (scale1.rangeBand) {
	                    var x = scale1, dx = x.rangeBand() / 2;
	                    scale0 = scale1 = function (d) {
	                        return x(d) + dx;
	                    };
	                } else if (scale0.rangeBand) {
	                    scale0 = scale1;
	                } else {
	                    tickExit.call(tickTransform, scale1);
	                }
	                tickEnter.call(tickTransform, scale0);
	                tickUpdate.call(tickTransform, scale1);
	            });
	        }
	        axis.scale = function (x) {
	            if (!arguments.length) { return scale; }
	            scale = x;
	            return axis;
	        };
	        axis.orient = function (x) {
	            if (!arguments.length) { return orient; }
	            orient = x in {top: 1, right: 1, bottom: 1, left: 1} ? x + "" : "bottom";
	            return axis;
	        };
	        axis.tickFormat = function (format) {
	            if (!arguments.length) { return tickFormat; }
	            tickFormat = format;
	            return axis;
	        };
	        axis.tickCentered = function (isCentered) {
	            if (!arguments.length) { return tickCentered; }
	            tickCentered = isCentered;
	            return axis;
	        };
	        axis.tickOffset = function () {
	            return tickOffset;
	        };
	        axis.tickInterval = function () {
	            var interval, length;
	            if (params.isCategory) {
	                interval = tickOffset * 2;
	            }
	            else {
	                length = axis.g.select('path.domain').node().getTotalLength() - outerTickSize * 2;
	                interval = length / axis.g.selectAll('line').size();
	            }
	            return interval === Infinity ? 0 : interval;
	        };
	        axis.ticks = function () {
	            if (!arguments.length) { return tickArguments; }
	            tickArguments = arguments;
	            return axis;
	        };
	        axis.tickCulling = function (culling) {
	            if (!arguments.length) { return tickCulling; }
	            tickCulling = culling;
	            return axis;
	        };
	        axis.tickValues = function (x) {
	            if (typeof x === 'function') {
	                tickValues = function () {
	                    return x(scale.domain());
	                };
	            }
	            else {
	                if (!arguments.length) { return tickValues; }
	                tickValues = x;
	            }
	            return axis;
	        };
	        return axis;
	    }

	    c3_chart_internal_fn.isSafari = function () {
	        var ua = window.navigator.userAgent;
	        return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;
	    };
	    c3_chart_internal_fn.isChrome = function () {
	        var ua = window.navigator.userAgent;
	        return ua.indexOf('Chrome') >= 0;
	    };

	    /* jshint ignore:start */

	    // PhantomJS doesn't have support for Function.prototype.bind, which has caused confusion. Use
	    // this polyfill to avoid the confusion.
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill

	    if (!Function.prototype.bind) {
	      Function.prototype.bind = function(oThis) {
	        if (typeof this !== 'function') {
	          // closest thing possible to the ECMAScript 5
	          // internal IsCallable function
	          throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
	        }

	        var aArgs   = Array.prototype.slice.call(arguments, 1),
	            fToBind = this,
	            fNOP    = function() {},
	            fBound  = function() {
	              return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
	            };

	        fNOP.prototype = this.prototype;
	        fBound.prototype = new fNOP();

	        return fBound;
	      };
	    }

	    //SVGPathSeg API polyfill
	    //https://github.com/progers/pathseg
	    //
	    //This is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
	    //SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
	    //changes which were implemented in Firefox 43 and Chrome 46.
	    //Chrome 48 removes these APIs, so this polyfill is required.

	    (function() { "use strict";
	     if (!("SVGPathSeg" in window)) {
	         // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSeg
	         window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
	             this.pathSegType = type;
	             this.pathSegTypeAsLetter = typeAsLetter;
	             this._owningPathSegList = owningPathSegList;
	         }

	         SVGPathSeg.PATHSEG_UNKNOWN = 0;
	         SVGPathSeg.PATHSEG_CLOSEPATH = 1;
	         SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
	         SVGPathSeg.PATHSEG_MOVETO_REL = 3;
	         SVGPathSeg.PATHSEG_LINETO_ABS = 4;
	         SVGPathSeg.PATHSEG_LINETO_REL = 5;
	         SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
	         SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
	         SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
	         SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
	         SVGPathSeg.PATHSEG_ARC_ABS = 10;
	         SVGPathSeg.PATHSEG_ARC_REL = 11;
	         SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
	         SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
	         SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
	         SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
	         SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
	         SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
	         SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
	         SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

	         // Notify owning PathSegList on any changes so they can be synchronized back to the path element.
	         SVGPathSeg.prototype._segmentChanged = function() {
	             if (this._owningPathSegList)
	                 this._owningPathSegList.segmentChanged(this);
	         }

	         window.SVGPathSegClosePath = function(owningPathSegList) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CLOSEPATH, "z", owningPathSegList);
	         }
	         SVGPathSegClosePath.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegClosePath.prototype.toString = function() { return "[object SVGPathSegClosePath]"; }
	         SVGPathSegClosePath.prototype._asPathString = function() { return this.pathSegTypeAsLetter; }
	         SVGPathSegClosePath.prototype.clone = function() { return new SVGPathSegClosePath(undefined); }

	         window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_ABS, "M", owningPathSegList);
	             this._x = x;
	             this._y = y;
	         }
	         SVGPathSegMovetoAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegMovetoAbs.prototype.toString = function() { return "[object SVGPathSegMovetoAbs]"; }
	         SVGPathSegMovetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x + " " + this._y; }
	         SVGPathSegMovetoAbs.prototype.clone = function() { return new SVGPathSegMovetoAbs(undefined, this._x, this._y); }
	         Object.defineProperty(SVGPathSegMovetoAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegMovetoAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_REL, "m", owningPathSegList);
	             this._x = x;
	             this._y = y;
	         }
	         SVGPathSegMovetoRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegMovetoRel.prototype.toString = function() { return "[object SVGPathSegMovetoRel]"; }
	         SVGPathSegMovetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x + " " + this._y; }
	         SVGPathSegMovetoRel.prototype.clone = function() { return new SVGPathSegMovetoRel(undefined, this._x, this._y); }
	         Object.defineProperty(SVGPathSegMovetoRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegMovetoRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_ABS, "L", owningPathSegList);
	             this._x = x;
	             this._y = y;
	         }
	         SVGPathSegLinetoAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegLinetoAbs.prototype.toString = function() { return "[object SVGPathSegLinetoAbs]"; }
	         SVGPathSegLinetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x + " " + this._y; }
	         SVGPathSegLinetoAbs.prototype.clone = function() { return new SVGPathSegLinetoAbs(undefined, this._x, this._y); }
	         Object.defineProperty(SVGPathSegLinetoAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegLinetoAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_REL, "l", owningPathSegList);
	             this._x = x;
	             this._y = y;
	         }
	         SVGPathSegLinetoRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegLinetoRel.prototype.toString = function() { return "[object SVGPathSegLinetoRel]"; }
	         SVGPathSegLinetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x + " " + this._y; }
	         SVGPathSegLinetoRel.prototype.clone = function() { return new SVGPathSegLinetoRel(undefined, this._x, this._y); }
	         Object.defineProperty(SVGPathSegLinetoRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegLinetoRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "C", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._x1 = x1;
	             this._y1 = y1;
	             this._x2 = x2;
	             this._y2 = y2;
	         }
	         SVGPathSegCurvetoCubicAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoCubicAbs.prototype.toString = function() { return "[object SVGPathSegCurvetoCubicAbs]"; }
	         SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoCubicAbs.prototype.clone = function() { return new SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
	         Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "x1", { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "y1", { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "x2", { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "y2", { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "c", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._x1 = x1;
	             this._y1 = y1;
	             this._x2 = x2;
	             this._y2 = y2;
	         }
	         SVGPathSegCurvetoCubicRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoCubicRel.prototype.toString = function() { return "[object SVGPathSegCurvetoCubicRel]"; }
	         SVGPathSegCurvetoCubicRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoCubicRel.prototype.clone = function() { return new SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); }
	         Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "x1", { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "y1", { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "x2", { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "y2", { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "Q", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._x1 = x1;
	             this._y1 = y1;
	         }
	         SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() { return "[object SVGPathSegCurvetoQuadraticAbs]"; }
	         SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1); }
	         Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "x1", { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "y1", { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "q", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._x1 = x1;
	             this._y1 = y1;
	         }
	         SVGPathSegCurvetoQuadraticRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoQuadraticRel.prototype.toString = function() { return "[object SVGPathSegCurvetoQuadraticRel]"; }
	         SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoQuadraticRel.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1); }
	         Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "x1", { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "y1", { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_ABS, "A", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._r1 = r1;
	             this._r2 = r2;
	             this._angle = angle;
	             this._largeArcFlag = largeArcFlag;
	             this._sweepFlag = sweepFlag;
	         }
	         SVGPathSegArcAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegArcAbs.prototype.toString = function() { return "[object SVGPathSegArcAbs]"; }
	         SVGPathSegArcAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y; }
	         SVGPathSegArcAbs.prototype.clone = function() { return new SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "r1", { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "r2", { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "angle", { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "largeArcFlag", { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcAbs.prototype, "sweepFlag", { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_REL, "a", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._r1 = r1;
	             this._r2 = r2;
	             this._angle = angle;
	             this._largeArcFlag = largeArcFlag;
	             this._sweepFlag = sweepFlag;
	         }
	         SVGPathSegArcRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegArcRel.prototype.toString = function() { return "[object SVGPathSegArcRel]"; }
	         SVGPathSegArcRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y; }
	         SVGPathSegArcRel.prototype.clone = function() { return new SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); }
	         Object.defineProperty(SVGPathSegArcRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcRel.prototype, "r1", { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcRel.prototype, "r2", { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcRel.prototype, "angle", { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcRel.prototype, "largeArcFlag", { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegArcRel.prototype, "sweepFlag", { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "H", owningPathSegList);
	             this._x = x;
	         }
	         SVGPathSegLinetoHorizontalAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegLinetoHorizontalAbs.prototype.toString = function() { return "[object SVGPathSegLinetoHorizontalAbs]"; }
	         SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x; }
	         SVGPathSegLinetoHorizontalAbs.prototype.clone = function() { return new SVGPathSegLinetoHorizontalAbs(undefined, this._x); }
	         Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "h", owningPathSegList);
	             this._x = x;
	         }
	         SVGPathSegLinetoHorizontalRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegLinetoHorizontalRel.prototype.toString = function() { return "[object SVGPathSegLinetoHorizontalRel]"; }
	         SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x; }
	         SVGPathSegLinetoHorizontalRel.prototype.clone = function() { return new SVGPathSegLinetoHorizontalRel(undefined, this._x); }
	         Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "V", owningPathSegList);
	             this._y = y;
	         }
	         SVGPathSegLinetoVerticalAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegLinetoVerticalAbs.prototype.toString = function() { return "[object SVGPathSegLinetoVerticalAbs]"; }
	         SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._y; }
	         SVGPathSegLinetoVerticalAbs.prototype.clone = function() { return new SVGPathSegLinetoVerticalAbs(undefined, this._y); }
	         Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "v", owningPathSegList);
	             this._y = y;
	         }
	         SVGPathSegLinetoVerticalRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegLinetoVerticalRel.prototype.toString = function() { return "[object SVGPathSegLinetoVerticalRel]"; }
	         SVGPathSegLinetoVerticalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._y; }
	         SVGPathSegLinetoVerticalRel.prototype.clone = function() { return new SVGPathSegLinetoVerticalRel(undefined, this._y); }
	         Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "S", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._x2 = x2;
	             this._y2 = y2;
	         }
	         SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() { return "[object SVGPathSegCurvetoCubicSmoothAbs]"; }
	         SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() { return new SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2); }
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "x2", { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "y2", { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "s", owningPathSegList);
	             this._x = x;
	             this._y = y;
	             this._x2 = x2;
	             this._y2 = y2;
	         }
	         SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() { return "[object SVGPathSegCurvetoCubicSmoothRel]"; }
	         SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() { return new SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2); }
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "x2", { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "y2", { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "T", owningPathSegList);
	             this._x = x;
	             this._y = y;
	         }
	         SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() { return "[object SVGPathSegCurvetoQuadraticSmoothAbs]"; }
	         SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y); }
	         Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
	             SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "t", owningPathSegList);
	             this._x = x;
	             this._y = y;
	         }
	         SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
	         SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() { return "[object SVGPathSegCurvetoQuadraticSmoothRel]"; }
	         SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + " " + this._x + " " + this._y; }
	         SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y); }
	         Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, "x", { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
	         Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, "y", { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

	         // Add createSVGPathSeg* functions to SVGPathElement.
	         // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathElement.
	         SVGPathElement.prototype.createSVGPathSegClosePath = function() { return new SVGPathSegClosePath(undefined); }
	         SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) { return new SVGPathSegMovetoAbs(undefined, x, y); }
	         SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) { return new SVGPathSegMovetoRel(undefined, x, y); }
	         SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) { return new SVGPathSegLinetoAbs(undefined, x, y); }
	         SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) { return new SVGPathSegLinetoRel(undefined, x, y); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { return new SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { return new SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { return new SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { return new SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1); }
	         SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
	         SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
	         SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) { return new SVGPathSegLinetoHorizontalAbs(undefined, x); }
	         SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) { return new SVGPathSegLinetoHorizontalRel(undefined, x); }
	         SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) { return new SVGPathSegLinetoVerticalAbs(undefined, y); }
	         SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) { return new SVGPathSegLinetoVerticalRel(undefined, y); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { return new SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { return new SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y); }
	         SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y); }
	     }

	     if (!("SVGPathSegList" in window)) {
	         // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSegList
	         window.SVGPathSegList = function(pathElement) {
	             this._pathElement = pathElement;
	             this._list = this._parsePath(this._pathElement.getAttribute("d"));

	             // Use a MutationObserver to catch changes to the path's "d" attribute.
	             this._mutationObserverConfig = { "attributes": true, "attributeFilter": ["d"] };
	             this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
	             this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
	         }

	         Object.defineProperty(SVGPathSegList.prototype, "numberOfItems", {
	             get: function() {
	                 this._checkPathSynchronizedToList();
	                 return this._list.length;
	             },
	             enumerable: true
	         });

	         // Add the pathSegList accessors to SVGPathElement.
	         // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGAnimatedPathData
	         Object.defineProperty(SVGPathElement.prototype, "pathSegList", {
	             get: function() {
	                 if (!this._pathSegList)
	                     this._pathSegList = new SVGPathSegList(this);
	                 return this._pathSegList;
	             },
	             enumerable: true
	         });
	         // FIXME: The following are not implemented and simply return SVGPathElement.pathSegList.
	         Object.defineProperty(SVGPathElement.prototype, "normalizedPathSegList", { get: function() { return this.pathSegList; }, enumerable: true });
	         Object.defineProperty(SVGPathElement.prototype, "animatedPathSegList", { get: function() { return this.pathSegList; }, enumerable: true });
	         Object.defineProperty(SVGPathElement.prototype, "animatedNormalizedPathSegList", { get: function() { return this.pathSegList; }, enumerable: true });

	         // Process any pending mutations to the path element and update the list as needed.
	         // This should be the first call of all public functions and is needed because
	         // MutationObservers are not synchronous so we can have pending asynchronous mutations.
	         SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
	             this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
	         }

	         SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
	             if (!this._pathElement)
	                 return;
	             var hasPathMutations = false;
	             mutationRecords.forEach(function(record) {
	                 if (record.attributeName == "d")
	                     hasPathMutations = true;
	             });
	             if (hasPathMutations)
	                 this._list = this._parsePath(this._pathElement.getAttribute("d"));
	         }

	         // Serialize the list and update the path's 'd' attribute.
	         SVGPathSegList.prototype._writeListToPath = function() {
	             this._pathElementMutationObserver.disconnect();
	             this._pathElement.setAttribute("d", SVGPathSegList._pathSegArrayAsString(this._list));
	             this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
	         }

	         // When a path segment changes the list needs to be synchronized back to the path element.
	         SVGPathSegList.prototype.segmentChanged = function(pathSeg) {
	             this._writeListToPath();
	         }

	         SVGPathSegList.prototype.clear = function() {
	             this._checkPathSynchronizedToList();

	             this._list.forEach(function(pathSeg) {
	                 pathSeg._owningPathSegList = null;
	             });
	             this._list = [];
	             this._writeListToPath();
	         }

	         SVGPathSegList.prototype.initialize = function(newItem) {
	             this._checkPathSynchronizedToList();

	             this._list = [newItem];
	             newItem._owningPathSegList = this;
	             this._writeListToPath();
	             return newItem;
	         }

	         SVGPathSegList.prototype._checkValidIndex = function(index) {
	             if (isNaN(index) || index < 0 || index >= this.numberOfItems)
	                 throw "INDEX_SIZE_ERR";
	         }

	         SVGPathSegList.prototype.getItem = function(index) {
	             this._checkPathSynchronizedToList();

	             this._checkValidIndex(index);
	             return this._list[index];
	         }

	         SVGPathSegList.prototype.insertItemBefore = function(newItem, index) {
	             this._checkPathSynchronizedToList();

	             // Spec: If the index is greater than or equal to numberOfItems, then the new item is appended to the end of the list.
	             if (index > this.numberOfItems)
	                 index = this.numberOfItems;
	             if (newItem._owningPathSegList) {
	                 // SVG2 spec says to make a copy.
	                 newItem = newItem.clone();
	             }
	             this._list.splice(index, 0, newItem);
	             newItem._owningPathSegList = this;
	             this._writeListToPath();
	             return newItem;
	         }

	         SVGPathSegList.prototype.replaceItem = function(newItem, index) {
	             this._checkPathSynchronizedToList();

	             if (newItem._owningPathSegList) {
	                 // SVG2 spec says to make a copy.
	                 newItem = newItem.clone();
	             }
	             this._checkValidIndex(index);
	             this._list[index] = newItem;
	             newItem._owningPathSegList = this;
	             this._writeListToPath();
	             return newItem;
	         }

	         SVGPathSegList.prototype.removeItem = function(index) {
	             this._checkPathSynchronizedToList();

	             this._checkValidIndex(index);
	             var item = this._list[index];
	             this._list.splice(index, 1);
	             this._writeListToPath();
	             return item;
	         }

	         SVGPathSegList.prototype.appendItem = function(newItem) {
	             this._checkPathSynchronizedToList();

	             if (newItem._owningPathSegList) {
	                 // SVG2 spec says to make a copy.
	                 newItem = newItem.clone();
	             }
	             this._list.push(newItem);
	             newItem._owningPathSegList = this;
	             // TODO: Optimize this to just append to the existing attribute.
	             this._writeListToPath();
	             return newItem;
	         }

	         SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
	             var string = "";
	             var first = true;
	             pathSegArray.forEach(function(pathSeg) {
	                 if (first) {
	                     first = false;
	                     string += pathSeg._asPathString();
	                 } else {
	                     string += " " + pathSeg._asPathString();
	                 }
	             });
	             return string;
	         }

	         // This closely follows SVGPathParser::parsePath from Source/core/svg/SVGPathParser.cpp.
	         SVGPathSegList.prototype._parsePath = function(string) {
	             if (!string || string.length == 0)
	                 return [];

	             var owningPathSegList = this;

	             var Builder = function() {
	                 this.pathSegList = [];
	             }

	             Builder.prototype.appendSegment = function(pathSeg) {
	                 this.pathSegList.push(pathSeg);
	             }

	             var Source = function(string) {
	                 this._string = string;
	                 this._currentIndex = 0;
	                 this._endIndex = this._string.length;
	                 this._previousCommand = SVGPathSeg.PATHSEG_UNKNOWN;

	                 this._skipOptionalSpaces();
	             }

	             Source.prototype._isCurrentSpace = function() {
	                 var character = this._string[this._currentIndex];
	                 return character <= " " && (character == " " || character == "\n" || character == "\t" || character == "\r" || character == "\f");
	             }

	             Source.prototype._skipOptionalSpaces = function() {
	                 while (this._currentIndex < this._endIndex && this._isCurrentSpace())
	                     this._currentIndex++;
	                 return this._currentIndex < this._endIndex;
	             }

	             Source.prototype._skipOptionalSpacesOrDelimiter = function() {
	                 if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ",")
	                     return false;
	                 if (this._skipOptionalSpaces()) {
	                     if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ",") {
	                         this._currentIndex++;
	                         this._skipOptionalSpaces();
	                     }
	                 }
	                 return this._currentIndex < this._endIndex;
	             }

	             Source.prototype.hasMoreData = function() {
	                 return this._currentIndex < this._endIndex;
	             }

	             Source.prototype.peekSegmentType = function() {
	                 var lookahead = this._string[this._currentIndex];
	                 return this._pathSegTypeFromChar(lookahead);
	             }

	             Source.prototype._pathSegTypeFromChar = function(lookahead) {
	                 switch (lookahead) {
	                 case "Z":
	                 case "z":
	                     return SVGPathSeg.PATHSEG_CLOSEPATH;
	                 case "M":
	                     return SVGPathSeg.PATHSEG_MOVETO_ABS;
	                 case "m":
	                     return SVGPathSeg.PATHSEG_MOVETO_REL;
	                 case "L":
	                     return SVGPathSeg.PATHSEG_LINETO_ABS;
	                 case "l":
	                     return SVGPathSeg.PATHSEG_LINETO_REL;
	                 case "C":
	                     return SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
	                 case "c":
	                     return SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
	                 case "Q":
	                     return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
	                 case "q":
	                     return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
	                 case "A":
	                     return SVGPathSeg.PATHSEG_ARC_ABS;
	                 case "a":
	                     return SVGPathSeg.PATHSEG_ARC_REL;
	                 case "H":
	                     return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
	                 case "h":
	                     return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
	                 case "V":
	                     return SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
	                 case "v":
	                     return SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
	                 case "S":
	                     return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
	                 case "s":
	                     return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
	                 case "T":
	                     return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
	                 case "t":
	                     return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
	                 default:
	                     return SVGPathSeg.PATHSEG_UNKNOWN;
	                 }
	             }

	             Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
	                 // Check for remaining coordinates in the current command.
	                 if ((lookahead == "+" || lookahead == "-" || lookahead == "." || (lookahead >= "0" && lookahead <= "9")) && previousCommand != SVGPathSeg.PATHSEG_CLOSEPATH) {
	                     if (previousCommand == SVGPathSeg.PATHSEG_MOVETO_ABS)
	                         return SVGPathSeg.PATHSEG_LINETO_ABS;
	                     if (previousCommand == SVGPathSeg.PATHSEG_MOVETO_REL)
	                         return SVGPathSeg.PATHSEG_LINETO_REL;
	                     return previousCommand;
	                 }
	                 return SVGPathSeg.PATHSEG_UNKNOWN;
	             }

	             Source.prototype.initialCommandIsMoveTo = function() {
	                 // If the path is empty it is still valid, so return true.
	                 if (!this.hasMoreData())
	                     return true;
	                 var command = this.peekSegmentType();
	                 // Path must start with moveTo.
	                 return command == SVGPathSeg.PATHSEG_MOVETO_ABS || command == SVGPathSeg.PATHSEG_MOVETO_REL;
	             }

	             // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from Source/core/svg/SVGParserUtilities.cpp.
	             // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF
	             Source.prototype._parseNumber = function() {
	                 var exponent = 0;
	                 var integer = 0;
	                 var frac = 1;
	                 var decimal = 0;
	                 var sign = 1;
	                 var expsign = 1;

	                 var startIndex = this._currentIndex;

	                 this._skipOptionalSpaces();

	                 // Read the sign.
	                 if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "+")
	                     this._currentIndex++;
	                 else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "-") {
	                     this._currentIndex++;
	                     sign = -1;
	                 }

	                 if (this._currentIndex == this._endIndex || ((this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") && this._string.charAt(this._currentIndex) != "."))
	                     // The first character of a number must be one of [0-9+-.].
	                     return undefined;

	                 // Read the integer part, build right-to-left.
	                 var startIntPartIndex = this._currentIndex;
	                 while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9")
	                     this._currentIndex++; // Advance to first non-digit.

	                 if (this._currentIndex != startIntPartIndex) {
	                     var scanIntPartIndex = this._currentIndex - 1;
	                     var multiplier = 1;
	                     while (scanIntPartIndex >= startIntPartIndex) {
	                         integer += multiplier * (this._string.charAt(scanIntPartIndex--) - "0");
	                         multiplier *= 10;
	                     }
	                 }

	                 // Read the decimals.
	                 if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ".") {
	                     this._currentIndex++;

	                     // There must be a least one digit following the .
	                     if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9")
	                         return undefined;
	                     while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9")
	                         decimal += (this._string.charAt(this._currentIndex++) - "0") * (frac *= 0.1);
	                 }

	                 // Read the exponent part.
	                 if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == "e" || this._string.charAt(this._currentIndex) == "E") && (this._string.charAt(this._currentIndex + 1) != "x" && this._string.charAt(this._currentIndex + 1) != "m")) {
	                     this._currentIndex++;

	                     // Read the sign of the exponent.
	                     if (this._string.charAt(this._currentIndex) == "+") {
	                         this._currentIndex++;
	                     } else if (this._string.charAt(this._currentIndex) == "-") {
	                         this._currentIndex++;
	                         expsign = -1;
	                     }

	                     // There must be an exponent.
	                     if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9")
	                         return undefined;

	                     while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
	                         exponent *= 10;
	                         exponent += (this._string.charAt(this._currentIndex) - "0");
	                         this._currentIndex++;
	                     }
	                 }

	                 var number = integer + decimal;
	                 number *= sign;

	                 if (exponent)
	                     number *= Math.pow(10, expsign * exponent);

	                 if (startIndex == this._currentIndex)
	                     return undefined;

	                 this._skipOptionalSpacesOrDelimiter();

	                 return number;
	             }

	             Source.prototype._parseArcFlag = function() {
	                 if (this._currentIndex >= this._endIndex)
	                     return undefined;
	                 var flag = false;
	                 var flagChar = this._string.charAt(this._currentIndex++);
	                 if (flagChar == "0")
	                     flag = false;
	                 else if (flagChar == "1")
	                     flag = true;
	                 else
	                     return undefined;

	                 this._skipOptionalSpacesOrDelimiter();
	                 return flag;
	             }

	             Source.prototype.parseSegment = function() {
	                 var lookahead = this._string[this._currentIndex];
	                 var command = this._pathSegTypeFromChar(lookahead);
	                 if (command == SVGPathSeg.PATHSEG_UNKNOWN) {
	                     // Possibly an implicit command. Not allowed if this is the first command.
	                     if (this._previousCommand == SVGPathSeg.PATHSEG_UNKNOWN)
	                         return null;
	                     command = this._nextCommandHelper(lookahead, this._previousCommand);
	                     if (command == SVGPathSeg.PATHSEG_UNKNOWN)
	                         return null;
	                 } else {
	                     this._currentIndex++;
	                 }

	                 this._previousCommand = command;

	                 switch (command) {
	                 case SVGPathSeg.PATHSEG_MOVETO_REL:
	                     return new SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
	                 case SVGPathSeg.PATHSEG_MOVETO_ABS:
	                     return new SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
	                 case SVGPathSeg.PATHSEG_LINETO_REL:
	                     return new SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
	                 case SVGPathSeg.PATHSEG_LINETO_ABS:
	                     return new SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
	                 case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
	                     return new SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
	                 case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
	                     return new SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
	                 case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
	                     return new SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
	                 case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
	                     return new SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
	                 case SVGPathSeg.PATHSEG_CLOSEPATH:
	                     this._skipOptionalSpaces();
	                     return new SVGPathSegClosePath(owningPathSegList);
	                 case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
	                     var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
	                 case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
	                     var points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
	                 case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
	                     var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
	                 case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
	                     var points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
	                 case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
	                     var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
	                 case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
	                     var points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
	                 case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
	                     return new SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
	                 case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
	                     return new SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
	                 case SVGPathSeg.PATHSEG_ARC_REL:
	                     var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
	                 case SVGPathSeg.PATHSEG_ARC_ABS:
	                     var points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
	                     return new SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
	                 default:
	                     throw "Unknown path seg type."
	                 }
	             }

	             var builder = new Builder();
	             var source = new Source(string);

	             if (!source.initialCommandIsMoveTo())
	                 return [];
	             while (source.hasMoreData()) {
	                 var pathSeg = source.parseSegment();
	                 if (!pathSeg)
	                     return [];
	                 builder.appendSegment(pathSeg);
	             }

	             return builder.pathSegList;
	         }
	     }
	    }());

	    /* jshint ignore:end */

	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return c3; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {
	        module.exports = c3;
	    } else {
	        window.c3 = c3;
	    }

	})(window);


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.17"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.transpose = function(matrix) {
	    if (!(n = matrix.length)) return [];
	    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
	      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
	        row[j] = matrix[j][i];
	      }
	    }
	    return transpose;
	  };
	  function d3_transposeLength(d) {
	    return d.length;
	  }
	  d3.zip = function() {
	    return d3.transpose(arguments);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: d3_nsXhtml,
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (node = group[i]) {
	            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
	              exitNodes[i] = node;
	            } else {
	              nodeByKeyValue.set(keyValue, node);
	            }
	            keyValues[i] = keyValue;
	          }
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = d3_array(nodes);
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
	    if (d2 < ε2) {
	      S = Math.log(w1 / w0) / ρ;
	      i = function(t) {
	        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
	      };
	    } else {
	      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / ρ;
	      i = function(t) {
	        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      };
	    }
	    i.duration = S * 1e3;
	    return i;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: null
	      };
	      scaleTo(+_);
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function() {
	    d3_timer.apply(this, arguments);
	  };
	  function d3_timer(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	    return timer;
	  }
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now(), timer = d3_timer_queueHead;
	    while (timer) {
	      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
	      timer = timer.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.c) {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      } else {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value = +value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	        exponent = false;

	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
	          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;

	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;

	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;

	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransformPop(s) {
	    return s.length ? s.pop() + "," : "";
	  }
	  function d3_interpolateTranslate(ta, tb, s, q) {
	    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
	      var i = s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    }
	  }
	  function d3_interpolateRotate(ra, rb, s, q) {
	    if (ra !== rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
	    }
	  }
	  function d3_interpolateSkew(wa, wb, s, q) {
	    if (wa !== wb) {
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
	    }
	  }
	  function d3_interpolateScale(ka, kb, s, q) {
	    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
	      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] !== 1 || kb[1] !== 1) {
	      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
	    }
	  }
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [];
	    a = d3.transform(a), b = d3.transform(b);
	    d3_interpolateTranslate(a.translate, b.translate, s, q);
	    d3_interpolateRotate(a.rotate, b.rotate, s, q);
	    d3_interpolateSkew(a.skew, b.skew, s, q);
	    d3_interpolateScale(a.scale, b.scale, s, q);
	    a = b = null;
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: groupSums[di]
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        timer = null;
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) {
	          alpha = x;
	        } else {
	          timer.c = null, timer.t = NaN, timer = null;
	          event.end({
	            type: "end",
	            alpha: alpha = 0
	          });
	        }
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        timer = d3_timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = root.y = 0;
	      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    return domain;
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(1, base * n / scale.ticks().length);
	      return function(d) {
	        var i = d / pow(Math.round(log(d)));
	        if (i * base < base - .5) i *= base;
	        return i <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var rc1 = rc, rc0 = rc;
	        if (da < π) {
	          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	        if (x1 != null) {
	          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.length > 1 ? points.join("L") : points + "Z";
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return points.join("L") + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, activeId, active;
	      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        if (--lock.count) delete lock[activeId]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id], time, timer, duration, ease, tweens;
	    function schedule(elapsed) {
	      var delay = transition.delay;
	      timer.t = delay + time;
	      if (delay <= elapsed) return start(elapsed - delay);
	      timer.c = start;
	    }
	    function start(elapsed) {
	      var activeId = lock.active, active = lock[activeId];
	      if (active) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        --lock.count;
	        delete lock[activeId];
	        active.event && active.event.interrupt.call(node, node.__data__, active.index);
	      }
	      for (var cancelId in lock) {
	        if (+cancelId < id) {
	          var cancel = lock[cancelId];
	          cancel.timer.c = null;
	          cancel.timer.t = NaN;
	          --lock.count;
	          delete lock[cancelId];
	        }
	      }
	      timer.c = tick;
	      d3_timer(function() {
	        if (timer.c && tick(elapsed || 1)) {
	          timer.c = null;
	          timer.t = NaN;
	        }
	        return 1;
	      }, 0, time);
	      lock.active = id;
	      transition.event && transition.event.start.call(node, node.__data__, i);
	      tweens = [];
	      transition.tween.forEach(function(key, value) {
	        if (value = value.call(node, node.__data__, i)) {
	          tweens.push(value);
	        }
	      });
	      ease = transition.ease;
	      duration = transition.duration;
	    }
	    function tick(elapsed) {
	      var t = elapsed / duration, e = ease(t), n = tweens.length;
	      while (n > 0) {
	        tweens[--n].call(node, e);
	      }
	      if (t >= 1) {
	        transition.event && transition.event.end.call(node, node.__data__, i);
	        if (--lock.count) delete lock[id]; else delete node[ns];
	        return 1;
	      }
	    }
	    if (!transition) {
	      time = inherit.time;
	      timer = d3_timer(schedule, 0, time);
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        timer: timer,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = d3_array(arguments);
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
	}();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(24);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../css-loader/index.js!./c3.css", function() {
				var newContent = require("!!../css-loader/index.js!./c3.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "/*-- Chart --*/\n.c3 svg {\n  font: 10px sans-serif;\n  -webkit-tap-highlight-color: transparent; }\n\n.c3 path, .c3 line {\n  fill: none;\n  stroke: #000; }\n\n.c3 text {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none; }\n\n.c3-legend-item-tile,\n.c3-xgrid-focus,\n.c3-ygrid,\n.c3-event-rect,\n.c3-bars path {\n  shape-rendering: crispEdges; }\n\n.c3-chart-arc path {\n  stroke: #fff; }\n\n.c3-chart-arc text {\n  fill: #fff;\n  font-size: 13px; }\n\n/*-- Axis --*/\n/*-- Grid --*/\n.c3-grid line {\n  stroke: #aaa; }\n\n.c3-grid text {\n  fill: #aaa; }\n\n.c3-xgrid, .c3-ygrid {\n  stroke-dasharray: 3 3; }\n\n/*-- Text on Chart --*/\n.c3-text.c3-empty {\n  fill: #808080;\n  font-size: 2em; }\n\n/*-- Line --*/\n.c3-line {\n  stroke-width: 1px; }\n\n/*-- Point --*/\n.c3-circle._expanded_ {\n  stroke-width: 1px;\n  stroke: white; }\n\n.c3-selected-circle {\n  fill: white;\n  stroke-width: 2px; }\n\n/*-- Bar --*/\n.c3-bar {\n  stroke-width: 0; }\n\n.c3-bar._expanded_ {\n  fill-opacity: 0.75; }\n\n/*-- Focus --*/\n.c3-target.c3-focused {\n  opacity: 1; }\n\n.c3-target.c3-focused path.c3-line, .c3-target.c3-focused path.c3-step {\n  stroke-width: 2px; }\n\n.c3-target.c3-defocused {\n  opacity: 0.3 !important; }\n\n/*-- Region --*/\n.c3-region {\n  fill: steelblue;\n  fill-opacity: .1; }\n\n/*-- Brush --*/\n.c3-brush .extent {\n  fill-opacity: .1; }\n\n/*-- Select - Drag --*/\n/*-- Legend --*/\n.c3-legend-item {\n  font-size: 12px; }\n\n.c3-legend-item-hidden {\n  opacity: 0.15; }\n\n.c3-legend-background {\n  opacity: 0.75;\n  fill: white;\n  stroke: lightgray;\n  stroke-width: 1; }\n\n/*-- Title --*/\n.c3-title {\n  font: 14px sans-serif; }\n\n/*-- Tooltip --*/\n.c3-tooltip-container {\n  z-index: 10; }\n\n.c3-tooltip {\n  border-collapse: collapse;\n  border-spacing: 0;\n  background-color: #fff;\n  empty-cells: show;\n  -webkit-box-shadow: 7px 7px 12px -9px #777777;\n  -moz-box-shadow: 7px 7px 12px -9px #777777;\n  box-shadow: 7px 7px 12px -9px #777777;\n  opacity: 0.9; }\n\n.c3-tooltip tr {\n  border: 1px solid #CCC; }\n\n.c3-tooltip th {\n  background-color: #aaa;\n  font-size: 14px;\n  padding: 2px 5px;\n  text-align: left;\n  color: #FFF; }\n\n.c3-tooltip td {\n  font-size: 13px;\n  padding: 3px 6px;\n  background-color: #fff;\n  border-left: 1px dotted #999; }\n\n.c3-tooltip td > span {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin-right: 6px; }\n\n.c3-tooltip td.value {\n  text-align: right; }\n\n/*-- Area --*/\n.c3-area {\n  stroke-width: 0;\n  opacity: 0.2; }\n\n/*-- Arc --*/\n.c3-chart-arcs-title {\n  dominant-baseline: middle;\n  font-size: 1.3em; }\n\n.c3-chart-arcs .c3-chart-arcs-background {\n  fill: #e0e0e0;\n  stroke: none; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-unit {\n  fill: #000;\n  font-size: 16px; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-max {\n  fill: #777; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-min {\n  fill: #777; }\n\n.c3-chart-arc .c3-gauge-value {\n  fill: #000;\n  /*  font-size: 28px !important;*/ }\n", ""]);

	// exports


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(26);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-swim-chart-tooltip {\n  display: block;\n  background-color: #fff;\n  width: 250px;\n  padding: 5px;\n  box-shadow: 1px 1px 1px #888;\n}\nx-swim-chart-tooltip .chart {\n  position: relative;\n  width: 240px;\n  display: inline-block;\n}\nx-swim-chart-tooltip .location {\n  float: left;\n}\nx-swim-chart-tooltip .assets {\n  float: right;\n}\nx-swim-chart-tooltip .datetime {\n  float: left;\n}\n", ""]);

	// exports


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	module.exports = "<div class=location>LOC 098712</div> <div class=assets>(1234)</div> <div style=width:100%;clear:both></div> <div class=datetime>@ 6:00:00 PM</div> <div class=chart></div>";

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, Store, $) {__webpack_require__(29);
	var c3 = __webpack_require__(20);

	tag('x-swim-donut-chart', {
	    template: __webpack_require__(31),
	    draw: function () {
	        var lane = this.attributes['data-lane'].nodeValue;

	        // console.log('this.guid', this.guid);
	        // console.log('lane', lane);

	        var state = Store.get(this.guid);

	        if (state) {
	            if (state.week) {
	                this._chart.load({
	                    columns: [['Uptime', state.week], ['Downtime', (100 - state.week)]]
	                });
	            }
	        }
	    },
	    inserted: function () {

	        var _self = this;
	        _self.data = _self.getData();
	        var title = _self.data[0][1] + '%';

	        _self._chart = c3.generate({
	            bindto: $('.chart', _self)[0],
	            size: {
	                height: 240,
	                width: 240
	            },
	            data: {
	                columns: _self.data,
	                type: 'donut',
	                colors: {
	                    Uptime: '#709ed4',
	                    Downtime: '#bbbbbb'
	                },
	                onclick: function (d, i) {

	                },
	                onmouseover: function (d, i) {

	                },
	                onmouseout: function (d, i) {

	                }
	            },
	            donut: {
	                title: title
	            },
	            legend: {
	                show: true
	            }
	        });
	    },
	    methods: {
	        getData: function () {
	            return [['Uptime', 0], ['Downtime', 100]]
	        }
	    }

	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(8), __webpack_require__(7)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(30);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-swim-donut-chart {\n  height: 300px;\n}\nx-swim-donut-chart .donut-chart {\n  width: 100%;\n  height: 300px;\n  float: left;\n}\nx-swim-donut-chart .chart {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 240px;\n  width: 240px;\n  padding: 30px;\n}\nx-swim-donut-chart .info {\n  position: absolute;\n  top: 0;\n  left: 300px;\n  width: calc((100% - 300px));\n  height: 300px;\n}\nx-swim-donut-chart .info-wrapper {\n  padding-top: 62px;\n  padding-right: 42px;\n}\nx-swim-donut-chart .title,\nx-swim-donut-chart .divider {\n  float: left;\n  clear: both;\n  padding: 2px;\n}\nx-swim-donut-chart .value {\n  float: right;\n  padding: 2px;\n}\nx-swim-donut-chart .divider {\n  width: 100%;\n  height: 2px;\n  padding-top: 12px;\n  margin-bottom: 12px;\n  border-bottom: 1px solid grey;\n}\nx-swim-donut-chart text.c3-chart-arcs-title {\n  font-size: 2.5em;\n  fill: #709ed4;\n}\n", ""]);

	// exports


/***/ }),
/* 31 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"donut-chart mdl-card mdl-shadow--2dp\"> <div class=\"chart pos-abs l0 t0\"> </div> <div class=info> <div class=info-wrapper> <div class=title>Name:</div> <div class=\"value pr24\">Orbcomm</div> <div class=title>Primary:</div> <div class=\"value pr24\">4</div> <div class=title>Backup:</div> <div class=\"value pr24\">0</div> <div class=divider></div> <div class=title>Online:</div> <div class=\"value pr24\">4</div> <div class=title>Offline:</div> <div class=\"value pr24\">0</div> </div> </div> </div>";

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, Swim, _, $) {__webpack_require__(42);

	tag('x-swim-left-nav', {
	    template: __webpack_require__(44),
	    inserted: function () {

	        var _self = this;
	        _self.items = [];

	        Swim.downlink()
	            .host('ws://sensornet.swim.services:80/?token=abcd')
	            .node('org/NewOrg')
	            .lane('pzs')
	            .onEvent(function (message) {

	                _self.items.push({
	                    location: message.body[0]['@update'].key,
	                    url: message.body[1]
	                });

	            })
	            .sync();

	        setTimeout(function () {
	            var sorted = _.sortBy(_self.items, function (obj) {
	                return obj.location;
	            });
	            _self.generateList(sorted);
	        }, 2000);

	        $('.keyboard-backspace', _self).on('click', function (e) {
	            $('.keyboard-backspace', _self).addClass('hidden');
	            $('.dashboard', _self).removeClass('hidden');
	            _self.generateList(_self.items);
	        });

	        //TODO: TEMP WORK AROUND: Replace with jquery selector pattern pattern
	        $(_self).on('click', function (e) {

	            if (e.target.attributes['url']) {

	                $('.dashboard', _self).addClass('hidden');
	                $('.keyboard-backspace', _self).removeClass('hidden');

	                this.generateList(_self.items);

	                var url = e.target.attributes['url'].value;
	                var location = e.target.attributes['location'].value;

	                var items = [{
	                    location: location,
	                    url: url
	                }];
	                _self.generateList(items);

	                // TODO: Flavio - Ask Derek how he wants this done.
	                // Dispatcher.dispatch(actions.SET_IT_DATA, url);

	            }

	        });

	    },
	    methods: {
	        generateList: function (items) {

	            $('.location-list', this).html('');

	            for (var i = 0; i < items.length; i++) {

	                $('.location-list', this).append('       ' +
	                    '       <div class="location pointer location-btn" location="' + items[i].location + '" url="' + items[i].url + '">  ' +
	                    '         <div class="location-wrapper no-pointer">  ' +
	                    '           <button class="no-pointer list-btn mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored fl">  ' +
	                    '             <i class="material-icons no-pointer">dns</i>  ' +
	                    '           </button>  ' +
	                    '           <div class="title fl pl12 black no-pointer">' + items[i].location + '</div>  ' +
	                    '           <i class="material-icons black fr mt12 no-pointer">keyboard_arrow_right</i>  ' +
	                    '         </div>  ' +
	                    '      </div>  ')

	            }

	        }
	    }

	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(33), __webpack_require__(2), __webpack_require__(7)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var config = __webpack_require__(34);
	var recon = global.recon || __webpack_require__(35);
	var proto = __webpack_require__(37);
	var WebSocket = global.WebSocket || __webpack_require__(39).w3cwebsocket;


	function Client(options) {
	  options = options || {};
	  Object.defineProperty(this, 'options', {value: options, enumerable: true});
	  Object.defineProperty(this, 'channels', {value: {}, configurable: true});
	  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});
	}
	Object.defineProperty(Client.prototype, 'onChannelConnect', {
	  value: function (info) {
	    if (typeof this.delegate.onConnect === 'function') {
	      this.onConnect(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Client.prototype, 'onChannelDisconnect', {
	  value: function (info) {
	    if (typeof this.delegate.onDisconnect === 'function') {
	      this.onDisconnect(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Client.prototype, 'onChannelError', {
	  value: function (info) {
	    if (typeof this.delegate.onError === 'function') {
	      this.onError(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Client.prototype, 'onChannelAuthorize', {
	  value: function (info) {
	    if (typeof this.delegate.onAuthorize === 'function') {
	      this.onAuthorize(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Client.prototype, 'onChannelDeauthorize', {
	  value: function (info) {
	    if (typeof this.delegate.onDeauthorize === 'function') {
	      this.onDeauthorize(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Client.prototype, 'callChannelWithLinkArgs', {
	  value: function (name, args) {
	    var hostUri, nodeUri, laneUri, options;
	    if (args.length === 2) {
	      options = {};
	      laneUri = args[1];
	      nodeUri = args[0];
	      hostUri = Client.extractHostUri(nodeUri);
	    } else if (args.length === 3) {
	      if (typeof args[2] === 'object') {
	        options = args[2];
	        laneUri = args[1];
	        nodeUri = args[0];
	        hostUri = Client.extractHostUri(nodeUri);
	      } else {
	        hostUri = args[0];
	        nodeUri = Client.resolveNodeUri(hostUri, args[1]);
	        laneUri = args[2];
	        options = {};
	      }
	    } else {
	      hostUri = args[0];
	      nodeUri = Client.resolveNodeUri(hostUri, args[1]);
	      laneUri = args[2];
	      options = args[3];
	    }
	    var channel = this.getOrCreateChannel(hostUri);
	    return channel[name](nodeUri, laneUri, options);
	  },
	  configurable: true
	});
	Client.prototype.getOrCreateChannel = function (hostUri) {
	  var channel = this.channels[hostUri];
	  if (channel === undefined) {
	    if (this.options.noWebSocket || /^http/.test(hostUri)) {
	      channel = new HttpSocketChannel(this, hostUri, this.options);
	    } else {
	      channel = new WebSocketChannel(this, hostUri, this.options);
	    }
	    this.channels[hostUri] = channel;
	  }
	  return channel;
	};
	Client.prototype.authorize = function (hostUri, credentials) {
	  var channel = this.getOrCreateChannel(hostUri);
	  channel.authorize(credentials);
	};
	Client.prototype.downlink = function () {
	  return new DownlinkBuilder(null, this);
	};
	Client.prototype.link = function () {
	  return this.callChannelWithLinkArgs('link', arguments);
	};
	Client.prototype.sync = function () {
	  return this.callChannelWithLinkArgs('sync', arguments);
	};
	Client.prototype.syncList = function () {
	  return this.callChannelWithLinkArgs('syncList', arguments);
	};
	Client.prototype.syncMap = function () {
	  return this.callChannelWithLinkArgs('syncMap', arguments);
	};
	Client.prototype.command = function () {
	  var hostUri, nodeUri, laneUri, body;
	  if (arguments.length === 3) {
	    body = arguments[2];
	    laneUri = arguments[1];
	    nodeUri = arguments[0];
	    hostUri = Client.extractHostUri(nodeUri);
	  } else {
	    hostUri = arguments[0];
	    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);
	    laneUri = arguments[2];
	    body = arguments[3];
	  }
	  var channel = this.getOrCreateChannel(hostUri);
	  channel.command(nodeUri, laneUri, body);
	};
	Client.prototype.host = function (hostUri) {
	  var channel = this.getOrCreateChannel(hostUri);
	  return new HostScope(channel, hostUri);
	};
	Client.prototype.node = function () {
	  var hostUri, nodeUri;
	  if (arguments.length === 1) {
	    nodeUri = arguments[0];
	    hostUri = Client.extractHostUri(nodeUri);
	  } else {
	    hostUri = arguments[0];
	    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);
	  }
	  var channel = this.getOrCreateChannel(hostUri);
	  return new NodeScope(channel, hostUri, nodeUri);
	};
	Client.prototype.lane = function () {
	  var hostUri, nodeUri, laneUri;
	  if (arguments.length === 2) {
	    laneUri = arguments[1];
	    nodeUri = arguments[0];
	    hostUri = Client.extractHostUri(nodeUri);
	  } else {
	    hostUri = arguments[0];
	    nodeUri = Client.resolveNodeUri(hostUri, arguments[1]);
	    laneUri = arguments[2];
	  }
	  var channel = this.getOrCreateChannel(hostUri);
	  return new LaneScope(channel, hostUri, nodeUri, laneUri);
	};
	Client.prototype.close = function () {
	  var channels = this.channels;
	  Object.defineProperty(this, 'channels', {value: {}, configurable: true});
	  for (var hostUri in channels) {
	    var channel = channels[hostUri];
	    channel.close();
	  }
	};
	Client.extractHostUri = function (nodeUri) {
	  var uri = recon.uri.parse(nodeUri);
	  var scheme = uri.scheme;
	  if (scheme === 'swim') scheme = 'ws';
	  else if (scheme === 'swims') scheme = 'wss';
	  return recon.uri.stringify({
	    scheme: scheme,
	    authority: uri.authority
	  });
	};
	Client.resolveNodeUri = function (hostUri, nodeUri) {
	  return recon.uri.stringify(recon.uri.resolve(hostUri, nodeUri));
	};


	function Scope(channel) {
	  Object.defineProperty(this, 'channel', {value: channel});
	  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});
	  Object.defineProperty(this, 'delegate', {value: this, enumerable: true, writable: true});
	  channel.registerDelegate(this);
	}
	Object.defineProperty(Scope.prototype, 'isConnected', {
	  get: function () {
	    return this.channel.isConnected;
	  },
	  enumerable: true
	});
	Object.defineProperty(Scope.prototype, 'isAuthorized', {
	  get: function () {
	    return this.channel.isAuthorized;
	  },
	  enumerable: true
	});
	Object.defineProperty(Scope.prototype, 'session', {
	  get: function () {
	    return this.channel.session;
	  },
	  enumerable: true
	});
	Object.defineProperty(Scope.prototype, 'onChannelConnect', {
	  value: function (info) {
	    if (typeof this.delegate.onConnect === 'function') {
	      this.onConnect(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Scope.prototype, 'onChannelDisconnect', {
	  value: function (info) {
	    if (typeof this.delegate.onDisconnect === 'function') {
	      this.onDisconnect(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Scope.prototype, 'onChannelError', {
	  value: function (info) {
	    if (typeof this.delegate.onError === 'function') {
	      this.onError(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Scope.prototype, 'onChannelAuthorize', {
	  value: function (info) {
	    if (typeof this.delegate.onAuthorize === 'function') {
	      this.onAuthorize(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Scope.prototype, 'onChannelDeauthorize', {
	  value: function (info) {
	    if (typeof this.delegate.onDeauthorize === 'function') {
	      this.onDeauthorize(info);
	    }
	  },
	  configurable: true
	});
	Scope.prototype.registerDownlink = function (downlink) {
	  var scope = this;
	  Object.defineProperty(downlink, 'onChannelClose', {
	    value: function () {
	      scope.unregisterDownlink(downlink);
	      downlink.__proto__.onChannelClose.call(downlink);
	    },
	    configurable: true
	  });
	  this.downlinks.push(downlink);
	};
	Scope.prototype.unregisterDownlink = function (downlink) {
	  for (var i = 0, n = this.downlinks.length; i < n; i += 1) {
	    if (downlink === this.downlinks[i]) {
	      this.downlinks.splice(i, 1);
	      return;
	    }
	  }
	};
	Scope.prototype.close = function () {
	  this.channel.unregisterDelegate(this);
	  var downlinks = this.downlinks;
	  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});
	  for (var i = 0, n = downlinks.length; i < n; i += 1) {
	    var downlink = downlinks[i];
	    downlink.close();
	  }
	};


	function HostScope(channel, hostUri) {
	  Scope.call(this, channel);
	  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});
	  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});
	}
	HostScope.prototype = Object.create(Scope.prototype);
	HostScope.prototype.constructor = HostScope;
	HostScope.prototype.authorize = function (credentials) {
	  this.channel.authorize(credentials);
	};
	HostScope.prototype.downlink = function () {
	  return new DownlinkBuilder(this.channel, this).host(this.hostUri);
	};
	HostScope.prototype.link = function (nodeUri, laneUri, options) {
	  var downlink = this.channel.link(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	HostScope.prototype.sync = function (nodeUri, laneUri, options) {
	  var downlink = this.channel.sync(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	HostScope.prototype.syncList = function (nodeUri, laneUri, options) {
	  var downlink = this.channel.syncList(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	HostScope.prototype.syncMap = function (nodeUri, laneUri, options) {
	  var downlink = this.channel.syncMap(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	HostScope.prototype.command = function (nodeUri, laneUri, body) {
	  this.channel.command(Client.resolveNodeUri(this.hostUri, nodeUri), laneUri, body);
	};
	HostScope.prototype.node = function (nodeUri) {
	  return new NodeScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri));
	};
	HostScope.prototype.lane = function (nodeUri, laneUri) {
	  return new LaneScope(this.channel, this.hostUri, Client.resolveNodeUri(this.hostUri, nodeUri), laneUri);
	};


	function NodeScope(channel, hostUri, nodeUri) {
	  Scope.call(this, channel);
	  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});
	  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});
	  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});
	}
	NodeScope.prototype = Object.create(Scope.prototype);
	NodeScope.prototype.constructor = NodeScope;
	NodeScope.prototype.downlink = function () {
	  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri);
	};
	NodeScope.prototype.link = function (laneUri, options) {
	  var downlink = this.channel.link(this.nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	NodeScope.prototype.sync = function (laneUri, options) {
	  var downlink = this.channel.sync(this.nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	NodeScope.prototype.syncList = function (laneUri, options) {
	  var downlink = this.channel.syncList(this.nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	NodeScope.prototype.syncMap = function (laneUri, options) {
	  var downlink = this.channel.syncMap(this.nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	NodeScope.prototype.command = function (laneUri, body) {
	  this.channel.command(this.nodeUri, laneUri, body);
	};
	NodeScope.prototype.lane = function (laneUri) {
	  return new LaneScope(this.channel, this.hostUri, this.nodeUri, laneUri);
	};


	function LaneScope(channel, hostUri, nodeUri, laneUri) {
	  Scope.call(this, channel);
	  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});
	  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});
	  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});
	  Object.defineProperty(this, 'downlinks', {value: [], configurable: true});
	}
	LaneScope.prototype = Object.create(Scope.prototype);
	LaneScope.prototype.constructor = LaneScope;
	LaneScope.prototype.downlink = function () {
	  return new DownlinkBuilder(this.channel, this).host(this.hostUri).node(this.nodeUri).lane(this.laneUri);
	};
	LaneScope.prototype.link = function (options) {
	  var downlink = this.channel.link(this.nodeUri, this.laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	LaneScope.prototype.sync = function (options) {
	  var downlink = this.channel.sync(this.nodeUri, this.laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	LaneScope.prototype.syncList = function (options) {
	  var downlink = this.channel.syncList(this.nodeUri, this.laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	LaneScope.prototype.syncMap = function (options) {
	  var downlink = this.channel.syncMap(this.nodeUri, this.laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	LaneScope.prototype.command = function (body) {
	  this.channel.command(this.nodeUri, this.laneUri, body);
	};


	function Channel(client, hostUri, options) {
	  options = options || {};
	  Object.defineProperty(this, 'client', {value: client, configurable: true});
	  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});
	  Object.defineProperty(this, 'options', {value: options, enumerable: true});
	  Object.defineProperty(this, 'credentials', {value: options.credentials, writable: true});
	  Object.defineProperty(this, 'isAuthorized', {value: false, enumerable: true, writable: true});
	  Object.defineProperty(this, 'session', {value: null, enumerable: true, writable: true});
	  Object.defineProperty(this, 'uriCache', {value: new UriCache(hostUri), configurable: true});
	  Object.defineProperty(this, 'delegates', {value: [], configurable: true});
	  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});
	  Object.defineProperty(this, 'sendBuffer', {value: [], configurable: true});
	  Object.defineProperty(this, 'reconnectTimer', {value: null, writable: true});
	  Object.defineProperty(this, 'reconnectTimeout', {value: 0, writable: true});
	  Object.defineProperty(this, 'idleTimer', {value: null, writable: true});
	  Object.defineProperty(this, 'socket', {value: null, writable: true});
	}
	Object.defineProperty(Channel.prototype, 'protocols', {
	  get: function () {
	    return this.options.protocols;
	  }
	});
	Object.defineProperty(Channel.prototype, 'maxReconnectTimeout', {
	  get: function () {
	    return this.options.maxReconnectTimeout || 30000;
	  }
	});
	Object.defineProperty(Channel.prototype, 'idleTimeout', {
	  get: function () {
	    return this.options.idleTimeout || 1000;
	  }
	});
	Object.defineProperty(Channel.prototype, 'sendBufferSize', {
	  get: function () {
	    return this.options.sendBufferSize || 1024;
	  }
	});
	Channel.prototype.resolve = function (unresolvedUri) {
	  return this.uriCache.resolve(unresolvedUri);
	};
	Channel.prototype.unresolve = function (resolvedUri) {
	  return this.uriCache.unresolve(resolvedUri);
	};
	Channel.prototype.authorize = function (credentials) {
	  if (recon.equal(credentials, this.credentials)) return;
	  this.credentials = credentials;
	  if (this.isConnected) {
	    var request = new proto.AuthRequest(credentials);
	    this.push(request);
	  } else {
	    this.open();
	  }
	};
	Channel.prototype.link = function (nodeUri, laneUri, options) {
	  var downlink = new LinkedDownlink(this, this.hostUri, nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	Channel.prototype.sync = function (nodeUri, laneUri, options) {
	  var downlink = new SyncedDownlink(this, this.hostUri, nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	Channel.prototype.syncList = function (nodeUri, laneUri, options) {
	  var downlink = new ListDownlink(this, this.hostUri, nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	Channel.prototype.syncMap = function (nodeUri, laneUri, options) {
	  var downlink = new MapDownlink(this, this.hostUri, nodeUri, laneUri, options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	Channel.prototype.command = function (nodeUri, laneUri, body) {
	  var message = new proto.CommandMessage(this.unresolve(nodeUri), laneUri, body);
	  this.push(message);
	};
	Channel.prototype.registerDelegate = function (delegate) {
	  this.delegates.push(delegate);
	};
	Channel.prototype.unregisterDelegate = function (delegate) {
	  for (var i = 0, n = this.delegates.length; i < n; i += 1) {
	    if (this.delegates[i] === delegate) {
	      this.delegates.splice(i, 1);
	    }
	  }
	};
	Channel.prototype.registerDownlink = function (downlink) {
	  this.clearIdle();
	  var nodeUri = downlink.nodeUri;
	  var laneUri = downlink.laneUri;
	  var nodeDownlinks = this.downlinks[nodeUri] || {};
	  var laneDownlinks = nodeDownlinks[laneUri] || [];
	  laneDownlinks.push(downlink);
	  nodeDownlinks[laneUri] = laneDownlinks;
	  this.downlinks[nodeUri] = nodeDownlinks;
	  if (this.isConnected) {
	    downlink.onChannelConnect({hostUri: this.hostUri});
	  } else {
	    this.open();
	  }
	};
	Channel.prototype.unregisterDownlink = function (downlink) {
	  var nodeUri = downlink.nodeUri;
	  var laneUri = downlink.laneUri;
	  var nodeDownlinks = this.downlinks[nodeUri];
	  if (nodeDownlinks) {
	    var laneDownlinks = nodeDownlinks[laneUri];
	    if (laneDownlinks) {
	      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        if (laneDownlinks[i] === downlink) {
	          laneDownlinks.splice(i, 1);
	          if (laneDownlinks.length === 0) {
	            delete nodeDownlinks[laneUri];
	            if (Object.keys(nodeDownlinks).length === 0) {
	              delete this.downlinks[nodeUri];
	              this.watchIdle();
	            }
	            if (this.isConnected) {
	              var request = new proto.UnlinkRequest(this.unresolve(nodeUri), laneUri);
	              downlink.onUnlinkRequest(request);
	              this.push(request);
	            }
	          }
	          downlink.onChannelClose();
	        }
	      }
	    }
	  }
	};
	Channel.prototype.onEnvelope = function (envelope) {
	  if (envelope.isEventMessage) {
	    this.onEventMessage(envelope);
	  } else if (envelope.isCommandMessage) {
	    this.onCommandMessage(envelope);
	  } else if (envelope.isLinkRequest) {
	    this.onLinkRequest(envelope);
	  } else if (envelope.isLinkedResponse) {
	    this.onLinkedResponse(envelope);
	  } else if (envelope.isSyncRequest) {
	    this.onSyncRequest(envelope);
	  } else if (envelope.isSyncedResponse) {
	    this.onSyncedResponse(envelope);
	  } else if (envelope.isUnlinkRequest) {
	    this.onUnlinkRequest(envelope);
	  } else if (envelope.isUnlinkedResponse) {
	    this.onUnlinkedResponse(envelope);
	  } else if (envelope.isAuthRequest) {
	    this.onAuthRequest(envelope);
	  } else if (envelope.isAuthedResponse) {
	    this.onAuthedResponse(envelope);
	  } else if (envelope.isDeauthRequest) {
	    this.onDeauthRequest(envelope);
	  } else if (envelope.isDeauthedResponse) {
	    this.onDeauthedResponse(envelope);
	  }
	};
	Channel.prototype.onEventMessage = function (message) {
	  var nodeUri = this.resolve(message.node);
	  var laneUri = message.lane;
	  var nodeDownlinks = this.downlinks[nodeUri];
	  if (nodeDownlinks) {
	    var laneDownlinks = nodeDownlinks[laneUri];
	    if (laneDownlinks) {
	      var resolvedMessage = message.withAddress(nodeUri);
	      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onEventMessage(resolvedMessage);
	      }
	    }
	  }
	};
	Channel.prototype.onCommandMessage = function (message) {
	  // TODO: Support client services.
	};
	Channel.prototype.onLinkRequest = function (request) {
	  // TODO: Support client services.
	};
	Channel.prototype.onLinkedResponse = function (response) {
	  var nodeUri = this.resolve(response.node);
	  var laneUri = response.lane;
	  var nodeDownlinks = this.downlinks[nodeUri];
	  if (nodeDownlinks) {
	    var laneDownlinks = nodeDownlinks[laneUri];
	    if (laneDownlinks) {
	      var resolvedResponse = response.withAddress(nodeUri);
	      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onLinkedResponse(resolvedResponse);
	      }
	    }
	  }
	};
	Channel.prototype.onSyncRequest = function (request) {
	  // TODO: Support client services.
	};
	Channel.prototype.onSyncedResponse = function (response) {
	  var nodeUri = this.resolve(response.node);
	  var laneUri = response.lane;
	  var nodeDownlinks = this.downlinks[nodeUri];
	  if (nodeDownlinks) {
	    var laneDownlinks = nodeDownlinks[laneUri];
	    if (laneDownlinks) {
	      var resolvedResponse = response.withAddress(nodeUri);
	      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onSyncedResponse(resolvedResponse);
	      }
	    }
	  }
	};
	Channel.prototype.onUnlinkRequest = function (request) {
	  // TODO: Support client services.
	};
	Channel.prototype.onUnlinkedResponse = function (response) {
	  var nodeUri = this.resolve(response.node);
	  var laneUri = response.lane;
	  var nodeDownlinks = this.downlinks[nodeUri];
	  if (nodeDownlinks) {
	    var laneDownlinks = nodeDownlinks[laneUri];
	    if (laneDownlinks) {
	      delete nodeDownlinks[laneUri];
	      if (Object.keys(nodeDownlinks).length === 0) {
	        delete this.downlinks[nodeUri];
	      }
	      var resolvedResponse = response.withAddress(nodeUri);
	      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onUnlinkedResponse(resolvedResponse);
	        downlink.onChannelClose();
	      }
	    }
	  }
	};
	Channel.prototype.onAuthRequest = function (request) {
	  // TODO: Support client services.
	};
	Channel.prototype.onAuthedResponse = function (response) {
	  this.isAuthorized = true;
	  this.session = response.body;
	  var info = {hostUri: this.hostUri, session: this.session};
	  this.client.onChannelAuthorize(info);
	  for (var i = 0, n = this.delegates.length; i < n; i += 1) {
	    var delegate = this.delegates[i];
	    delegate.onChannelAuthorize(info);
	  }
	};
	Channel.prototype.onDeauthRequest = function (request) {
	  // TODO: Support client services.
	};
	Channel.prototype.onDeauthedResponse = function (response) {
	  this.isAuthorized = false;
	  this.session = null;
	  var info = {hostUri: this.hostUri, session: response.body};
	  this.client.onChannelDeauthorize(info);
	  for (var i = 0, n = this.delegates.length; i < n; i += 1) {
	    var delegate = this.delegates[i];
	    delegate.onChannelDeauthorize(info);
	  }
	};
	Channel.prototype.onConnect = function () {
	  var info = {hostUri: this.hostUri};
	  this.client.onChannelConnect(info);
	  for (var i = 0, n = this.delegates.length; i < n; i += 1) {
	    var delegate = this.delegates[i];
	    delegate.onChannelConnect(info);
	  }
	  for (var nodeUri in this.downlinks) {
	    var nodeDownlinks = this.downlinks[nodeUri];
	    for (var laneUri in nodeDownlinks) {
	      var laneDownlinks = nodeDownlinks[laneUri];
	      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onChannelConnect(info);
	      }
	    }
	  }
	};
	Channel.prototype.onDisconnect = function () {
	  var info = {hostUri: this.hostUri};
	  this.client.onChannelDisconnect(info);
	  for (var i = 0, n = this.delegates.length; i < n; i += 1) {
	    var delegate = this.delegates[i];
	    delegate.onChannelDisconnect(info);
	  }
	  for (var nodeUri in this.downlinks) {
	    var nodeDownlinks = this.downlinks[nodeUri];
	    for (var laneUri in nodeDownlinks) {
	      var laneDownlinks = nodeDownlinks[laneUri].slice();
	      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onChannelDisconnect(info);
	      }
	    }
	  }
	};
	Channel.prototype.onError = function () {
	  var info = {hostUri: this.hostUri};
	  this.client.onChannelError(info);
	  for (var i = 0, n = this.delegates.length; i < n; i += 1) {
	    var delegate = this.delegates[i];
	    delegate.onChannelError(info);
	  }
	  for (var nodeUri in this.downlinks) {
	    var nodeDownlinks = this.downlinks[nodeUri];
	    for (var laneUri in nodeDownlinks) {
	      var laneDownlinks = nodeDownlinks[laneUri];
	      for (i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onChannelError(info);
	      }
	    }
	  }
	};
	Channel.prototype.reconnect = function () {
	  if (this.reconnectTimer) return;
	  if (!this.reconnectTimeout) {
	    var jitter = 1000 * Math.random();
	    this.reconnectTimeout = 500 + jitter;
	  } else {
	    var maxReconnectTimeout = this.maxReconnectTimeout || 30000;
	    this.reconnectTimeout = Math.min(1.8 * this.reconnectTimeout, maxReconnectTimeout);
	  }
	  this.reconnectTimer = setTimeout(this.open.bind(this), this.reconnectTimeout);
	};
	Channel.prototype.clearReconnect = function () {
	  if (this.reconnectTimer) {
	    clearTimeout(this.reconnectTimer);
	    this.reconnectTimer = null;
	    this.reconnectTimeout = 0;
	  }
	};
	Channel.prototype.clearIdle = function () {
	  if (this.idleTimer) {
	    clearTimeout(this.idleTimer);
	    this.idleTimer = null;
	  }
	};
	Channel.prototype.watchIdle = function () {
	  if (this.isConnected && this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {
	    this.idleTimer = setTimeout(this.checkIdle.bind(this), this.idleTimeout);
	  }
	};
	Channel.prototype.checkIdle = function () {
	  if (this.sendBuffer.length === 0 && Object.keys(this.downlinks).length === 0) {
	    this.close();
	  }
	};
	Channel.prototype.close = function () {
	  var downlinks = this.downlinks;
	  Object.defineProperty(this, 'downlinks', {value: {}, configurable: true});
	  for (var nodeUri in downlinks) {
	    var nodeDownlinks = downlinks[nodeUri];
	    for (var laneUri in nodeDownlinks) {
	      var laneDownlinks = nodeDownlinks[laneUri];
	      for (var i = 0, n = laneDownlinks.length; i < n; i += 1) {
	        var downlink = laneDownlinks[i];
	        downlink.onChannelClose();
	      }
	    }
	  }
	};


	function WebSocketChannel(client, hostUri, options) {
	  Channel.call(this, client, hostUri, options);
	}
	WebSocketChannel.prototype = Object.create(Channel.prototype);
	WebSocketChannel.prototype.constructor = WebSocketChannel;
	Object.defineProperty(WebSocketChannel.prototype, 'isConnected', {
	  get: function () {
	    return this.socket && this.socket.readyState === this.socket.OPEN;
	  },
	  enumerable: true
	});
	WebSocketChannel.prototype.open = function () {
	  this.clearReconnect();
	  if (!this.socket) {
	    this.socket = this.protocols ?
	      new WebSocket(this.hostUri, this.protocols) :
	      new WebSocket(this.hostUri);
	    this.socket.onopen = this.onWebSocketOpen.bind(this);
	    this.socket.onmessage = this.onWebSocketMessage.bind(this);
	    this.socket.onerror = this.onWebSocketError.bind(this);
	    this.socket.onclose = this.onWebSocketClose.bind(this);
	  }
	};
	WebSocketChannel.prototype.close = function () {
	  this.clearReconnect();
	  this.clearIdle();
	  if (this.socket) {
	    this.socket.close();
	    this.socket = null;
	  }
	  Channel.prototype.close.call(this);
	};
	WebSocketChannel.prototype.push = function (envelope) {
	  if (this.isConnected) {
	    this.clearIdle();
	    var text = proto.stringify(envelope);
	    this.socket.send(text);
	    this.watchIdle();
	  } else if (envelope.isCommandMessage) {
	    if (this.sendBuffer.length < this.sendBufferSize) {
	      this.sendBuffer.push(envelope);
	    } else {
	      // TODO
	    }
	    this.open();
	  }
	};
	WebSocketChannel.prototype.onWebSocketOpen = function () {
	  if (this.credentials) {
	    var request = new proto.AuthRequest(this.credentials);
	    this.push(request);
	  }
	  this.onConnect();
	  var envelope;
	  while ((envelope = this.sendBuffer.shift())) {
	    this.push(envelope);
	  }
	  this.watchIdle();
	};
	WebSocketChannel.prototype.onWebSocketMessage = function (message) {
	  var data = message.data;
	  if (typeof data === 'string') {
	    var envelope = proto.parse(data);
	    if (envelope) {
	      this.onEnvelope(envelope);
	    }
	  }
	};
	WebSocketChannel.prototype.onWebSocketError = function () {
	  this.onError();
	  this.clearIdle();
	  if (this.socket) {
	    this.socket.onopen = null;
	    this.socket.onmessage = null;
	    this.socket.onerror = null;
	    this.socket.onclose = null;
	    this.socket.close();
	    this.socket = null;
	  }
	};
	WebSocketChannel.prototype.onWebSocketClose = function () {
	  this.isAuthorized = false;
	  this.session = null;
	  this.socket = null;
	  this.onDisconnect();
	  this.clearIdle();
	  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {
	    this.reconnect();
	  }
	};


	function HttpSocketChannel(client, hostUri, options) {
	  Channel.call(this, client, hostUri, options);
	  Object.defineProperty(this, 'channelId', {value: null, writable: true});
	  Object.defineProperty(this, 'parser', {value: null, writable: true});
	  Object.defineProperty(this, 'offset', {value: 0, writable: true});
	  Object.defineProperty(this, 'sendTimer', {value: null, writable: true});
	}
	HttpSocketChannel.prototype = Object.create(Channel.prototype);
	HttpSocketChannel.prototype.constructor = HttpSocketChannel;
	Object.defineProperty(HttpSocketChannel.prototype, 'sendDelay', {
	  get: function () {
	    return this.options.sendDelay || 100;
	  }
	});
	Object.defineProperty(HttpSocketChannel.prototype, 'isConnected', {
	  get: function () {
	    return this.socket && this.socket.readyState >= 1;
	  },
	  enumerable: true
	});
	HttpSocketChannel.prototype.throttleSend = function () {
	  if (!this.sendTimer) {
	    this.sendTimer = setTimeout(this.send.bind(this), this.sendDelay);
	  }
	};
	HttpSocketChannel.prototype.clearSend = function () {
	  if (this.sendTimer) {
	    clearTimeout(this.sendTimer);
	    this.sendTimer = null;
	  }
	};
	HttpSocketChannel.prototype.open = function () {
	  this.clearReconnect();
	  if (!this.socket) {
	    this.socket = new XMLHttpRequest();
	    this.socket.open('POST', this.hostUri);
	    this.socket.onreadystatechange = this.onHttpSocketChange.bind(this);
	    this.socket.onloadstart = this.onHttpSocketOpen.bind(this);
	    this.socket.onprogress = this.onHttpSocketData.bind(this);
	    this.socket.onload = this.onHttpSocketData.bind(this);
	    this.socket.onerror = this.onHttpSocketError.bind(this);
	    this.socket.onloadend = this.onHttpSocketClose.bind(this);
	    this.socket.setRequestHeader('X-Swim-Connection', 'Upgrade');
	    this.socket.send();
	  }
	};
	HttpSocketChannel.prototype.close = function () {
	  this.clearReconnect();
	  this.clearIdle();
	  this.clearSend();
	  if (this.socket) {
	    this.socket.abort();
	    this.socket = null;
	  }
	  Channel.prototype.close.call(this);
	};
	HttpSocketChannel.prototype.send = function () {
	  this.clearSend();
	  if (!this.channelId) {
	    this.throttleSend();
	    return;
	  }
	  var request = new XMLHttpRequest();
	  request.open('POST', this.hostUri);
	  request.setRequestHeader('X-Swim-Channel', this.channelId);
	  this.watchIdle();
	  var body = '';
	  var envelope;
	  while ((envelope = this.sendBuffer.shift())) {
	    body = body + proto.stringify(envelope) + '\n';
	  }
	  request.send(body);
	};
	HttpSocketChannel.prototype.push = function (envelope) {
	  if (this.isConnected) {
	    this.clearIdle();
	    this.sendBuffer.push(envelope);
	    this.throttleSend();
	  } else if (envelope.isCommandMessage) {
	    if (this.sendBuffer.length < this.sendBufferSize) {
	      this.sendBuffer.push(envelope);
	    } else {
	      // TODO
	    }
	    this.open();
	  }
	};
	HttpSocketChannel.prototype.onHttpSocketOpen = function () {
	  this.parser = new recon.BlockParser();
	  this.offset = 0;
	  this.onConnect();
	  this.watchIdle();
	};
	HttpSocketChannel.prototype.onHttpSocketChange = function () {
	  if (this.socket.readyState === 2) {
	    this.channelId = this.socket.getResponseHeader('X-Swim-Channel');
	    if (!this.channelId) {
	      this.socket.abort();
	    }
	  }
	}
	HttpSocketChannel.prototype.onHttpSocketData = function () {
	  var input = new LineIterator(this.socket.responseText, this.offset, true);
	  while ((!input.isInputEmpty() || input.isInputDone()) && this.parser.isCont()) {
	    var next = this.parser;
	    while ((!input.isEmpty() || input.isDone()) && next.isCont()) {
	      next = next.feed(input);
	    }
	    if (!input.isInputEmpty() && input.head() === 10/*'\n'*/) {
	      input.step();
	    }
	    this.offset = input.index;
	    if (next.isDone()) {
	      var envelope = proto.decode(next.state());
	      if (envelope) {
	        this.onEnvelope(envelope);
	      }
	      this.parser = new recon.BlockParser();
	    } else if (next.isError()) {
	      // TODO
	      this.parser = new recon.BlockParser();
	      break;
	    } else {
	      this.parser = next;
	    }
	  }
	};
	HttpSocketChannel.prototype.onHttpSocketError = function () {
	  this.onError();
	  this.clearIdle();
	};
	HttpSocketChannel.prototype.onHttpSocketClose = function () {
	  this.isAuthorized = false;
	  this.session = null;
	  this.socket = null;
	  this.onDisconnect();
	  this.clearIdle();
	  if (this.sendBuffer.length > 0 || Object.keys(this.downlinks).length > 0) {
	    this.reconnect();
	  }
	};


	function LineIterator(string, index, more) {
	  recon.StringIterator.call(this, string, index, more);
	}
	LineIterator.prototype = Object.create(recon.StringIterator.prototype);
	LineIterator.prototype.constructor = LineIterator;
	LineIterator.prototype.isDone = function () {
	  return this.index >= this.string.length && !this.more ||
	    this.index < this.string.length && this.head() === 10 /*'\n'*/;
	};
	LineIterator.prototype.isEmpty = function () {
	  return this.index >= this.string.length || this.head() === 10 /*'\n'*/;
	};
	LineIterator.prototype.isInputDone = function () {
	  return recon.StringIterator.prototype.isDone.call(this);
	};
	LineIterator.prototype.isInputEmpty = function () {
	  return recon.StringIterator.prototype.isEmpty.call(this);
	};


	function DownlinkBuilder(channel, scope) {
	  Object.defineProperty(this, 'channel', {value: channel, configurable: true});
	  Object.defineProperty(this, 'scope', {value: scope, configurable: true});
	  Object.defineProperty(this, 'proxy', {value: {}, configurable: true});
	  this.options = {};
	}
	DownlinkBuilder.prototype.host = function (hostUri) {
	  if (!arguments.length) return this.hostUri;
	  this.hostUri = hostUri;
	  return this;
	};
	DownlinkBuilder.prototype.node = function (nodeUri) {
	  if (!arguments.length) return this.nodeUri;
	  this.nodeUri = nodeUri;
	  return this;
	};
	DownlinkBuilder.prototype.lane = function (laneUri) {
	  if (!arguments.length) return this.laneUri;
	  this.laneUri = laneUri;
	  return this;
	};
	DownlinkBuilder.prototype.prio = function (prio) {
	  if (!arguments.length) return this.options.prio;
	  this.options.prio = prio;
	  return this;
	};
	DownlinkBuilder.prototype.keepAlive = function (keepAlive) {
	  if (!arguments.length) return this.options.keepAlive;
	  this.options.keepAlive = keepAlive;
	  return this;
	};
	DownlinkBuilder.prototype.delegate = function (delegate) {
	  if (!arguments.length) return this.options.delegate;
	  this.options.delegate = delegate;
	  return this;
	};
	DownlinkBuilder.prototype.onEvent = function (callback) {
	  if (!arguments.length) return this.proxy.onEvent;
	  this.proxy.onEvent = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onCommand = function (callback) {
	  if (!arguments.length) return this.proxy.onCommand;
	  this.proxy.onCommand = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onLink = function (callback) {
	  if (!arguments.length) return this.proxy.onLink;
	  this.proxy.onLink = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onLinked = function (callback) {
	  if (!arguments.length) return this.proxy.onLinked;
	  this.proxy.onLinked = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onSync = function (callback) {
	  if (!arguments.length) return this.proxy.onSync;
	  this.proxy.onSync = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onSynced = function (callback) {
	  if (!arguments.length) return this.proxy.onSynced;
	  this.proxy.onSynced = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onUnlink = function (callback) {
	  if (!arguments.length) return this.proxy.onUnlink;
	  this.proxy.onUnlink = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onUnlinked = function (callback) {
	  if (!arguments.length) return this.proxy.onUnlinked;
	  this.proxy.onUnlinked = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onConnect = function (callback) {
	  if (!arguments.length) return this.proxy.onConnect;
	  this.proxy.onConnect = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onDisconnect = function (callback) {
	  if (!arguments.length) return this.proxy.onDisconnect;
	  this.proxy.onDisconnect = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onError = function (callback) {
	  if (!arguments.length) return this.proxy.onError;
	  this.proxy.onError = callback;
	  return this;
	};
	DownlinkBuilder.prototype.onClose = function (callback) {
	  if (!arguments.length) return this.proxy.onClose;
	  this.proxy.onClose = callback;
	  return this;
	};
	DownlinkBuilder.prototype.primaryKey = function (primaryKey) {
	  if (!arguments.length) return this.options.primaryKey;
	  this.options.primaryKey = primaryKey;
	  return this;
	};
	DownlinkBuilder.prototype.sortBy = function (sortBy) {
	  if (!arguments.length) return this.options.sortBy;
	  this.options.sortBy = sortBy;
	  return this;
	};
	Object.defineProperty(DownlinkBuilder.prototype, 'normalize', {
	  value: function () {
	    if (this.hostUri) {
	      this.nodeUri = Client.resolveNodeUri(this.hostUri, this.nodeUri);
	    } else {
	      this.hostUri = Client.extractHostUri(this.nodeUri);
	    }
	    if (!this.channel) {
	      // If channel is null then scope references a Client.
	      Object.defineProperty(this, 'channel', {
	        value: this.scope.getOrCreateChannel(this.hostUri),
	        configurable: true
	      });
	      Object.defineProperty(this, 'scope', {value: null, configurable: true});
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(DownlinkBuilder.prototype, 'registerDownlink', {
	  value: function (downlink) {
	    for (var key in this.proxy) {
	      downlink[key] = this.proxy[key];
	    }
	    this.channel.registerDownlink(downlink);
	    if (this.scope) {
	      this.scope.registerDownlink(downlink);
	    }
	  },
	  configure: true
	});
	DownlinkBuilder.prototype.link = function () {
	  this.normalize();
	  var downlink = new LinkedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	DownlinkBuilder.prototype.sync = function () {
	  this.normalize();
	  var downlink = new SyncedDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	DownlinkBuilder.prototype.syncList = function () {
	  this.normalize();
	  var downlink = new ListDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);
	  this.registerDownlink(downlink);
	  return downlink;
	};
	DownlinkBuilder.prototype.syncMap = function () {
	  this.normalize();
	  var downlink = new MapDownlink(this.channel, this.hostUri, this.nodeUri, this.laneUri, this.options);
	  this.registerDownlink(downlink);
	  return downlink;
	};


	function Downlink(channel, hostUri, nodeUri, laneUri, options) {
	  options = options || {};
	  Object.defineProperty(this, 'channel', {value: channel});
	  Object.defineProperty(this, 'hostUri', {value: hostUri, enumerable: true});
	  Object.defineProperty(this, 'nodeUri', {value: nodeUri, enumerable: true});
	  Object.defineProperty(this, 'laneUri', {value: laneUri, enumerable: true});
	  Object.defineProperty(this, 'options', {value: options, enumerable: true});
	  Object.defineProperty(this, 'delegate', {value: options.delegate || this, enumerable: true, writable: true});
	}
	Object.defineProperty(Downlink.prototype, 'prio', {
	  get: function () {
	    return this.options.prio || 0.0;
	  }
	});
	Object.defineProperty(Downlink.prototype, 'keepAlive', {
	  get: function () {
	    return this.options.keepAlive || false;
	  },
	  set: function (keepAlive) {
	    this.options.keepAlive = keepAlive;
	  }
	});
	Object.defineProperty(Downlink.prototype, 'isConnected', {
	  get: function () {
	    return this.channel.isConnected;
	  },
	  enumerable: true
	});
	Object.defineProperty(Downlink.prototype, 'isAuthorized', {
	  get: function () {
	    return this.channel.isAuthorized;
	  },
	  enumerable: true
	});
	Object.defineProperty(Downlink.prototype, 'session', {
	  get: function () {
	    return this.channel.session;
	  },
	  enumerable: true
	});
	Object.defineProperty(Downlink.prototype, 'onEventMessage', {
	  value: function (message) {
	    if (typeof this.delegate.onEvent === 'function') {
	      this.delegate.onEvent(message);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onCommandMessage', {
	  value: function (message) {
	    if (typeof this.delegate.onCommand === 'function') {
	      this.delegate.onCommand(message);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onLinkRequest', {
	  value: function (request) {
	    if (typeof this.delegate.onLink === 'function') {
	      this.delegate.onLink(request);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onLinkedResponse', {
	  value: function (response) {
	    if (typeof this.delegate.onLinked === 'function') {
	      this.delegate.onLinked(response);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onSyncRequest', {
	  value: function (request) {
	    if (typeof this.delegate.onSync === 'function') {
	      this.delegate.onSync(request);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onSyncedResponse', {
	  value: function (response) {
	    if (typeof this.delegate.onSynced === 'function') {
	      this.delegate.onSynced(response);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onUnlinkRequest', {
	  value: function (request) {
	    if (typeof this.delegate.onUnlink === 'function') {
	      this.delegate.onUnlink(request);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onUnlinkedResponse', {
	  value: function (response) {
	    if (typeof this.delegate.onUnlinked === 'function') {
	      this.delegate.onUnlinked(response);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onChannelConnect', {
	  value: function (info) {
	    if (typeof this.delegate.onConnect === 'function') {
	      this.delegate.onConnect(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onChannelDisconnect', {
	  value: function (info) {
	    if (typeof this.delegate.onDisconnect === 'function') {
	      this.delegate.onDisconnect(info);
	    }
	    if (!this.keepAlive) {
	      this.close();
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onChannelError', {
	  value: function (info) {
	    if (typeof this.delegate.onError === 'function') {
	      this.delegate.onError(info);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(Downlink.prototype, 'onChannelClose', {
	  value: function () {
	    if (typeof this.delegate.onClose === 'function') {
	      this.delegate.onClose();
	    }
	  },
	  configurable: true
	});
	Downlink.prototype.command = function (body) {
	  this.channel.command(this.nodeUri, this.laneUri, body);
	};
	Downlink.prototype.close = function () {
	  this.channel.unregisterDownlink(this);
	};


	function LinkedDownlink(channel, hostUri, nodeUri, laneUri, options) {
	  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);
	}
	LinkedDownlink.prototype = Object.create(Downlink.prototype);
	LinkedDownlink.prototype.constructor = LinkedDownlink;
	Object.defineProperty(LinkedDownlink.prototype, 'onChannelConnect', {
	  value: function (info) {
	    Downlink.prototype.onChannelConnect.call(this, info);
	    var nodeUri = this.channel.unresolve(this.nodeUri);
	    var request = new proto.LinkRequest(nodeUri, this.laneUri, this.prio);
	    this.onLinkRequest(request);
	    this.channel.push(request);
	  },
	  configurable: true
	});


	function SyncedDownlink(channel, hostUri, nodeUri, laneUri, options) {
	  Downlink.call(this, channel, hostUri, nodeUri, laneUri, options);
	}
	SyncedDownlink.prototype = Object.create(Downlink.prototype);
	SyncedDownlink.prototype.constructor = SyncedDownlink;
	Object.defineProperty(SyncedDownlink.prototype, 'onChannelConnect', {
	  value: function (info) {
	    Downlink.prototype.onChannelConnect.call(this, info);
	    var nodeUri = this.channel.unresolve(this.nodeUri);
	    var request = new proto.SyncRequest(nodeUri, this.laneUri, this.prio);
	    this.onSyncRequest(request);
	    this.channel.push(request);
	  },
	  configurable: true
	});


	function ListDownlink(channel, hostUri, nodeUri, laneUri, options) {
	  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);
	  Object.defineProperty(this, 'state', {value: [], configurable: true});
	}
	ListDownlink.prototype = Object.create(SyncedDownlink.prototype);
	ListDownlink.prototype.constructor = ListDownlink;
	Object.defineProperty(ListDownlink.prototype, 'onEventMessage', {
	  value: function (message) {
	    var tag = recon.tag(message.body);
	    var head, index, value;
	    if (tag === '@update') {
	      head = recon.head(message.body);
	      index = recon.get(head, 'index');
	      value = recon.tail(message.body);
	      this.remoteUpdate(index, value);
	    } else if (tag === '@insert') {
	      head = recon.head(message.body);
	      index = recon.get(head, 'index');
	      value = recon.tail(message.body);
	      this.remoteInsert(index, value);
	    } else if (tag === '@move') {
	      head = recon.head(message.body);
	      var from = recon.get(head, 'from');
	      var to = recon.get(head, 'to');
	      value = recon.tail(message.body);
	      this.remoteMove(from, to, value);
	    } else if (tag === '@remove' || tag === '@delete') {
	      head = recon.head(message.body);
	      index = recon.get(head, 'index');
	      value = recon.tail(message.body);
	      this.remoteRemove(index, value);
	    } else if (tag === '@clear' && recon.size(message.body) === 1) {
	      this.remoteClear();
	    } else {
	      this.remoteAppend(message.body);
	    }
	    SyncedDownlink.prototype.onEventMessage.call(this, message);
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'remoteAppend', {
	  value: function (value) {
	    this.state.push(value);
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'remoteUpdate', {
	  value: function (index, value) {
	    this.state[index] = value;
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'remoteInsert', {
	  value: function (index, value) {
	    if (!recon.equal(this.state[index], value)) {
	      this.state.splice(index, 0, value);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'remoteMove', {
	  value: function (fromIndex, toIndex, value) {
	    if (!recon.equal(this.state[toIndex], value)) {
	      this.state.splice(fromIndex, 1);
	      this.state.splice(toIndex, 0, value);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'remoteRemove', {
	  value: function (index, value) {
	    if (recon.equal(this.state[index], value)) {
	      this.state.splice(index, 1);
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'remoteClear', {
	  value: function (index, value) {
	    Object.defineProperty(this, 'state', {value: [], configurable: true});
	  },
	  configurable: true
	});
	Object.defineProperty(ListDownlink.prototype, 'length', {
	  get: function () {
	    return this.state.length;
	  },
	  configurable: true,
	  enumerable: true
	});
	ListDownlink.prototype.get = function (index) {
	  return this.state[index];
	};
	ListDownlink.prototype.set = function (index, value) {
	  value = recon(value !== undefined ? value : this.get(index));
	  this.state[index] = value;
	  var nodeUri = this.channel.unresolve(this.nodeUri);
	  var body = recon.concat(recon({'@update': recon({index: index})}), value);
	  var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	  this.onCommandMessage(message);
	  this.channel.push(message);
	};
	ListDownlink.prototype.push = function () {
	  var nodeUri = this.channel.unresolve(this.nodeUri);
	  for (var i = 0, n = arguments.length; i < n; i += 1) {
	    var value = recon(arguments[i]);
	    this.state.push(value);
	    var message = new proto.CommandMessage(nodeUri, this.laneUri, value);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	  return this.state.length;
	};
	ListDownlink.prototype.pop = function () {
	  var value = this.state.pop();
	  var index = this.state.length;
	  if (value !== undefined) {
	    var nodeUri = this.channel.unresolve(this.nodeUri);
	    var body = recon.concat(recon({'@remove': recon({index: index})}), value);
	    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	  return value;
	};
	ListDownlink.prototype.unshift = function () {
	  var nodeUri = this.channel.unresolve(this.nodeUri);
	  for (var i = arguments.length - 1; i >= 0; i -= 1) {
	    var value = recon(arguments[i]);
	    this.state.unshift(value);
	    var body = recon.concat(recon({'@insert': recon({index: 0})}), value);
	    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	  return this.state.length;
	};
	ListDownlink.prototype.shift = function () {
	  var value = this.state.shift();
	  if (value !== undefined) {
	    var nodeUri = this.channel.unresolve(this.nodeUri);
	    var body = recon.concat(recon({'@remove': recon({index: 0})}), value);
	    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	  return value;
	};
	ListDownlink.prototype.move = function (fromIndex, toIndex) {
	  var removed = this.state.splice(fromIndex, 1);
	  if (removed.length === 1) {
	    var value = removed[0];
	    this.state.splice(toIndex, 0, value);
	    var nodeUri = this.channel.unresolve(this.nodeUri);
	    var body = recon.concat(recon({'@move': recon({from: fromIndex, to: toIndex})}), value);
	    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	};
	ListDownlink.prototype.splice = function () {
	  var start = arguments[0];
	  var deleteCount = arguments[1];
	  var nodeUri = this.channel.unresolve(this.nodeUri);
	  var removed = [];
	  var i, n, value, body, message;
	  for (i = start; i < start + deleteCount; i += 1) {
	    value = this.state[i];
	    if (value !== undefined) {
	      removed.push(value);
	      this.state.splice(start, 1);
	      body = recon.concat(recon({'@remove': recon({index: start})}), value);
	      message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	      this.onCommandMessage(message);
	      this.channel.push(message);
	    }
	  }
	  for (i = 2, n = arguments.length; i < n; i += 1) {
	    var index = start + i - 2;
	    value = recon(arguments[i]);
	    this.state.splice(index, 0, value);
	    body = recon.concat(recon({'@insert': recon({index: index})}), value);
	    message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	  return removed;
	};
	ListDownlink.prototype.clear = function () {
	  Object.defineProperty(this, 'state', {value: [], configurable: true});
	  var nodeUri = this.channel.unresolve(this.nodeUri);
	  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);
	  this.onCommandMessage(message);
	  this.channel.push(message);
	  return this;
	};
	ListDownlink.prototype.forEach = function (callback, thisArg) {
	  for (var i = 0, n = this.state.length; i < n; i += 1) {
	    var value = this.state[i];
	    callback.call(thisArg, value, i, this);
	  }
	};


	function MapDownlink(channel, hostUri, nodeUri, laneUri, options) {
	  SyncedDownlink.call(this, channel, hostUri, nodeUri, laneUri, options);
	  Object.defineProperty(this, 'state', {value: [], configurable: true});
	  Object.defineProperty(this, 'table', {value: {}, configurable: true});
	  this.primaryKey = MapDownlink.primaryKeyOption(this.options);
	  this.sortBy = MapDownlink.sortByOption(this.options);
	}
	MapDownlink.prototype = Object.create(SyncedDownlink.prototype);
	MapDownlink.prototype.constructor = MapDownlink;
	Object.defineProperty(MapDownlink.prototype, 'onEventMessage', {
	  value: function (message) {
	    var tag = recon.tag(message.body);
	    var head, key, value;
	    if (tag === '@update') {
	      head = recon.head(message.body);
	      key = recon.get(head, 'key');
	      value = recon.tail(message.body);
	      this.remoteSet(key, value);
	    } else if (tag === '@remove' || tag === '@delete') {
	      head = recon.head(message.body);
	      key = recon.get(head, 'key');
	      if (key === undefined && this.primaryKey) {
	        key = this.primaryKey(message.body);
	      }
	      if (key !== undefined) {
	        this.remoteDelete(key);
	      }
	    } else if (tag === '@clear' && recon.size(message.body) === 1) {
	      this.remoteClear();
	    } else if (this.primaryKey) {
	      value = message.body;
	      key = this.primaryKey(value);
	      if (key !== undefined) {
	        this.remoteSet(key, value);
	      }
	    }
	    SyncedDownlink.prototype.onEventMessage.call(this, message);
	  },
	  configurable: true
	});
	Object.defineProperty(MapDownlink.prototype, 'remoteSet', {
	  value: function (key, value) {
	    Object.defineProperty(value, '$key', {value: key, configurable: true});
	    if (typeof key === 'string') {
	      this.table[key] = value;
	    }
	    for (var i = 0, n = this.state.length; i < n; i += 1) {
	      if (recon.equal(key, this.state[i].$key)) {
	        this.state[i] = value;
	        break;
	      }
	    }
	    if (i === n) {
	      this.state.push(value);
	    }
	    this.sort();
	  },
	  configurable: true
	});
	Object.defineProperty(MapDownlink.prototype, 'remoteDelete', {
	  value: function (key) {
	    if (typeof key === 'string') {
	      delete this.table[key];
	    }
	    for (var i = 0, n = this.state.length; i < n; i += 1) {
	      if (recon.equal(key, this.state[i].$key)) {
	        this.state.splice(i, 1);
	        return;
	      }
	    }
	  },
	  configurable: true
	});
	Object.defineProperty(MapDownlink.prototype, 'remoteClear', {
	  value: function (key) {
	    Object.defineProperty(this, 'state', {value: [], configurable: true});
	    Object.defineProperty(this, 'table', {value: {}, configurable: true});
	  },
	  configurable: true
	});
	Object.defineProperty(MapDownlink.prototype, 'size', {
	  get: function () {
	    return this.state.length;
	  },
	  configurable: true,
	  enumerable: true
	});
	MapDownlink.prototype.has = function (key) {
	  if (typeof key === 'string') {
	    return this.table[key] !== undefined;
	  } else {
	    for (var i = 0, n = this.state.length; i < n; i += 1) {
	      if (recon.equal(key, this.state[i].$key)) {
	        return true;
	      }
	    }
	  }
	  return false;
	};
	MapDownlink.prototype.get = function (key) {
	  if (typeof key === 'string') {
	    return this.table[key];
	  } else {
	    for (var i = 0, n = this.state.length; i < n; i += 1) {
	      var value = this.state[i];
	      if (recon.equal(key, value.$key)) {
	        return value;
	      }
	    }
	  }
	};
	MapDownlink.prototype.set = function (key, value) {
	  value = recon(value !== undefined ? value : this.get(key));
	  Object.defineProperty(value, '$key', {value: key, configurable: true});
	  if (typeof key === 'string') {
	    this.table[key] = value;
	  }
	  var oldValue;
	  for (var i = 0, n = this.state.length; i < n; i += 1) {
	    if (recon.equal(key, this.state[i].$key)) {
	      oldValue = this.state[i];
	      this.state[i] = value;
	      break;
	    }
	  }
	  if (i === n) {
	    this.state.push(value);
	  }
	  this.sort();
	  if (!recon.equal(value, oldValue)) {
	    var nodeUri = this.channel.unresolve(this.nodeUri);
	    var body;
	    if (this.primaryKey) {
	      body = recon(value);
	    } else {
	      body = recon.concat(recon({'@update': {key: key}}), recon(value));
	    }
	    var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	    this.onCommandMessage(message);
	    this.channel.push(message);
	  }
	  return this;
	};
	MapDownlink.prototype.delete = function (key) {
	  if (typeof key === 'string') {
	    delete this.table[key];
	  }
	  for (var i = 0, n = this.state.length; i < n; i += 1) {
	    var value = this.state[i];
	    if (recon.equal(key, value.$key)) {
	      this.state.splice(i, 1);
	      var nodeUri = this.channel.unresolve(this.nodeUri);
	      var body;
	      if (this.primaryKey) {
	        body = recon.concat(recon({'@remove': null}), value);
	      } else {
	        body = recon({'@remove': {key: key}});
	      }
	      var message = new proto.CommandMessage(nodeUri, this.laneUri, body);
	      this.onCommandMessage(message);
	      this.channel.push(message);
	      return true;
	    }
	  }
	  return false;
	};
	MapDownlink.prototype.clear = function () {
	  Object.defineProperty(this, 'state', {value: [], configurable: true});
	  Object.defineProperty(this, 'table', {value: {}, configurable: true});
	  var nodeUri = this.channel.unresolve(this.nodeUri);
	  var message = new proto.CommandMessage(nodeUri, this.laneUri, [{'@clear': null}]);
	  this.onCommandMessage(message);
	  this.channel.push(message);
	  return this;
	};
	MapDownlink.prototype.sort = function () {
	  if (this.sortBy) {
	    this.state.sort(this.sortBy);
	  }
	};
	MapDownlink.prototype.keys = function () {
	  var keys = [];
	  for (var i = 0, n = this.state.length; i < n; i += 1) {
	    var key = this.state[i].$key;
	    if (key !== undefined) {
	      keys.push(key);
	    }
	  }
	  return keys;
	};
	MapDownlink.prototype.values = function () {
	  return this.state;
	};
	MapDownlink.prototype.forEach = function (callback, thisArg) {
	  for (var i = 0, n = this.state.length; i < n; i += 1) {
	    var value = this.state[i];
	    var key = value.$key;
	    callback.call(thisArg, value, key, this);
	  }
	};
	MapDownlink.primaryKeyOption = function (options) {
	  if (typeof options.primaryKey === 'function') {
	    return options.primaryKey;
	  } else if (typeof options.primaryKey === 'string') {
	    var keys = options.primaryKey.split('.');
	    return function (value) {
	      for (var i = 0, n = keys.length; i < n; i += 1) {
	        var key = keys[i];
	        value = recon.get(value, key);
	      }
	      return value;
	    };
	  } else {
	    return undefined;
	  }
	};
	MapDownlink.sortByOption = function (options) {
	  if (typeof options.sortBy === 'function') {
	    return options.sortBy;
	  } else if (typeof options.sortBy === 'string') {
	    var keys = options.sortBy.split('.');
	    return function (x, y) {
	      for (var i = 0, n = keys.length; i < n; i += 1) {
	        var key = keys[i];
	        x = recon.get(x, key);
	        y = recon.get(y, key);
	        return recon.compare(x, y);
	      }
	    };
	  }
	};


	function UriCache(baseUri, size) {
	  size = size || 32;
	  Object.defineProperty(this, 'baseUri', {value: baseUri, enumerable: true});
	  Object.defineProperty(this, 'base', {value: recon.uri.parse(baseUri)});
	  Object.defineProperty(this, 'size', {value: size, enumerable: true});
	  Object.defineProperty(this, 'resolveCache', {value: new Array(size)});
	  Object.defineProperty(this, 'unresolveCache', {value: new Array(size)});
	}
	UriCache.prototype.resolve = function (unresolvedUri) {
	  var hashBucket = Math.abs(UriCache.hash(unresolvedUri) % this.size);
	  var cacheEntry = this.resolveCache[hashBucket];
	  if (cacheEntry && cacheEntry.unresolved === unresolvedUri) {
	    return cacheEntry.resolved;
	  } else {
	    var resolvedUri = recon.uri.stringify(recon.uri.resolve(this.base, unresolvedUri));
	    this.resolveCache[hashBucket] = {
	      unresolved: unresolvedUri,
	      resolved: resolvedUri
	    };
	    return resolvedUri;
	  }
	};
	UriCache.prototype.unresolve = function (resolvedUri) {
	  var hashBucket = Math.abs(UriCache.hash(resolvedUri) % this.size);
	  var cacheEntry = this.unresolveCache[hashBucket];
	  if (cacheEntry && cacheEntry.resolved === resolvedUri) {
	    return cacheEntry.unresolved;
	  } else {
	    var unresolvedUri = recon.uri.stringify(recon.uri.unresolve(this.base, resolvedUri));
	    this.unresolveCache[hashBucket] = {
	      unresolved: unresolvedUri,
	      resolved: resolvedUri
	    };
	    return unresolvedUri;
	  }
	};
	UriCache.rotl = function (value, distance) {
	  return (value << distance) | (value >>> (32 - distance));
	};
	UriCache.mix = function (code, value) {
	  // MurmurHash3 mix function
	  value *= 0xcc9e2d51;
	  value = UriCache.rotl(value, 15);
	  value *= 0x1b873593;
	  code ^= value;
	  code = UriCache.rotl(code, 13);
	  code = code * 5 + 0xe6546b64;
	  return code;
	};
	UriCache.mash = function (code) {
	  // MurmurHash3 finalize function
	  code ^= code >>> 16;
	  code *= 0x85ebca6b;
	  code ^= code >>> 13;
	  code *= 0xc2b2ae35;
	  code ^= code >>> 16;
	  return code;
	};
	UriCache.hash = function (string) {
	  var code = 0;
	  for (var i = 0, n = string.length; i < n; i += 1) {
	    code = UriCache.mix(code, string.charAt(i));
	  }
	  code = UriCache.mash(code);
	  return code;
	};


	var swim = new Client();
	swim.client = function (options) {
	  return new Client(options);
	};
	swim.config = config;
	swim.Client = Client;
	swim.Scope = Scope;
	swim.HostScope = HostScope;
	swim.NodeScope = NodeScope;
	swim.LaneScope = LaneScope;
	swim.Channel = Channel;
	swim.DownlinkBuilder = DownlinkBuilder;
	swim.Downlink = Downlink;
	swim.LinkedDownlink = LinkedDownlink;
	swim.SyncedDownlink = SyncedDownlink;
	swim.ListDownlink = ListDownlink;
	swim.MapDownlink = MapDownlink;

	module.exports = swim;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	module.exports = {
		"version": "0.4.8"
	};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var config = __webpack_require__(36);

	function parse(string) {
	  var input = new StringIterator(string);
	  var result = new DocumentParser().run(input);
	  return result.state();
	}

	function stringify(value, options) {
	  var writer = new ReconWriter();
	  if (options && options.block === false) writer.writeValue(value);
	  else writer.writeBlock(value);
	  return writer.state();
	}

	function base64(string) {
	  if (string === undefined) return new Uint8Array(0);
	  var data = new DataBuilder();
	  var cs = new StringIterator(string);
	  while (!cs.isEmpty()) {
	    data.appendBase64Char(cs.head());
	    cs.step();
	  }
	  return data.state();
	}

	function isRecord(item) {
	  return Array.isArray(item) && !(item instanceof Uint8Array);
	}

	function isObject(item) {
	  return item !== null && typeof item === 'object' && !(item instanceof Uint8Array);
	}

	function isField(item) {
	  return item !== null && typeof item === 'object' && !Array.isArray(item) && !(item instanceof Uint8Array);
	}

	function isAttr(item) {
	  if (!isField(item)) return false;
	  var keys = Object.keys(item);
	  var n = keys.length;
	  if (n === 0) return false;
	  for (var i = 0; i < n; i += 1) {
	    var key = keys[i];
	    if (key.length === 0 || key.charCodeAt(0) !== 64/*'@'*/) return false;
	  }
	  return true;
	}

	function isBlockSafe(record) {
	  for (var i = 0, n = record.length; i < n; i += 1) {
	    if (isAttr(record[i])) return false;
	  }
	  return true;
	}

	function isMarkupSafe(record) {
	  var n = record.length;
	  if (n === 0 || !isAttr(record[0])) return false;
	  for (var i = 1; i < n; i += 1) {
	    if (isAttr(record[i])) return false;
	  }
	  return true;
	}

	function size(value) {
	  if (isRecord(value)) return value.length;
	  else if (isObject(value)) return Object.keys(value).length;
	  else return 0;
	}

	function head(value) {
	  if (isRecord(value)) {
	    var header = value[0];
	    if (isField(header)) {
	      if (header.$key) return header.$value;
	      else return header[Object.keys(header)[0]];
	    }
	    else return header;
	  }
	  else if (isObject(value)) return value[Object.keys(value)[0]];
	  else return value;
	}

	function tail(value) {
	  var i, n, builder;
	  if (isRecord(value)) {
	    builder = new RecordBuilder();
	    for (i = 1, n = value.length; i < n; i += 1) {
	      builder.appendItem(value[i]);
	    }
	    return builder.state();
	  }
	  else if (isObject(value)) {
	    var keys = Object.keys(value);
	    for (i = 1, n = keys.length; i < n; i += 1) {
	      var key = keys[i];
	      builder.appendField(key, value[key]);
	    }
	    return builder.state();
	  }
	}

	function tag(value) {
	  if (isRecord(value)) {
	    var header = value[0];
	    if (isField(header)) return header.$key || Object.keys(header)[0];
	  }
	  else if (isObject(value)) return Object.keys(value)[0];
	}

	function has(record, key) {
	  return get(record, key) !== undefined;
	}

	function get(record, key) {
	  var i, n, item, value;
	  if (typeof key === 'string') {
	    value = record[key];
	    if (value !== undefined) return value;
	    for (i = 0, n = record.length; i < n; i += 1) {
	      item = record[i];
	      if (isField(item)) {
	        if (item[key] !== undefined) return item[key];
	        else if (equal(item.$key, key)) return item.$value;
	      }
	    }
	  }
	  else {
	    for (i = 0, n = record.length; i < n; i += 1) {
	      item = record[i];
	      if (isField(item)) {
	        if (equal(item.$key, key)) return item.$value;
	      }
	    }
	  }
	}

	function set(record, key, value) {
	  value = coerceValue(value);
	  if (isRecord(record)) setRecord(record, key, value);
	  else if (isObject(record)) setObject(record, key, value);
	}
	function setRecord(record, key, value) {
	  var updated = false;
	  var field;
	  for (var i = 0, n = record.length; i < n; i += 1) {
	    var item = record[i];
	    if (isField(item)) {
	      if (item[key] !== undefined) {
	        item[key] = value;
	        updated = true;
	      }
	      else if (equal(item.$key, key)) {
	        item.$value = value;
	        updated = true;
	      }
	    }
	  }
	  if (typeof key === 'string') {
	    if (!updated) {
	      field = {};
	      field[key] = value;
	      record.push(field);
	    }
	    record[key] = value;
	  }
	  else if (!updated) {
	    field = {};
	    field.$key = key;
	    field.$value = value;
	    record.push(field);
	  }
	}
	function setObject(record, key, value) {
	  if (typeof key === 'string') {
	    record[key] = value;
	  }
	}

	function remove(record, key) {
	  if (isRecord(record)) removeRecord(record, key);
	  else if (isObject(record)) removeObject(record, key);
	}
	function removeRecord(record, key) {
	  for (var i = 0, n = record.length; i < n; i += 1) {
	    var item = record[i];
	    if (isField(item)) {
	      if (item[key] !== undefined) {
	        delete item[key];
	        delete record[key];
	        if (Object.keys(item).length === 0) {
	          record.splice(i, 1);
	          i -= 1;
	          n -= 1;
	        }
	      }
	      else if (equal(item.$key, key)) {
	        record.splice(i, 1);
	        i -= 1;
	        n -= 1;
	      }
	    }
	  }
	}
	function removeObject(record, key) {
	  if (typeof key === 'string') {
	    delete record[key];
	  }
	}

	function keys(record) {
	  if (isRecord(record)) {
	    var keys = [];
	    for (var i = 0, n = record.length; i < n; i += 1) {
	      var item = record[i];
	      if (isField(item)) {
	        var key = item.$key;
	        if (key !== undefined) keys.push(key);
	        else Array.prototype.push.apply(keys, Object.keys(item));
	      }
	    }
	    return keys;
	  }
	  else if (isObject(record)) {
	    return Object.keys(record);
	  }
	  else {
	    return [];
	  }
	}

	function values(record) {
	  var values = [];
	  var key;
	  if (isRecord(record)) {
	    for (var i = 0, n = record.length; i < n; i += 1) {
	      var item = record[i];
	      if (isField(item)) {
	        key = item.$key;
	        if (key !== undefined) {
	          values.push(item.$value);
	        }
	        else {
	          for (key in item) {
	            values.push(item[key]);
	          }
	        }
	      }
	      else {
	        values.push(item);
	      }
	    }
	  }
	  else if (isObject(record)) {
	    for (key in record) {
	      values.push(record[key]);
	    }
	  }
	  return values;
	}

	function forEach(record, callback, thisArg) {
	  var key, value;
	  if (isRecord(record)) {
	    for (var i = 0, n = record.length; i < n; i += 1) {
	      var item = record[i];
	      if (isField(item)) {
	        key = item.$key;
	        if (key !== undefined) {
	          value = item.$value;
	          callback.call(thisArg, value, key, record);
	        }
	        else {
	          for (key in item) {
	            value = item[key];
	            callback.call(thisArg, value, key, record);
	          }
	        }
	      }
	      else {
	        callback.call(thisArg, item, undefined, record);
	      }
	    }
	  }
	  else if (isObject(record)) {
	    for (key in record) {
	      value = record[key];
	      callback.call(thisArg, value, key, record);
	    }
	  }
	}

	function concat(x, y) {
	  var builder = new RecordBuilder();
	  if (isRecord(x)) builder.appendRecord(x);
	  else if (isObject(x)) builder.appendFields(x);
	  else if (x !== undefined) builder.appendItem(x);
	  if (isRecord(y)) builder.appendRecord(y);
	  else if (isObject(y)) builder.appendFields(y);
	  else if (y !== undefined) builder.appendItem(y);
	  return builder.state();
	}

	function equal(x, y) {
	  if (x === y) return true;
	  if (isRecord(x) && isRecord(y)) return equalRecord(x, y);
	  if (isField(x) && isField(y)) return equalFields(x, y);
	  if (x instanceof Uint8Array && y instanceof Uint8Array) return equalData(x, y);
	  return false;
	}
	function equalRecord(x, y) {
	  var n = x.length;
	  if (n !== y.length) return false;
	  for (var i = 0; i < n; i += 1) {
	    if (!equal(x[i], y[i])) return false;
	  }
	  return true;
	}
	function equalFields(x, y) {
	  var xKeys = Object.keys(x);
	  var yKeys = Object.keys(y);
	  var n = xKeys.length;
	  if (n !== yKeys.length) return false;
	  for (var i = 0; i < n; i += 1) {
	    var key = xKeys[i];
	    if (!equal(x[key], y[key])) return false;
	  }
	  return true;
	}
	function equalData(x, y) {
	  var n = x.length;
	  if (n !== y.length) return false;
	  for (var i = 0; i < n; i += 1) {
	    if (x[i] !== y[i]) return false;
	  }
	  return true;
	}

	function compare(x, y) {
	  if (x === true) x = 'true';
	  else if (x === false) x = 'false';
	  if (y === true) y = 'true';
	  else if (y === false) y = 'false';

	  if (x === undefined) {
	    if (y === undefined) return 0;
	    else return 1;
	  }
	  else if (x === null) {
	    if (y === undefined) return -1;
	    else if (y === null) return 0;
	    else return 1;
	  }
	  else if (typeof x === 'number') {
	    if (y === undefined || y === null) return -1;
	    else if (typeof y === 'number') return x < y ? -1 : x > y ? 1 : 0;
	    else return 1;
	  }
	  else if (typeof x === 'string') {
	    if (y === undefined || y === null || typeof y === 'number') return -1;
	    else if (typeof y === 'string') return x < y ? -1 : x > y ? 1 : 0;
	    else return 1;
	  }
	  else if (x instanceof Uint8Array) {
	    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') return -1;
	    else if (y instanceof Uint8Array) return compareData(x, y);
	    else return 1;
	  }
	  else if (Array.isArray(x)) {
	    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||
	        y instanceof Uint8Array) return -1;
	    else if (Array.isArray(y)) return compareRecord(x, y);
	    else return 1;
	  }
	  else {
	    if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' ||
	        y instanceof Uint8Array || Array.isArray(y)) return -1;
	    else return compareFields(x, y);
	  }
	}
	function compareRecord(x, y) {
	  var p = x.length;
	  var q = y.length;
	  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {
	    order = compare(x[i], y[i]);
	  }
	  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
	}
	function compareFields(x, y) {
	  var xKeys = Object.keys(x);
	  var yKeys = Object.keys(y);
	  var p = xKeys.length;
	  var q = yKeys.length;
	  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {
	    var xKey = xKeys[i];
	    var yKey = yKeys[i];
	    order = compareName(xKey, yKey);
	    if (order === 0) order = compare(x[xKey], y[yKey]);
	  }
	  return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
	}
	function compareName(x, y) {
	  var p = x.length;
	  var q = y.length;
	  if (p > 0 && q > 0) {
	    var x0 = x.charCodeAt(0);
	    var y0 = y.charCodeAt(0);
	    if (x0 === 64/*'@'*/ && y0 !== 64/*'@'*/) return -1;
	    else if (x0 !== 64/*'@'*/ && y0 === 64/*'@'*/) return 1;
	    else return x < y ? -1 : x > y ? 1 : 0;
	  }
	  else if (p > 0) return 1;
	  else if (q > 0) return -1;
	  else return 0;
	}
	function compareData(x, y) {
	  var p = x.length;
	  var q = y.length;
	  for (var i = 0, n = Math.min(p, q), order = 0; i < n && order === 0; i += 1) {
	    order = x[i] - y[i];
	  }
	  return order > 0 ? 1 : order < 0 ? -1 : p > q ? 1 : p < q ? -1 : 0;
	}

	function coerce() {
	  if (arguments.length === 1) return coerceValue(arguments[0]);
	  else if (arguments.length > 1) return coerceRecord(arguments);
	}
	function coerceValue(value) {
	  if (isRecord(value)) return coerceRecord(value);
	  else if (isObject(value)) return coerceObject(value);
	  else return value;
	}
	function coerceRecord(items) {
	  var record = [];
	  var i, n;
	  for (i = 0, n = items.length; i < n; i += 1) {
	    record.push(items[i]);
	  }
	  var keys = Object.keys(items);
	  for (i = 0, n = keys.length; i < n; i += 1) {
	    var key = keys[i];
	    if (isNaN(parseInt(key)) && key.length > 0 && key.charCodeAt(0) !== 36/*'$'*/) {
	      var value = coerceValue(items[key]);
	      set(record, key, value);
	    }
	  }
	  return record;
	}
	function coerceObject(fields) {
	  var keys = Object.keys(fields);
	  var n = keys.length;
	  var record = new Array(n);
	  for (var i = 0; i < n; i += 1) {
	    var key = keys[i];
	    var value = coerceValue(fields[key]);
	    var field = {};
	    field[key] = value;
	    record[i] = field;
	    record[key] = value;
	  }
	  return record;
	}


	function RecordBuilder() {
	  this.items = [];
	}
	RecordBuilder.prototype.appendItem = function (item) {
	  if (isField(item)) this.appendFields(item);
	  else this.appendValue(item);
	};
	RecordBuilder.prototype.appendFields = function (fields) {
	  var keys = Object.keys(fields);
	  for (var i = 0, n = keys.length; i < n; i += 1) {
	    var key = keys[i];
	    var value = fields[key];
	    this.appendField(key, value);
	  }
	};
	RecordBuilder.prototype.appendField = function (key, value) {
	  var field = {};
	  if (typeof key === 'string') {
	    field[key] = value;
	    this.items.push(field);
	    this.items[key] = value;
	  }
	  else {
	    field.$key = key;
	    field.$value = value;
	    this.items.push(field);
	  }
	};
	RecordBuilder.prototype.appendValue = function (value) {
	  this.items.push(value);
	};
	RecordBuilder.prototype.appendRecord = function (record) {
	  for (var i = 0, n = record.length; i < n; i += 1) {
	    this.appendItem(record[i]);
	  }
	};
	RecordBuilder.prototype.state = function () {
	  return this.items;
	};


	function ValueBuilder() {
	  this.items = null;
	  this.value = null;
	}
	ValueBuilder.prototype.appendItem = function (item) {
	  if (isField(item)) this.appendField(item);
	  else this.appendValue(item);
	};
	ValueBuilder.prototype.appendFields = function (fields) {
	  var keys = Object.keys(fields);
	  for (var i = 0, n = keys.length; i < n; i += 1) {
	    var key = keys[i];
	    var value = fields[key];
	    this.appendField(key, value);
	  }
	};
	ValueBuilder.prototype.appendField = function (key, value) {
	  if (this.items === null) {
	    this.items = [];
	    if (this.value !== null) {
	      this.items.push(this.value);
	      this.value = null;
	    }
	  }
	  var field = {};
	  if (typeof key === 'string') {
	    field[key] = value;
	    this.items.push(field);
	    this.items[key] = value;
	  }
	  else {
	    field.$key = key;
	    field.$value = value;
	    this.items.push(field);
	  }
	};
	ValueBuilder.prototype.appendValue = function (value) {
	  if (this.items !== null) this.items.push(value);
	  else if (this.value === null) this.value = value;
	  else {
	    this.items = [];
	    this.items.push(this.value);
	    this.value = null;
	    this.items.push(value);
	  }
	};
	ValueBuilder.prototype.state = function () {
	  if (this.value !== null) return this.value;
	  else if (this.items !== null) return this.items;
	};


	function StringIterator(string, index, more) {
	  this.string = string || '';
	  this.index = index || 0;
	  this.more = more || false;
	}
	StringIterator.prototype.isDone = function () {
	  return this.isEmpty() && !this.more;
	};
	StringIterator.prototype.isEmpty = function () {
	  return this.index >= this.string.length;
	};
	StringIterator.prototype.head = function () {
	  var c1 = this.string.charCodeAt(this.index);
	  if (c1 <= 0xD7FF || c1 >= 0xE000) return c1; // U+0000..U+D7FF | U+E000..U+FFFF
	  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800
	    var c2 = this.string.charCodeAt(this.index + 1);
	    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF
	      return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;
	    else return 0xFFFD;
	  }
	  else return 0xFFFD;
	};
	StringIterator.prototype.step = function () {
	  var c1 = this.string.charCodeAt(this.index);
	  if (c1 <= 0xD7FF || c1 >= 0xE000) // U+0000..U+D7FF | U+E000..U+FFFF
	    this.index += 1;
	  else if (c1 <= 0xDBFF && this.index + 1 < this.string.length) { // c1 >= 0xD800
	    var c2 = this.string.charCodeAt(this.index + 1);
	    if (c2 >= 0xDC00 && c2 <= 0xDFFF) // U+10000..U+10FFFF
	      this.index += 2;
	    else this.index += 1;
	  }
	  else this.index += 1;
	};
	StringIterator.prototype.dup = function () {
	  return new StringIterator(this.string, this.index, this.more);
	};

	StringIterator.Done = {
	  isDone: function () {
	    return true;
	  },
	  isEmpty: function () {
	    return true;
	  },
	  head: function () {
	    throw 'head of empty iterator';
	  },
	  step: function () {
	    throw 'empty iterator step';
	  }
	};
	StringIterator.Done.prototype = Object.create(StringIterator.prototype);


	function StringIteratee() {}
	StringIteratee.prototype.isCont = function () {
	  return true;
	};
	StringIteratee.prototype.isDone = function () {
	  return false;
	};
	StringIteratee.prototype.isError = function () {
	  return false;
	};
	StringIteratee.prototype.feed = function (input) {
	  return this;
	};
	StringIteratee.prototype.run = function (input) {
	  var next = this;
	  do next = next.feed(input);
	  while (!input.isEmpty() && next.isCont());
	  if (input.isEmpty() && !input.isDone() && next.isCont()) {
	    next = next.feed(StringIterator.Done);
	  }
	  return next;
	};
	StringIteratee.prototype.state = function () {};

	StringIteratee.Done = function (value) {
	  StringIteratee.call(this);
	  this.value = value;
	};
	StringIteratee.Done.prototype = Object.create(StringIteratee.prototype);
	StringIteratee.Done.prototype.constructor = StringIteratee.Done;
	StringIteratee.Done.prototype.isCont = function () {
	  return false;
	};
	StringIteratee.Done.prototype.isDone = function () {
	  return true;
	};
	StringIteratee.Done.prototype.feed = function (input) {
	  return this;
	};
	StringIteratee.Done.prototype.state = function () {
	  return this.value;
	};

	StringIteratee.Error = function (error) {
	  StringIteratee.call(this);
	  if (typeof error.found === 'number') error.found = String.fromCharCode(error.found);
	  this.error = error;
	};
	StringIteratee.Error.prototype = Object.create(StringIteratee.prototype);
	StringIteratee.Error.prototype.constructor = StringIteratee.Error;
	StringIteratee.Error.prototype.isCont = function () {
	  return false;
	};
	StringIteratee.Error.prototype.isError = function () {
	  return true;
	};
	StringIteratee.Error.prototype.feed = function (input) {
	  return this;
	};
	StringIteratee.Error.prototype.state = function () {
	  throw this.error;
	};

	StringIteratee.unexpectedEOF = new StringIteratee.Error('unexpected end of input');


	function StringBuilder(s) {
	  this.string = s || '';
	}
	StringBuilder.prototype.append = function (c) {
	  if ((c >= 0x0000 && c <= 0xD7FF) ||
	      (c >= 0xE000 && c <= 0xFFFF)) { // U+0000..U+D7FF | U+E000..U+FFFF
	    this.string += String.fromCharCode(c);
	  }
	  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF
	    var u = c - 0x10000;
	    this.string += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));
	  }
	  else { // invalid code point
	    this.string += String.fromCharCode(0xFFFD);
	  }
	};
	StringBuilder.prototype.appendString = function (s) {
	  var cs = new StringIterator(s);
	  while (!cs.isEmpty()) {
	    this.append(cs.head());
	    cs.step();
	  }
	};
	StringBuilder.prototype.state = function () {
	  return this.string;
	};


	function DataBuilder() {
	  this.buffer = null;
	  this.offset = 0;
	  this.aliased = true;
	  this.p = 0;
	  this.q = 0;
	  this.r = 0;
	  this.s = 0;
	}
	DataBuilder.prototype.prepare = function (size) {
	  function expand(base, size) {
	    var n = Math.max(base, size) - 1;
	    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8;
	    return n + 1;
	  }
	  if (this.aliased || size > this.buffer.length) {
	    var array = new Uint8Array(expand(256, size));
	    if (this.buffer) array.set(this.buffer);
	    this.buffer = array;
	    this.aliased = false;
	  }
	};
	DataBuilder.prototype.appendByte = function (value) {
	  this.prepare(this.offset + 1);
	  this.buffer[this.offset] = value;
	  this.offset += 1;
	};
	DataBuilder.prototype.decodeBase64Digit = function (c) {
	  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c - 65/*'A'*/;
	  else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) return c - 71/*'a' - 26*/;
	  else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c + 4/*52 - '0'*/;
	  else if (c === 43/*'+'*/ || c === 45/*'-'*/) return 62;
	  else if (c === 47/*'/'*/ || c === 95/*'_'*/) return 63;
	};
	DataBuilder.prototype.decodeBase64Quantum = function () {
	  var x = this.decodeBase64Digit(this.p);
	  var y = this.decodeBase64Digit(this.q);
	  if (this.r !== 61/*'='*/) {
	    var z = this.decodeBase64Digit(this.r);
	    if (this.s !== 61/*'='*/) {
	      var w = this.decodeBase64Digit(this.s);
	      this.appendByte((x << 2) | (y >>> 4));
	      this.appendByte((y << 4) | (z >>> 2));
	      this.appendByte((z << 6) | w);
	    }
	    else {
	      this.appendByte((x << 2) | (y >>> 4));
	      this.appendByte((y << 4) | (z >>> 2));
	    }
	  }
	  else {
	    if (this.s !== 61/*'='*/) throw 'incomplete base64 quantum';
	    this.appendByte((x << 2) | (y >>> 4));
	  }
	};
	DataBuilder.prototype.appendBase64Char = function (c) {
	  if (this.p === 0) this.p = c;
	  else if (this.q === 0) this.q = c;
	  else if (this.r === 0) this.r = c;
	  else {
	    this.s = c;
	    this.decodeBase64Quantum();
	    this.s = 0;
	    this.r = 0;
	    this.q = 0;
	    this.p = 0;
	  }
	};
	DataBuilder.prototype.state = function (value) {
	  if (!this.buffer) this.buffer = new Uint8Array(0);
	  else if (this.buffer.length !== this.offset) {
	    var array = new Uint8Array(this.offset);
	    array.set(this.buffer.subarray(0, this.offset));
	    this.buffer = array;
	  }
	  this.aliased = true;
	  return this.buffer;
	};


	function isSpace(c) {
	  return c === 0x20 || c === 0x9;
	}
	function isNewline(c) {
	  return c === 0xA || c === 0xD;
	}
	function isWhitespace(c) {
	  return isSpace(c) || isNewline(c);
	}
	function isNameStartChar(c) {
	  return (
	    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||
	    c === 95/*'_'*/ ||
	    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||
	    c >= 0xC0 && c <= 0xD6 ||
	    c >= 0xD8 && c <= 0xF6 ||
	    c >= 0xF8 && c <= 0x2FF ||
	    c >= 0x370 && c <= 0x37D ||
	    c >= 0x37F && c <= 0x1FFF ||
	    c >= 0x200C && c <= 0x200D ||
	    c >= 0x2070 && c <= 0x218F ||
	    c >= 0x2C00 && c <= 0x2FEF ||
	    c >= 0x3001 && c <= 0xD7FF ||
	    c >= 0xF900 && c <= 0xFDCF ||
	    c >= 0xFDF0 && c <= 0xFFFD ||
	    c >= 0x10000 && c <= 0xEFFFF);
	}
	function isNameChar(c) {
	  return (
	    c === 45/*'-'*/ ||
	    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||
	    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||
	    c === 95/*'_'*/ ||
	    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||
	    c === 0xB7 ||
	    c >= 0xC0 && c <= 0xD6 ||
	    c >= 0xD8 && c <= 0xF6 ||
	    c >= 0xF8 && c <= 0x37D ||
	    c >= 0x37F && c <= 0x1FFF ||
	    c >= 0x200C && c <= 0x200D ||
	    c >= 0x203F && c <= 0x2040 ||
	    c >= 0x2070 && c <= 0x218F ||
	    c >= 0x2C00 && c <= 0x2FEF ||
	    c >= 0x3001 && c <= 0xD7FF ||
	    c >= 0xF900 && c <= 0xFDCF ||
	    c >= 0xFDF0 && c <= 0xFFFD ||
	    c >= 0x10000 && c <= 0xEFFFF);
	}
	function isBase64Char(c) {
	  return (
	    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||
	    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||
	    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||
	    c === 43/*'+'*/ || c === 45/*'-'*/ ||
	    c === 47/*'/'*/ || c === 95/*'_'*/);
	}


	function DocumentParser(value) {
	  StringIteratee.call(this);
	  this.value = value || new BlockParser();
	}
	DocumentParser.prototype = Object.create(StringIteratee.prototype);
	DocumentParser.prototype.constructor = DocumentParser;
	DocumentParser.prototype.feed = function (input) {
	  var value = this.value;
	  while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	  if (value.isError()) return value;
	  if (value.isDone()) {
	    if (!input.isEmpty()) return new StringIteratee.Error({found: input.head()});
	    else if (input.isDone()) return value;
	  }
	  return new DocumentParser(value);
	};


	function BlockParser(builder, key, value, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.key = key || null;
	  this.value = value || null;
	  this.s = s || 1;
	}
	BlockParser.prototype = Object.create(StringIteratee.prototype);
	BlockParser.prototype.constructor = BlockParser;
	BlockParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var value = this.value;
	  var key = this.key;
	  var builder = this.builder || new ValueBuilder();
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 1) {
	      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();
	      if (!input.isEmpty()) {
	        if (c === 64/*'@'*/ || c === 123/*'{'*/ || c === 91/*'['*/ || isNameStartChar(c) ||
	            c === 34/*'"'*/ || c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 37/*'%'*/)
	          s = 2;
	        else return new StringIteratee.Error({expected: 'block value', found: c});
	      }
	      else if (input.isDone()) return new StringIteratee.Done(builder.state());
	    }
	    if (s === 2) {
	      key = key || new BlockValueParser();
	      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);
	      if (key.isDone()) s = 3;
	      else if (key.isError()) return key;
	    }
	    if (s === 3) {
	      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();
	      if (!input.isEmpty()) {
	        if (c === 58/*':'*/) {
	          input.step();
	          s = 4;
	        }
	        else {
	          builder.appendValue(key.state());
	          key = null;
	          s = 6;
	        }
	      }
	      else if (input.isDone()) {
	        builder.appendValue(key.state());
	        return new StringIteratee.Done(builder.state());
	      }
	    }
	    if (s === 4) {
	      while (!input.isEmpty() && isSpace(input.head())) input.step();
	      if (!input.isEmpty()) s = 5;
	      else if (input.isDone()) {
	        builder.appendField(key.state(), null);
	        return new StringIteratee.Done(builder.state());
	      }
	    }
	    if (s === 5) {
	      value = value || new BlockValueParser();
	      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	      if (value.isDone()) {
	        builder.appendField(key.state(), value.state());
	        key = null;
	        value = null;
	        s = 6;
	      }
	      else if (value.isError()) return value;
	    }
	    if (s === 6) {
	      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();
	      if (!input.isEmpty()) {
	        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {
	          input.step();
	          s = 1;
	        }
	        else return new StringIteratee.Done(builder.state());
	      }
	      else if (input.isDone()) return new StringIteratee.Done(builder.state());
	    }
	  }
	  return new BlockParser(builder, key, value, s);
	};


	function AttrParser(ident, value, s) {
	  StringIteratee.call(this);
	  this.ident = ident || null;
	  this.value = value || new BlockParser();
	  this.s = s || 1;
	}
	AttrParser.prototype = Object.create(StringIteratee.prototype);
	AttrParser.prototype.constructor = AttrParser;
	AttrParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var value = this.value;
	  var ident = this.ident;
	  var field;
	  if (s === 1) {
	    if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {
	      input.step();
	      s = 2;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\'@\'', found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 2) {
	    if (!ident) ident = new IdentParser(new StringBuilder('@'));
	    ident = ident.feed(input);
	    if (ident.isDone()) s = 3;
	    else if (ident.isError()) return ident;
	  }
	  if (s === 3) {
	    if (!input.isEmpty() && input.head() === 40/*'('*/) {
	      input.step();
	      s = 4;
	    }
	    else if (!input.isEmpty() || input.isDone()) {
	      field = {};
	      field[ident.state()] = null;
	      return new StringIteratee.Done(field);
	    }
	  }
	  if (s === 4) {
	    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();
	    if (!input.isEmpty()) {
	      if (c === 41/*')'*/) {
	        input.step();
	        field = {};
	        field[ident.state()] = null;
	        return new StringIteratee.Done(field);
	      }
	      else s = 5;
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 5) {
	    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	    if (value.isDone()) s = 6;
	    else if (value.isError()) return value;
	  }
	  if (s === 6) {
	    while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();
	    if (!input.isEmpty()) {
	      if (c === 41/*')'*/) {
	        input.step();
	        field = {};
	        field[ident.state()] = value.state();
	        return new StringIteratee.Done(field);
	      }
	      else return new StringIteratee.Error({expected: '\')\'', found: c});
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  return new AttrParser(ident, value, s);
	};


	function BlockValueParser(builder, field, value, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.field = field || null;
	  this.value = value || null;
	  this.s = s || 1;
	}
	BlockValueParser.prototype = Object.create(StringIteratee.prototype);
	BlockValueParser.prototype.constructor = BlockValueParser;
	BlockValueParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var value = this.value;
	  var field = this.field;
	  var builder = this.builder;
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 1) {
	      if (!input.isEmpty()) {
	        c = input.head();
	        if (c === 64/*'@'*/) {
	          field = new AttrParser();
	          s = 2;
	        }
	        else if (c === 123/*'{'*/) {
	          builder = builder || new RecordBuilder();
	          value = new RecordParser(builder);
	          s = 5;
	        }
	        else if (c === 91/*'['*/) {
	          builder = builder || new RecordBuilder();
	          value = new MarkupParser(builder);
	          s = 5;
	        }
	        else if (isNameStartChar(c)) {
	          value = new IdentParser();
	          s = 4;
	        }
	        else if (c === 34/*'"'*/) {
	          value = new StringParser();
	          s = 4;
	        }
	        else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {
	          value = new NumberParser();
	          s = 4;
	        }
	        else if (c === 37/*'%'*/) {
	          value = new DataParser();
	          s = 4;
	        }
	        else if (!builder) return new StringIteratee.Done(undefined);
	        else return new StringIteratee.Done(builder.state());
	      }
	      else if (input.isDone()) {
	        if (!builder) return new StringIteratee.Done(undefined);
	        else return new StringIteratee.Done(builder.state());
	      }
	    }
	    if (s === 2) {
	      while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);
	      if (field.isDone()) {
	        builder = builder || new ValueBuilder();
	        builder.appendFields(field.state());
	        field = null;
	        s = 3;
	      }
	      else if (field.isError()) return field;
	    }
	    if (s === 3) {
	      while (!input.isEmpty() && isSpace(input.head())) input.step();
	      if (!input.isEmpty()) s = 1;
	      else if (input.isDone()) return new StringIteratee.Done(builder.state());
	    }
	    if (s === 4) {
	      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	      if (value.isDone()) {
	        builder = builder || new ValueBuilder();
	        builder.appendValue(value.state());
	        value = null;
	        s = 6;
	      }
	      else if (value.isError()) return value;
	    }
	    if (s === 5) {
	      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	      if (value.isDone()) {
	        value = null;
	        s = 6;
	      }
	      else if (value.isError()) return value;
	    }
	    if (s === 6) {
	      while (!input.isEmpty() && isSpace(input.head())) input.step();
	      if (!input.isEmpty() && input.head() === 64/*'@'*/) s = 1;
	      else return new StringIteratee.Done(builder.state());
	    }
	  }
	  return new BlockValueParser(builder, field, value, s);
	};


	function InlineValueParser(builder, field, value, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.field = field || null;
	  this.value = value || null;
	  this.s = s || 1;
	}
	InlineValueParser.prototype = Object.create(StringIteratee.prototype);
	InlineValueParser.prototype.constructor = InlineValueParser;
	InlineValueParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var value = this.value;
	  var field = this.field;
	  var builder = this.builder;
	  if (s === 1) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 64/*'@'*/) {
	        field = new AttrParser();
	        s = 2;
	      }
	      else if (c === 123/*'{'*/) {
	        if (builder) {
	          value = new RecordParser(builder);
	          s = 5;
	        }
	        else {
	          value = new RecordParser();
	          s = 4;
	        }
	      }
	      else if (c === 91/*'['*/) {
	        if (builder) {
	          value = new MarkupParser(builder);
	          s = 5;
	        }
	        else {
	          value = new MarkupParser();
	          s = 4;
	        }
	      }
	      else if (!builder) return new StringIteratee.Done(null);
	      else return new StringIteratee.Done(builder.state());
	    }
	    else if (input.isDone()) {
	      if (!builder) return new StringIteratee.Done(null);
	      else return new StringIteratee.Done(builder.state());
	    }
	  }
	  if (s === 2) {
	    while ((!input.isEmpty() || input.isDone()) && field.isCont()) field = field.feed(input);
	    if (field.isDone()) {
	      builder = builder || new ValueBuilder();
	      builder.appendFields(field.state());
	      field = null;
	      s = 3;
	    }
	    else if (field.isError()) return field;
	  }
	  if (s === 3) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 123/*'{'*/) {
	        value = new RecordParser(builder);
	        s = 5;
	      }
	      else if (c === 91/*'['*/) {
	        value = new MarkupParser(builder);
	        s = 5;
	      }
	      else return new StringIteratee.Done(builder.state());
	    }
	    else if (input.isDone()) return new StringIteratee.Done(builder.state());
	  }
	  if (s === 4) {
	    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	    if (value.isDone()) {
	      builder = builder || new ValueBuilder();
	      builder.appendValue(value.state());
	      return new StringIteratee.Done(builder.state());
	    }
	    else if (value.isError()) return value;
	  }
	  if (s === 5) {
	    while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	    if (value.isDone()) return new StringIteratee.Done(builder.state());
	    else if (value.isError()) return value;
	  }
	  return new InlineValueParser(builder, field, value, s);
	};


	function RecordParser(builder, key, value, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.key = key || null;
	  this.value = value || null;
	  this.s = s || 1;
	}
	RecordParser.prototype = Object.create(StringIteratee.prototype);
	RecordParser.prototype.constructor = RecordParser;
	RecordParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var value = this.value;
	  var key = this.key;
	  var builder = this.builder || new RecordBuilder();
	  if (s === 1) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 123/*'{'*/) {
	        input.step();
	        s = 2;
	      }
	      else return new StringIteratee.Error({expected: '\'{\'', found: c});
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 2) {
	      while (!input.isEmpty() && (c = input.head(), isWhitespace(c))) input.step();
	      if (!input.isEmpty()) {
	        if (c === 125/*'}'*/) {
	          input.step();
	          return new StringIteratee.Done(builder.state());
	        }
	        else s = 3;
	      }
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      key = key || new BlockValueParser();
	      while ((!input.isEmpty() || input.isDone()) && key.isCont()) key = key.feed(input);
	      if (key.isDone()) s = 4;
	      else if (key.isError()) return key;
	    }
	    if (s === 4) {
	      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();
	      if (!input.isEmpty()) {
	        if (c === 58/*':'*/) {
	          input.step();
	          s = 5;
	        }
	        else {
	          builder.appendValue(key.state());
	          key = null;
	          s = 7;
	        }
	      }
	      else if (input.isDone()) {
	        builder.appendValue(key.state());
	        return new StringIteratee.Done(builder.state());
	      }
	    }
	    if (s === 5) {
	      while (!input.isEmpty() && isSpace(input.head())) input.step();
	      if (!input.isEmpty()) s = 6;
	      else if (input.isDone()) {
	        builder.appendField(key, null);
	        return new StringIteratee.Done(builder.state());
	      }
	    }
	    if (s === 6) {
	      value = value || new BlockValueParser();
	      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	      if (value.isDone()) {
	        builder.appendField(key.state(), value.state());
	        key = null;
	        value = null;
	        s = 7;
	      }
	      else if (value.isError()) return value;
	    }
	    if (s === 7) {
	      while (!input.isEmpty() && (c = input.head(), isSpace(c))) input.step();
	      if (!input.isEmpty()) {
	        if (c === 44/*','*/ || c === 59/*';'*/ || isNewline(c)) {
	          input.step();
	          s = 2;
	        }
	        else if (c === 125/*'}'*/) {
	          input.step();
	          return new StringIteratee.Done(builder.state());
	        }
	       else return new StringIteratee.Error({expected: '\'}\', \';\', \',\', or newline', found: c});
	      }
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new RecordParser(builder, key, value, s);
	};


	function MarkupParser(builder, text, value, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.text = text || null;
	  this.value = value || null;
	  this.s = s || 1;
	}
	MarkupParser.prototype = Object.create(StringIteratee.prototype);
	MarkupParser.prototype.constructor = MarkupParser;
	MarkupParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var value = this.value;
	  var text = this.text;
	  var builder = this.builder;
	  if (s === 1) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 91/*'['*/) {
	        input.step();
	        s = 2;
	      }
	      else return new StringIteratee.Error({expected: '\'[\'', found: c});
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 2) {
	      while (!input.isEmpty() && (c = input.head(),
	          c !== 64/*'@'*/ &&
	          c !== 91/*'['*/ &&
	          c !== 92/*'\\'*/ &&
	          c !== 93/*']'*/ &&
	          c !== 123/*'{'*/ &&
	          c !== 125/*'}'*/)) {
	        input.step();
	        text = text || new StringBuilder();
	        text.append(c);
	      }
	      if (!input.isEmpty()) {
	        if (c === 93/*']'*/) {
	          input.step();
	          builder = builder || new RecordBuilder();
	          if (text) builder.appendValue(text.state());
	          return new StringIteratee.Done(builder.state());
	        }
	        else if (c === 64/*'@'*/) {
	          builder = builder || new RecordBuilder();
	          if (text) {
	            builder.appendValue(text.state());
	            text = null;
	          }
	          value = new InlineValueParser();
	          s = 3;
	        }
	        else if (c === 123/*'{'*/) {
	          builder = builder || new RecordBuilder();
	          if (text) {
	            builder.appendValue(text.state());
	            text = null;
	          }
	          value = new RecordParser(builder);
	          s = 4;
	        }
	        else if (c === 91/*'['*/) {
	          builder = builder || new RecordBuilder();
	          if (text) {
	            builder.appendValue(text.state());
	            text = null;
	          }
	          value = new MarkupParser(builder);
	          s = 4;
	        }
	        else if (c === 92/*'\\'*/) {
	          input.step();
	          s = 5;
	        }
	        else new StringIteratee.Error({found: c});
	      }
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	      if (value.isDone()) {
	        builder.appendValue(value.state());
	        value = null;
	        s = 2;
	      }
	      else if (value.isError()) return value;
	    }
	    if (s === 4) {
	      while ((!input.isEmpty() || input.isDone()) && value.isCont()) value = value.feed(input);
	      if (value.isDone()) {
	        value = null;
	        s = 2;
	      }
	      else if (value.isError()) return value;
	    }
	    if (s === 5) {
	      if (!input.isEmpty()) {
	        c = input.head();
	        text = text || new StringBuilder();
	        if (c === 34/*'"'*/ ||
	            c === 47/*'/'*/ ||
	            c === 64/*'@'*/ ||
	            c === 91/*'['*/ ||
	            c === 92/*'\\'*/ ||
	            c === 93/*']'*/ ||
	            c === 123/*'{'*/ ||
	            c === 125/*'}'*/) {
	          input.step();
	          text.append(c);
	          s = 2;
	        }
	        else if (c === 98/*'b'*/) {
	          input.step();
	          text.append(8/*'\b'*/);
	          s = 2;
	        }
	        else if (c === 102/*'f'*/) {
	          input.step();
	          text.append(12/*'\f'*/);
	          s = 2;
	        }
	        else if (c === 110/*'n'*/) {
	          input.step();
	          text.append(10/*'\n'*/);
	          s = 2;
	        }
	        else if (c === 114/*'r'*/) {
	          input.step();
	          text.append(13/*'\r'*/);
	          s = 2;
	        }
	        else if (c === 116/*'t'*/) {
	          input.step();
	          text.append(9/*'\t'*/);
	          s = 2;
	        }
	        else return new StringIteratee.Error({expected: 'escape character', found: c});
	      }
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new MarkupParser(builder, text, value, s);
	};


	function IdentParser(builder, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.s = s || 1;
	}
	IdentParser.prototype = Object.create(StringIteratee.prototype);
	IdentParser.prototype.constructor = IdentParser;
	IdentParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var builder = this.builder;
	  if (s === 1) {
	    if (!input.isEmpty() && (c = input.head(), isNameStartChar(c))) {
	      builder = builder || new StringBuilder();
	      input.step();
	      builder.append(c);
	      s = 2;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'identitifer', found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 2) {
	    while (!input.isEmpty() && (c = input.head(), isNameChar(c))) {
	      input.step();
	      builder.append(c);
	    }
	    if (!input.isEmpty() || input.isDone()) {
	      var value = builder.state();
	      if (value === 'true') value = true;
	      else if (value === 'false') value = false;
	      return new StringIteratee.Done(value);
	    }
	  }
	  return new IdentParser(builder, s);
	};


	function StringParser(text, s) {
	  StringIteratee.call(this);
	  this.text = text || null;
	  this.s = s || 1;
	}
	StringParser.prototype = Object.create(StringIteratee.prototype);
	StringParser.prototype.constructor = StringParser;
	StringParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var text = this.text;
	  if (s === 1) {
	    if (!input.isEmpty() && (c = input.head(), c === 34/*'"'*/)) {
	      input.step();
	      s = 2;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\'"\'', found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 2) {
	      text = text || new StringBuilder();
	      while (!input.isEmpty() && (c = input.head(), c !== 34/*'"'*/ && c !== 92/*'\\'*/)) {
	        input.step();
	        text.append(c);
	      }
	      if (!input.isEmpty()) {
	        if (c === 34/*'"'*/) {
	          input.step();
	          return new StringIteratee.Done(text.state());
	        }
	        else if (c === 92/*'\\'*/) {
	          input.step();
	          s = 3;
	        }
	      }
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      if (!input.isEmpty()) {
	        c = input.head();
	        if (c === 34/*'"'*/ ||
	            c === 47/*'/'*/ ||
	            c === 64/*'@'*/ ||
	            c === 91/*'['*/ ||
	            c === 92/*'\\'*/ ||
	            c === 93/*']'*/ ||
	            c === 123/*'{'*/ ||
	            c === 125/*'}'*/) {
	          input.step();
	          text.append(c);
	          s = 2;
	        }
	        else if (c === 98/*'b'*/) {
	          input.step();
	          text.append(8/*'\b'*/);
	          s = 2;
	        }
	        else if (c === 102/*'f'*/) {
	          input.step();
	          text.append(12/*'\f'*/);
	          s = 2;
	        }
	        else if (c === 110/*'n'*/) {
	          input.step();
	          text.append(10/*'\n'*/);
	          s = 2;
	        }
	        else if (c === 114/*'r'*/) {
	          input.step();
	          text.append(13/*'\r'*/);
	          s = 2;
	        }
	        else if (c === 116/*'t'*/) {
	          input.step();
	          text.append(9/*'\t'*/);
	          s = 2;
	        }
	        else return new StringIteratee.Error({expected: 'escape character', found: c});
	      }
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new StringParser(text, s);
	};


	function NumberParser(builder, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.s = s || 1;
	}
	NumberParser.prototype = Object.create(StringIteratee.prototype);
	NumberParser.prototype.constructor = NumberParser;
	NumberParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var builder = this.builder || new StringBuilder();
	  if (s === 1) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 45/*'-'*/) {
	        input.step();
	        builder.append(c);
	      }
	      s = 2;
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 2) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 48/*'0'*/) {
	        input.step();
	        builder.append(c);
	        s = 4;
	      }
	      else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {
	        input.step();
	        builder.append(c);
	        s = 3;
	      }
	      else return new StringIteratee.Error({expected: 'digit', found: c});
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 3) {
	    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {
	      input.step();
	      builder.append(c);
	    }
	    if (!input.isEmpty()) s = 4;
	    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));
	  }
	  if (s === 4) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 46/*'.'*/) {
	        input.step();
	        builder.append(c);
	        s = 5;
	      }
	      else if (c === 69/*'E'*/ || c === 101/*'e'*/) {
	        input.step();
	        builder.append(c);
	        s = 8;
	      }
	      else return new StringIteratee.Done(Number(builder.state()));
	    }
	    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));
	  }
	  if (s === 5) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {
	        input.step();
	        builder.append(c);
	        s = 6;
	      }
	      else return new StringIteratee.Error({expected: 'digit', found: c});
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 6) {
	    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {
	      input.step();
	      builder.append(c);
	    }
	    if (!input.isEmpty()) s = 7;
	    else if (input.isDone()) return new StringIteratee.Done(Number(builder.state()));
	  }
	  if (s === 7) {
	    c = input.head();
	    if (c === 69/*'E'*/ || c === 101/*'e'*/) {
	      input.step();
	      builder.append(c);
	      s = 8;
	    }
	    else return new StringIteratee.Done(Number(builder.state()));
	  }
	  if (s === 8) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 43/*'+'*/ || c === 45/*'-'*/) {
	        input.step();
	        builder.append(c);
	      }
	      s = 9;
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 9) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {
	        input.step();
	        builder.append(c);
	        s = 10;
	      }
	      else return new StringIteratee.Error({expected: 'digit', found: c});
	    }
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 10) {
	    while (!input.isEmpty() && (c = input.head(), c >= 48/*'0'*/ && c <= 57/*'9'*/)) {
	      input.step();
	      builder.append(c);
	    }
	    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(Number(builder.state()));
	  }
	  return new NumberParser(builder, s);
	};


	function DataParser(data, s) {
	  StringIteratee.call(this);
	  this.data = data || null;
	  this.s = s || 1;
	}
	DataParser.prototype = Object.create(StringIteratee.prototype);
	DataParser.prototype.constructor = DataParser;
	DataParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var data = this.data || new DataBuilder();
	  if (s === 1) {
	    if (!input.isEmpty() && (c = input.head(), c === 37/*'%'*/)) {
	      input.step();
	      s = 2;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\'%\'', found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 2) {
	      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {
	        input.step();
	        data.appendBase64Char(c);
	        s = 3;
	      }
	      else if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(data.state());
	    }
	    if (s === 3) {
	      if (!input.isEmpty() && (c = input.head(), isBase64Char(c))) {
	        input.step();
	        data.appendBase64Char(c);
	        s = 4;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 4) {
	      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {
	        input.step();
	        data.appendBase64Char(c);
	        if (c !== 61/*'='*/) s = 5;
	        else s = 6;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 5) {
	      if (!input.isEmpty() && (c = input.head(), isBase64Char(c) || c === 61/*'='*/)) {
	        input.step();
	        data.appendBase64Char(c);
	        if (c !== 61/*'='*/) s = 2;
	        else return new StringIteratee.Done(data.state());
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'base64 digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    else if (s === 6) {
	      if (!input.isEmpty() && (c = input.head(), c === 61/*'='*/)) {
	        input.step();
	        data.appendBase64Char(c);
	        return new StringIteratee.Done(data.state());
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\'=\'', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new DataParser(data, s);
	};


	function ReconWriter(builder) {
	  this.builder = builder || new StringBuilder();
	}
	ReconWriter.prototype.writeValue = function (value) {
	  if (typeof value === 'string') this.writeText(value);
	  else if (typeof value === 'number') this.writeNumber(value);
	  else if (typeof value === 'boolean') this.writeBool(value);
	  else if (value instanceof Uint8Array) this.writeData(value);
	  else if (isRecord(value)) this.writeRecord(value);
	  else if (isObject(value)) this.writeRecord(coerceObject(value));
	};
	ReconWriter.prototype.writeItem = function (item) {
	  if (isField(item)) this.writeSlots(item);
	  else this.writeValue(item);
	};
	ReconWriter.prototype.writeAttrs = function (attrs) {
	  var keys = Object.keys(attrs);
	  for (var i = 0, n = keys.length; i < n; i += 1) {
	    var key = keys[i];
	    if (key.length > 0 && key.charCodeAt(0) === 64/*'@'*/) {
	      var value = attrs[key];
	      this.writeAttr(key.substring(1), value);
	    }
	  }
	};
	ReconWriter.prototype.writeAttr = function (key, value) {
	  this.builder.append(64/*'@'*/);
	  this.writeIdent(key);
	  if (value !== null) {
	    this.builder.append(40/*'('*/);
	    this.writeBlock(value);
	    this.builder.append(41/*')'*/);
	  }
	};
	ReconWriter.prototype.writeSlots = function (slots) {
	  var keys = Object.keys(slots);
	  var key;
	  var value;
	  var n = keys.length;
	  if (n === 2 && slots.$key !== undefined && slots.$value !== undefined) {
	    key = slots.$key;
	    value = slots.$value;
	    this.writeSlot(key, value);
	  }
	  else for (var i = 0; i < n; i += 1) {
	    key = keys[i];
	    value = slots[key];
	    if (i > 0) this.builder.append(44/*','*/);
	    this.writeSlot(key, value);
	  }
	};
	ReconWriter.prototype.writeSlot = function (key, value) {
	  this.writeValue(key);
	  this.builder.append(58/*':'*/);
	  if (value !== null) this.writeValue(value);
	};
	ReconWriter.prototype.writeBlock = function (value) {
	  if (!isObject(value)) this.writeValue(value);
	  else {
	    if (!isRecord(value)) value = coerceObject(value);
	    if (value.length > 0) this.writeItems(value, isBlockSafe(value), false);
	    else {
	      this.builder.append(123/*'{'*/);
	      this.builder.append(125/*'}'*/);
	    }
	  }
	};
	ReconWriter.prototype.writeRecord = function (record) {
	  if (record.length > 0) this.writeItems(record, false, false);
	  else {
	    this.builder.append(123/*'{'*/);
	    this.builder.append(125/*'}'*/);
	  }
	};
	ReconWriter.prototype.writeItems = function (items, inBlock, inMarkup) {
	  var i = 0;
	  var n = items.length;
	  var inBraces = false;
	  var inBrackets = false;
	  var first = true;
	  while (i < n) {
	    var item = items[i];
	    i += 1;
	    if (inBrackets && isAttr(item)) {
	      if (inBraces) {
	        this.builder.append(125/*'}'*/);
	        inBraces = false;
	      }
	      this.builder.append(93/*']'*/);
	      inBrackets = false;
	    }
	    if (isAttr(item)) {
	      if (inBraces) {
	        this.builder.append(125/*'}'*/);
	        inBraces = false;
	      }
	      else if (inBrackets) {
	        this.builder.append(93/*']'*/);
	        inBrackets = false;
	      }
	      this.writeAttrs(item);
	      first = false;
	    }
	    else if (inBrackets && typeof item === 'string') {
	      if (inBraces) {
	        this.builder.append(125/*'}'*/);
	        inBraces = false;
	      }
	      this.writeMarkupText(item);
	    }
	    else if (inBraces) {
	      if (!first) this.builder.append(44/*','*/);
	      else first = false;
	      this.writeItem(item);
	    }
	    else if (inBrackets) {
	      if (isRecord(item) && isMarkupSafe(item)) {
	        this.writeItems(item, false, true);
	        if (i < n && typeof items[i] === 'string') {
	          this.writeMarkupText(items[i]);
	          i += 1;
	        }
	        else if (i < n && !isAttr(items[i])) {
	          this.builder.append(123/*'{'*/);
	          inBraces = true;
	          first = true;
	        }
	        else {
	          this.builder.append(93/*']'*/);
	          inBrackets = false;
	        }
	      }
	      else {
	        this.builder.append(123/*'{'*/);
	        this.writeItem(item);
	        inBraces = true;
	        first = false;
	      }
	    }
	    else if (typeof item === 'string' &&
	        i < n && !isField(items[i]) &&
	        typeof items[i] !== 'string' && typeof items[i] !== 'boolean') {
	      this.builder.append(91/*'['*/);
	      this.writeMarkupText(item);
	      inBrackets = true;
	    }
	    else if (inBlock && !inBraces) {
	      if (!first) this.builder.append(44/*','*/);
	      else first = false;
	      this.writeItem(item);
	    }
	    else if (inMarkup && typeof item === 'string' && i >= n) {
	      this.builder.append(91/*'['*/);
	      this.writeMarkupText(item);
	      this.builder.append(93/*']'*/);
	    }
	    else if (!inMarkup && !isField(item) && !isRecord(item) &&
	            (!first && i >= n || i < n && isAttr(items[i]))) {
	      if (!first && (typeof item === 'string' && this.isIdent(item) ||
	                     typeof item === 'number' ||
	                     typeof item === 'boolean'))
	        this.builder.append(32/*' '*/);
	      this.writeValue(item);
	    }
	    else {
	      this.builder.append(123/*'{'*/);
	      this.writeItem(item);
	      inBraces = true;
	      first = false;
	    }
	  }
	  if (inBraces) this.builder.append(125/*'}'*/);
	  if (inBrackets) this.builder.append(93/*']'*/);
	};
	ReconWriter.prototype.isIdent = function (text) {
	  var cs = new StringIterator(text);
	  if (cs.isEmpty() || !isNameStartChar(cs.head())) return false;
	  cs.step();
	  while (!cs.isEmpty() && isNameChar(cs.head())) cs.step();
	  return cs.isEmpty();
	};
	ReconWriter.prototype.writeText = function (text) {
	  if (this.isIdent(text)) this.writeIdent(text);
	  else this.writeString(text);
	};
	ReconWriter.prototype.writeIdent = function (ident) {
	  this.builder.appendString(ident);
	};
	ReconWriter.prototype.writeString = function (string) {
	  var cs = new StringIterator(string);
	  this.builder.append(34/*'"'*/);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    switch (c) {
	      case 34/*'"'*/:
	      case 92/*'\\'*/: this.builder.append(92/*'\\'*/); this.builder.append(c); break;
	      case 8/*'\b'*/: this.builder.append(92/*'\\'*/); this.builder.append(98/*'b'*/); break;
	      case 12/*'\f'*/: this.builder.append(92/*'\\'*/); this.builder.append(102/*'f'*/); break;
	      case 10/*'\n'*/: this.builder.append(92/*'\\'*/); this.builder.append(110/*'n'*/); break;
	      case 13/*'\r'*/: this.builder.append(92/*'\\'*/); this.builder.append(114/*'r'*/); break;
	      case 9/*'\t'*/: this.builder.append(92/*'\\'*/); this.builder.append(116/*'t'*/); break;
	      default: this.builder.append(c);
	    }
	    cs.step();
	  }
	  this.builder.append(34/*'"'*/);
	};
	ReconWriter.prototype.writeMarkupText = function (text) {
	  var cs = new StringIterator(text);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    switch (c) {
	      case 64/*'@'*/:
	      case 91/*'['*/:
	      case 92/*'\\'*/:
	      case 93/*']'*/:
	      case 123/*'{'*/:
	      case 125/*'}'*/: this.builder.append(92/*'\\'*/); this.builder.append(c); break;
	      case 8/*'\b'*/: this.builder.append(92/*'\\'*/); this.builder.append(98/*'b'*/); break;
	      case 12/*'\f'*/: this.builder.append(92/*'\\'*/); this.builder.append(102/*'f'*/); break;
	      case 10/*'\n'*/: this.builder.append(92/*'\\'*/); this.builder.append(110/*'n'*/); break;
	      case 13/*'\r'*/: this.builder.append(92/*'\\'*/); this.builder.append(114/*'r'*/); break;
	      case 9/*'\t'*/: this.builder.append(92/*'\\'*/); this.builder.append(116/*'t'*/); break;
	      default: this.builder.append(c);
	    }
	    cs.step();
	  }
	};
	ReconWriter.prototype.writeNumber = function (number) {
	  this.builder.appendString(number.toString());
	};
	ReconWriter.prototype.writeBool = function (bool) {
	  this.builder.appendString(bool.toString());
	};
	ReconWriter.prototype.writeData = function (data) {
	  function encodeBase64Digit(x) {
	    if (x >= 0 && x < 26) return x + 65/*'A'*/;
	    else if (x >= 26 && x < 52) return x + 71/*('a' - 26)*/;
	    else if (x >= 52 && x < 62) return x - 4/*-('0' - 52)*/;
	    else if (x === 62) return 43/*'+'*/;
	    else if (x === 63) return 47/*'/'*/;
	  }
	  this.builder.append(37/*'%'*/);
	  var i = 0;
	  var n = data.length;
	  var x, y, z;
	  while (i + 2 < n) {
	    x = data[i];
	    y = data[i + 1];
	    z = data[i + 2];
	    this.builder.append(encodeBase64Digit(x >>> 2));
	    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));
	    this.builder.append(encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F));
	    this.builder.append(encodeBase64Digit(z & 0x3F));
	    i += 3;
	  }
	  if (i + 1 < n) {
	    x = data[i];
	    y = data[i + 1];
	    this.builder.append(encodeBase64Digit(x >>> 2));
	    this.builder.append(encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F));
	    this.builder.append(encodeBase64Digit((y << 2) & 0x3F));
	    this.builder.append(61/*'='*/);
	    i += 2;
	  }
	  else if (i < n) {
	    x = data[i];
	    this.builder.append(encodeBase64Digit(x >>> 2));
	    this.builder.append(encodeBase64Digit((x << 4) & 0x3F));
	    this.builder.append(61/*'='*/);
	    this.builder.append(61/*'='*/);
	    i += 1;
	  }
	};
	ReconWriter.prototype.state = function () {
	  return this.builder.state();
	};


	function isUnreservedChar(c) {
	  return (
	    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||
	    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||
	    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||
	    c === 45/*'-'*/ || c === 46/*'.'*/ ||
	    c === 95/*'_'*/ || c === 126/*'~'*/);
	}

	function isSubDelimChar(c) {
	  return (
	    c === 33/*'!'*/ || c === 36/*'$'*/ ||
	    c === 38/*'&'*/ || c === 40/*'('*/ ||
	    c === 41/*')'*/ || c === 42/*'*'*/ ||
	    c === 43/*'+'*/ || c === 44/*','*/ ||
	    c === 59/*';'*/ || c === 61/*'='*/ ||
	    c === 39/*'\''*/);
	}

	function isSchemeChar(c) {
	  return (
	    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||
	    c >= 97/*'a'*/ && c <= 122/*'z'*/ ||
	    c >= 48/*'0'*/ && c <= 57/*'9'*/ ||
	    c === 43/*'+'*/ || c === 45/*'-'*/ ||
	    c === 46/*'.'*/);
	}

	function isUserInfoChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    isSubDelimChar(c) ||
	    c === 58/*':'*/);
	}

	function isUserChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    isSubDelimChar(c));
	}

	function isHostChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    isSubDelimChar(c));
	}

	function isPathChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    isSubDelimChar(c) ||
	    c === 58/*':'*/ || c === 64/*'@'*/);
	}

	function isQueryChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    isSubDelimChar(c) ||
	    c === 47/*'/'*/ || c === 58/*':'*/ ||
	    c === 63/*'?'*/ || c === 64/*'@'*/);
	}

	function isParamChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    c === 33/*'!'*/ || c === 36/*'$'*/ ||
	    c === 40/*'('*/ || c === 41/*')'*/ ||
	    c === 42/*'*'*/ || c === 43/*'+'*/ ||
	    c === 44/*','*/ || c === 47/*'/'*/ ||
	    c === 58/*':'*/ || c === 59/*';'*/ ||
	    c === 63/*'?'*/ || c === 64/*'@'*/ ||
	    c === 39/*'\''*/);
	}

	function isFragmentChar(c) {
	  return (
	    isUnreservedChar(c) ||
	    isSubDelimChar(c) ||
	    c === 47/*'/'*/ || c === 58/*':'*/ ||
	    c === 63/*'?'*/ || c === 64/*'@'*/);
	}

	function isAlpha(c) {
	  return (
	    c >= 65/*'A'*/ && c <= 90/*'Z'*/ ||
	    c >= 97/*'a'*/ && c <= 122/*'z'*/);
	}

	function isDigit(c) {
	  return c >= 48/*'0'*/ && c <= 57/*'9'*/;
	}

	function isHexChar(c) {
	  return (
	    c >= 65/*'A'*/ && c <= 70/*'F'*/ ||
	    c >= 97/*'a'*/ && c <= 102/*'f'*/ ||
	    c >= 48/*'0'*/ && c <= 57/*'9'*/);
	}

	function decodeDigit(c) {
	  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;
	}

	function decodeHex(c) {
	  if (c >= 48/*'0'*/ && c <= 57/*'9'*/) return c - 48/*'0'*/;
	  else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) return 10 + (c - 65/*'A'*/);
	  else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) return 10 + (c - 97/*'a'*/);
	}

	function encodeHex(x) {
	  if (x < 10) return 48/*'0'*/ + x;
	  else return 65/*'A'*/ + (x - 10);
	}

	function toLowerCase(c) {
	  if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) return c + (97/*'a'*/ - 65/*'A'*/);
	  else return c;
	}


	function UriParser(scheme, authority, path, query, fragment, s) {
	  StringIteratee.call(this);
	  this.scheme = scheme || null;
	  this.authority = authority || null;
	  this.path = path || null;
	  this.query = query || null;
	  this.fragment = fragment || null;
	  this.s = s || 1;
	}
	UriParser.prototype = Object.create(StringIteratee.prototype);
	UriParser.prototype.constructor = UriParser;
	UriParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var fragment = this.fragment;
	  var query = this.query;
	  var path = this.path;
	  var authority = this.authority;
	  var scheme = this.scheme;
	  var uri;
	  if (s === 1) {
	    if (!input.isEmpty()) {
	      var look = input.dup();
	      while (!look.isEmpty() && (c = look.head(), isSchemeChar(c))) look.step();
	      if (!look.isEmpty() && c === 58/*':'*/) s = 2;
	      else s = 3;
	    }
	    else if (input.isDone()) s = 3;
	  }
	  if (s === 2) {
	    scheme = scheme || new SchemeParser();
	    scheme = scheme.feed(input);
	    if (scheme.isError()) return scheme;
	    else if (!input.isEmpty() && (c = input.head(), c === 58/*':'*/)) {
	      input.step();
	      s = 3;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\':\'', found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 3) {
	    if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 47/*'/'*/) {
	        input.step();
	        s = 4;
	      }
	      else if (c === 63/*'?'*/) {
	        input.step();
	        s = 7;
	      }
	      else if (c === 35/*'#'*/) {
	        input.step();
	        s = 8;
	      }
	      else s = 6;
	    }
	    else if (input.isDone()) {
	      uri = {};
	      if (scheme) uri.scheme = scheme.state();
	      return new StringIteratee.Done(uri);
	    }
	  }
	  if (s === 4) {
	    if (!input.isEmpty() && (c = input.head(), c === 47/*'/'*/)) {
	      input.step();
	      s = 5;
	    }
	    else if (!input.isEmpty()) {
	      path = new PathParser(['/']);
	      s = 6;
	    }
	    else if (input.isDone()) {
	      uri = {};
	      if (scheme) uri.scheme = scheme.state();
	      uri.path = ['/'];
	      return new StringIteratee.Done(uri);
	    }
	  }
	  if (s === 5) {
	    authority = authority || new AuthorityParser();
	    authority = authority.feed(input);
	    if (authority.isError()) return authority;
	    else if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 63/*'?'*/) {
	        input.step();
	        s = 7;
	      }
	      else if (c === 35/*'#'*/) {
	        input.step();
	        s = 8;
	      }
	      else s = 6;
	    }
	    else if (input.isDone()) {
	      uri = {};
	      if (scheme) uri.scheme = scheme.state();
	      if (authority.state()) uri.authority = authority.state();
	      return new StringIteratee.Done(uri);
	    }
	  }
	  if (s === 6) {
	    path = path || new PathParser();
	    path = path.feed(input);
	    if (path.isError()) return path;
	    else if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 63/*'?'*/) {
	        input.step();
	        s = 7;
	      }
	      else if (c === 35/*'#'*/) {
	        input.step();
	        s = 8;
	      }
	      else {
	        uri = {};
	        if (scheme) uri.scheme = scheme.state();
	        if (authority) uri.authority = authority.state();
	        uri.path = path.state();
	        return new StringIteratee.Done(uri);
	      }
	    }
	    else if (input.isDone()) {
	      uri = {};
	      if (scheme) uri.scheme = scheme.state();
	      if (authority) uri.authority = authority.state();
	      uri.path = path.state();
	      return new StringIteratee.Done(uri);
	    }
	  }
	  if (s === 7) {
	    query = query || new QueryParser();
	    query = query.feed(input);
	    if (query.isError()) return query;
	    else if (!input.isEmpty()) {
	      c = input.head();
	      if (c === 35/*'#'*/) {
	        input.step();
	        s = 8;
	      }
	      else {
	        uri = {};
	        if (scheme) uri.scheme = scheme.state();
	        if (authority) uri.authority = authority.state();
	        uri.path = path.state();
	        uri.query = query.state();
	        return new StringIteratee.Done(uri);
	      }
	    }
	    else if (input.isDone()) {
	      uri = {};
	      if (scheme) uri.scheme = scheme.state();
	      if (authority) uri.authority = authority.state();
	      if (path) uri.path = path.state();
	      uri.query = query.state();
	      return new StringIteratee.Done(uri);
	    }
	  }
	  if (s === 8) {
	    fragment = fragment || new FragmentParser();
	    fragment = fragment.feed(input);
	    if (fragment.isError()) return fragment;
	    else if (input.isDone()) {
	      uri = {};
	      if (scheme) uri.scheme = scheme.state();
	      if (authority) uri.authority = authority.state();
	      if (path) uri.path = path.state();
	      if (query) uri.query = query.state();
	      uri.fragment = fragment.state();
	      return new StringIteratee.Done(uri);
	    }
	  }
	  return new UriParser(scheme, authority, path, query, fragment, s);
	};
	UriParser.prototype.state = function () {
	  var scheme = this.scheme.state();
	  var authority = this.authority.state();
	  var path = this.path.state();
	  var query = this.query.state();
	  var fragment = this.fragment.state();
	  var uri = {};
	  if (scheme !== undefined) uri.scheme = scheme;
	  if (authority) uri.authority = authority;
	  if (path) uri.path = path;
	  if (query) uri.query = query;
	  if (fragment !== undefined) uri.fragment = fragment;
	  return uri;
	};


	function SchemeParser(builder, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.s = s || 1;
	}
	SchemeParser.prototype = Object.create(StringIteratee.prototype);
	SchemeParser.prototype.constructor = SchemeParser;
	SchemeParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var builder = this.builder || new StringBuilder();
	  if (s === 1) {
	    if (!input.isEmpty() && (c = input.head(), isAlpha(c))) {
	      input.step();
	      builder.append(toLowerCase(c));
	      s = 2;
	    }
	    else if (!input.isEmpty() || input.isDone()) {
	      return new StringIteratee.Error({expected: 'scheme', found: c});
	    }
	  }
	  if (s === 2) {
	    while (!input.isEmpty() && (c = input.head(), isSchemeChar(c))) {
	      input.step();
	      builder.append(toLowerCase(c));
	    }
	    if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(builder.state());
	  }
	  return new SchemeParser(builder, s);
	};
	SchemeParser.prototype.state = function () {
	  if (this.builder) return this.builder.state();
	};


	function AuthorityParser(userInfo, host, port, s) {
	  StringIteratee.call(this);
	  this.userInfo = userInfo || null;
	  this.host = host || null;
	  this.port = port || null;
	  this.s = s || 1;
	}
	AuthorityParser.prototype = Object.create(StringIteratee.prototype);
	AuthorityParser.prototype.constructor = AuthorityParser;
	AuthorityParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var port = this.port;
	  var host = this.host;
	  var userInfo = this.userInfo;
	  var authority, hostinfo, userinfo;
	  if (s === 1) {
	    if (!input.isEmpty()) {
	      var look = input.dup();
	      while (!look.isEmpty() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) look.step();
	      if (!look.isEmpty() && c === 64/*'@'*/) s = 2;
	      else s = 3;
	    }
	    else if (input.isDone()) s = 3;
	  }
	  if (s === 2) {
	    userInfo = userInfo || new UserInfoParser();
	    userInfo = userInfo.feed(input);
	    if (userInfo.isError()) return userInfo;
	    else if (!input.isEmpty() && (c = input.head(), c === 64/*'@'*/)) {
	      input.step();
	      s = 3;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: 64/*'@'*/, found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF();
	  }
	  if (s === 3) {
	    host = host || new HostParser();
	    host = host.feed(input);
	    if (host.isError()) return host;
	    else if (!input.isEmpty() && input.head() === 58/*':'*/) {
	      input.step();
	      s = 4;
	    }
	    else if (!input.isEmpty() || input.isDone()) {
	      if (host.state()) {
	        authority = {};
	        hostinfo = host.state();
	        if (hostinfo.name !== undefined) authority.host = hostinfo.name;
	        if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;
	        if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;
	        if (userInfo) {
	          userinfo = userInfo.state();
	          if (typeof userinfo === 'string') authority.userInfo = userinfo;
	          else if (userinfo) {
	            authority.username = userinfo.username;
	            authority.password = userinfo.password;
	          }
	        }
	        return new StringIteratee.Done(authority);
	      }
	      else if (userInfo) {
	        authority = {};
	        userinfo = userInfo.state();
	        if (typeof userinfo === 'string') authority.userInfo = userinfo;
	        else if (userinfo) {
	          authority.username = userinfo.username;
	          authority.password = userinfo.password;
	        }
	        return new StringIteratee.Done(authority);
	      }
	      return new StringIteratee.Done(undefined);
	    }
	  }
	  if (s === 4) {
	    port = port || new PortParser();
	    port = port.feed(input);
	    if (port.isError()) return port;
	    else if (!input.isEmpty() || input.isDone()) {
	      authority = {};
	      hostinfo = host.state();
	      if (hostinfo.name !== undefined) authority.host = hostinfo.name;
	      if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;
	      if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;
	      authority.port = port.state();
	      if (userInfo) {
	        userinfo = userInfo.state();
	        if (typeof userinfo === 'string') authority.userInfo = userinfo;
	        else if (userinfo) {
	          authority.username = userinfo.username;
	          authority.password = userinfo.password;
	        }
	      }
	      return new StringIteratee.Done(authority);
	    }
	  }
	  return new AuthorityParser(userInfo, host, port, s);
	};
	AuthorityParser.prototype.state = function () {
	  if (this.host && this.host.state()) {
	    var authority = {};
	    var hostinfo = this.host.state();
	    if (hostinfo.name !== undefined) authority.host = hostinfo.name;
	    if (hostinfo.ipv4 !== undefined) authority.ipv4 = hostinfo.ipv4;
	    if (hostinfo.ipv6 !== undefined) authority.ipv6 = hostinfo.ipv6;
	    if (this.port) authority.port = this.port.state();
	    if (this.userInfo) {
	      var userinfo = this.userInfo.state();
	      if (typeof userinfo === 'string') authority.userInfo = userinfo;
	      else if (userinfo) {
	        authority.username = userinfo.username;
	        authority.password = userinfo.password;
	      }
	    }
	    return authority;
	  }
	};


	function UserInfoParser(username, password, c1, s) {
	  StringIteratee.call(this);
	  this.username = username || null;
	  this.password = password || null;
	  this.c1 = c1 || 0;
	  this.s = s || 1;
	}
	UserInfoParser.prototype = Object.create(StringIteratee.prototype);
	UserInfoParser.prototype.constructor = UserInfoParser;
	UserInfoParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var c1 = this.c1;
	  var password = this.password;
	  var username = this.username;
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 1) {
	      if (!username && !input.isEmpty()) username = new StringBuilder();
	      while (!input.isEmpty() && (c = input.head(), isUserChar(c))) {
	        input.step();
	        username.append(c);
	      }
	      if (!input.isEmpty() && c === 58/*':'*/) {
	        input.step();
	        s = 4;
	      }
	      else if (!input.isEmpty() && c === 37/*'%'*/) {
	        input.step();
	        s = 2;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        return new StringIteratee.Done(username.state());
	      }
	    }
	    if (s === 2) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 3;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        username.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 1;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 4) {
	      password = password || new StringBuilder();
	      while (!input.isEmpty() && (c = input.head(), isUserInfoChar(c))) {
	        input.step();
	        password.append(c);
	      }
	      if (!input.isEmpty() && c === 37/*'%'*/) {
	        input.step();
	        s = 5;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        var userInfo = {username: username.state(), password: password.state()};
	        return new StringIteratee.Done(userInfo);
	      }
	    }
	    if (s === 5) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 6;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 6) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        password.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 4;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new UserInfoParser(username, password, c1, s);
	};
	UserInfoParser.prototype.state = function () {
	  if (this.password) return {username: this.username.state(), password: this.password.state()};
	  else if (this.username) return this.username.state();
	};


	function HostParser() {
	  StringIteratee.call(this);
	}
	HostParser.prototype = Object.create(StringIteratee.prototype);
	HostParser.prototype.constructor = HostParser;
	HostParser.prototype.feed = function (input) {
	  if (!input.isEmpty()) {
	    var c = input.head();
	    if (c === 91/*'['*/) return new HostLiteralParser().feed(input);
	    else return new HostAddressParser().feed(input);
	  }
	  return this;
	};


	function HostAddressParser(builder, c1, x, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.c1 = c1 || 0;
	  this.x = x || 0;
	  this.s = s || 1;
	}
	HostAddressParser.prototype = Object.create(StringIteratee.prototype);
	HostAddressParser.prototype.constructor = HostAddressParser;
	HostAddressParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var x = this.x;
	  var c1 = this.c1;
	  var builder = this.builder;
	  var host;
	  while (s <= 4 && (!input.isEmpty() || input.isDone())) {
	    builder = builder || new StringBuilder();
	    while (!input.isEmpty() && (c = input.head(), isDigit(c))) {
	      input.step();
	      builder.append(c);
	      x = 10 * x + decodeDigit(c);
	    }
	    if (!input.isEmpty()) {
	      if (c === 46/*'.'*/ && s < 4 && x <= 255) {
	        input.step();
	        builder.append(c);
	        x = 0;
	        s += 1;
	      }
	      else if (!isHostChar(c) && c !== 37/*'%'*/ && s === 4 && x <= 255) {
	        host = {ipv4: builder.state()};
	        return new StringIteratee.Done(host);
	      }
	      else {
	        x = 0;
	        s = 5;
	      }
	    }
	    else if (input.isDone()) {
	      if (s === 4 && x <= 255) {
	        host = {ipv4: builder.state()};
	        return new StringIteratee.Done(host);
	      }
	      else {
	        host = {name: builder.state()};
	        return new StringIteratee.Done(host);
	      }
	    }
	  }
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 5) {
	      while (!input.isEmpty() && (c = input.head(), isHostChar(c))) {
	        input.step();
	        builder.append(toLowerCase(c));
	      }
	      if (!input.isEmpty() && c === 37/*'%'*/) {
	        input.step();
	        s = 6;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        host = {name: builder.state()};
	        return new StringIteratee.Done(host);
	      }
	    }
	    if (s === 6) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 7;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 7) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        builder.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 5;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new HostAddressParser(builder, c1, x, s);
	};
	HostAddressParser.prototype.state = function () {
	  if (this.builder) {
	    if (this.s === 4 && this.x <= 255) return {ipv4: this.builder.state()};
	    else return {name: this.builder.state()};
	  }
	};


	function HostLiteralParser(builder, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.s = s || 1;
	}
	HostLiteralParser.prototype = Object.create(StringIteratee.prototype);
	HostLiteralParser.prototype.constructor = HostLiteralParser;
	HostLiteralParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var builder = this.builder;
	  if (s === 1) {
	    if (!input.isEmpty() && (c = input.head(), c === 91/*'['*/)) {
	      input.step();
	      s = 2;
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({expected: '\'[\'', found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  if (s === 2) {
	    builder = builder || new StringBuilder();
	    while (!input.isEmpty() && (c = input.head(), isHostChar(c) || c === 58/*':'*/)) {
	      input.step();
	      builder.append(toLowerCase(c));
	    }
	    if (!input.isEmpty() && c === 93/*']'*/) {
	      input.step();
	      var host = {ipv6: builder.state()};
	      return new StringIteratee.Done(host);
	    }
	    else if (!input.isEmpty()) return new StringIteratee.Error({found: c});
	    else if (input.isDone()) return StringIteratee.unexpectedEOF;
	  }
	  return new HostLiteralParser(builder, s);
	};
	HostLiteralParser.prototype.state = function () {
	  if (this.builder) return {ipv6: this.builder.state()};
	};


	function PortParser(port) {
	  StringIteratee.call(this);
	  this.port = port || 0;
	}
	PortParser.prototype = Object.create(StringIteratee.prototype);
	PortParser.prototype.constructor = PortParser;
	PortParser.prototype.feed = function (input) {
	  var c = 0;
	  var port = this.port;
	  while (!input.isEmpty() && (c = input.head(), isDigit(c))) {
	    input.step();
	    port = 10 * port + decodeDigit(c);
	  }
	  if (!input.isEmpty() || input.isDone()) return new StringIteratee.Done(port);
	  return new PortParser(port);
	};
	PortParser.prototype.state = function () {
	  if (this.port !== 0) return this.port;
	};


	function PathParser(path, builder, c1, s) {
	  StringIteratee.call(this);
	  this.path = path || null;
	  this.builder = builder || null;
	  this.c1 = c1 || 0;
	  this.s = s || 1;
	}
	PathParser.prototype = Object.create(StringIteratee.prototype);
	PathParser.prototype.constructor = PathParser;
	PathParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var c1 = this.c1;
	  var builder = this.builder;
	  var path = this.path;
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 1) {
	      while (!input.isEmpty() && (c = input.head(), isPathChar(c))) {
	        builder = builder || new StringBuilder();
	        input.step();
	        builder.append(c);
	      }
	      if (!input.isEmpty() && c === 47/*'/'*/) {
	        input.step();
	        path = path || [];
	        if (builder) {
	          path.push(builder.state());
	          builder = null;
	        }
	        path.push('/');
	      }
	      else if (!input.isEmpty() && c === 37/*'%'*/) {
	        input.step();
	        s = 2;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        path = path || [];
	        if (builder) path.push(builder.state());
	        return new StringIteratee.Done(path);
	      }
	    }
	    if (s === 2) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 3;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        builder = builder || new StringBuilder();
	        input.step();
	        builder.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 1;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new PathParser(path, builder, c1, s);
	};
	PathParser.prototype.state = function () {
	  if (this.path) return this.path;
	  else return [];
	};


	function QueryParser(key, value, query, c1, s) {
	  StringIteratee.call(this);
	  this.key = key || null;
	  this.value = value || null;
	  this.query = query || null;
	  this.c1 = c1 || 0;
	  this.s = s || 1;
	}
	QueryParser.prototype = Object.create(StringIteratee.prototype);
	QueryParser.prototype.constructor = QueryParser;
	QueryParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var c1 = this.c1;
	  var query = this.query;
	  var value = this.value;
	  var key = this.key;
	  var k, v, param;
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 1) {
	      key = key || new StringBuilder();
	      while (!input.isEmpty() && (c = input.head(), isParamChar(c))) {
	        input.step();
	        key.append(c);
	      }
	      if (!input.isEmpty() && c === 61/*'='*/) {
	        input.step();
	        s = 4;
	      }
	      else if (!input.isEmpty() && c === 38/*'&'*/) {
	        input.step();
	        query = query || [];
	        query.push(key.state());
	        key = null;
	        s = 1;
	      }
	      else if (!input.isEmpty() && c === 37/*'%'*/) {
	        input.step();
	        s = 2;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        if (!query) return new StringIteratee.Done(key.state());
	        else {
	          query.push(key.state());
	          return new StringIteratee.Done(query);
	        }
	      }
	    }
	    if (s === 2) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 3;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        key.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 1;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 4) {
	      value = value || new StringBuilder();
	      while (!input.isEmpty() && (c = input.head(), isParamChar(c) || c === 61/*'='*/)) {
	        input.step();
	        value.append(c);
	      }
	      if (!input.isEmpty() && c === 38/*'&'*/) {
	        input.step();
	        k = key.state();
	        v = value.state();
	        param = {};
	        param[k] = v;
	        query = query || [];
	        query.push(param);
	        query[k] = v;
	        key = null;
	        value = null;
	        s = 1;
	      }
	      else if (!input.isEmpty() && c === 38/*'%'*/) {
	        input.step();
	        s = 5;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        k = key.state();
	        v = value.state();
	        param = {};
	        param[k] = v;
	        query = query || [];
	        query.push(param);
	        query[k] = v;
	        return new StringIteratee.Done(query);
	      }
	    }
	    if (s === 5) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 6;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 6) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        value.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 4;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new QueryParser(key, value, query, c1, s);
	};
	QueryParser.prototype.state = function () {
	  if (this.query) return this.query;
	};


	function FragmentParser(builder, c1, s) {
	  StringIteratee.call(this);
	  this.builder = builder || null;
	  this.c1 = c1 || 0;
	  this.s = s || 1;
	}
	FragmentParser.prototype = Object.create(StringIteratee.prototype);
	FragmentParser.prototype.constructor = FragmentParser;
	FragmentParser.prototype.feed = function (input) {
	  var c = 0;
	  var s = this.s;
	  var c1 = this.c1;
	  var builder = this.builder || new StringBuilder();
	  while (!input.isEmpty() || input.isDone()) {
	    if (s === 1) {
	      while (!input.isEmpty() && (c = input.head(), isFragmentChar(c))) {
	        input.step();
	        builder.append(c);
	      }
	      if (!input.isEmpty() && c === 37/*'%'*/) {
	        input.step();
	        s = 2;
	      }
	      else if (!input.isEmpty() || input.isDone()) {
	        return new StringIteratee.Done(builder.state());
	      }
	    }
	    if (s === 2) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        c1 = c;
	        s = 3;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	    if (s === 3) {
	      if (!input.isEmpty() && (c = input.head(), isHexChar(c))) {
	        input.step();
	        builder.append((decodeHex(c1) << 4) + decodeHex(c));
	        c1 = 0;
	        s = 1;
	      }
	      else if (!input.isEmpty()) return new StringIteratee.Error({expected: 'hex digit', found: c});
	      else if (input.isDone()) return StringIteratee.unexpectedEOF;
	    }
	  }
	  return new FragmentParser(builder, c1, s);
	};
	FragmentParser.prototype.state = function () {
	  if (this.builder) return this.builder.state();
	};


	function parseUri(string) {
	  var input = new StringIterator(string);
	  var result = new UriParser().run(input);
	  return result.state();
	}
	function parseAuthority(string) {
	  var input = new StringIterator(string);
	  var result = new AuthorityParser().run(input);
	  return result.state();
	}
	function parsePath(string) {
	  var input = new StringIterator(string);
	  var result = new PathParser().run(input);
	  return result.state();
	}
	function stringifyUri(uri) {
	  var writer = new UriWriter();
	  writer.writeUri(uri);
	  return writer.state();
	}
	function resolveUri(base, relative) {
	  if (typeof base === 'string') base = parseUri(base);
	  if (typeof relative === 'string') relative = parseUri(relative);
	  var absolute = {};
	  if (relative.scheme) {
	    absolute.scheme = relative.scheme;
	    if (relative.authority) absolute.authority = relative.authority;
	    if (relative.path) absolute.path = removeDotSegments(relative.path);
	    if (relative.query !== undefined) absolute.query = relative.query;
	    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;
	  }
	  else if (relative.authority) {
	    if (base.scheme) absolute.scheme = base.scheme;
	    absolute.authority = relative.authority;
	    if (relative.path) absolute.path = removeDotSegments(relative.path);
	    if (relative.query !== undefined) absolute.query = relative.query;
	    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;
	  }
	  else if (!relative.path || !relative.path.length) {
	    if (base.scheme) absolute.scheme = base.scheme;
	    if (base.authority) absolute.authority = base.authority;
	    if (base.path) absolute.path = base.path;
	    if (relative.query !== undefined) absolute.query = relative.query;
	    else if (base.query !== undefined) absolute.query = base.query;
	    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;
	  }
	  else if (relative.path[0] === '/') {
	    if (base.scheme) absolute.scheme = base.scheme;
	    if (base.authority) absolute.authority = base.authority;
	    if (relative.path) absolute.path = removeDotSegments(relative.path);
	    if (relative.query !== undefined) absolute.query = relative.query;
	    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;
	  }
	  else {
	    if (base.scheme) absolute.scheme = base.scheme;
	    if (base.authority) absolute.authority = base.authority;
	    absolute.path = removeDotSegments(mergeUriPath(base, relative.path));
	    if (relative.query !== undefined) absolute.query = relative.query;
	    if (relative.fragment !== undefined) absolute.fragment = relative.fragment;
	  }
	  return absolute;
	}
	function mergeUriPath(base, relativePath) {
	  if (base.authority && (!base.path || !base.path.length)) {
	    var segments = relativePath.slice();
	    segments.unshift('/');
	    return segments;
	  }
	  else if (!base.path || !base.path.length) return relativePath;
	  else return mergePath(base.path.slice(), relativePath);
	}
	function mergePath(basePath, relativePath) {
	  var segments = [];
	  var head = basePath.shift();
	  while (basePath.length > 0) {
	    segments.push(head);
	    head = basePath.shift();
	  }
	  if (head === '/') segments.push(head);
	  for (var i = 0, n = relativePath.length; i < n; i += 1) {
	    segments.push(relativePath[i]);
	  }
	  return segments;
	}
	function removeDotSegments(path) {
	  var segments = [];
	  while (path.length > 0) {
	    var head = path[0];
	    if (head === '.' || head === '..') {
	      path = path.slice(path.length > 1 ? 2 : 1);
	    }
	    else if (head === '/') {
	      if (path.length > 1) {
	        var next = path[1];
	        if (next === '.') {
	          path = path.length > 2 ? path.slice(2) : ['/'];
	        }
	        else if (next === '..') {
	          path = path.length > 2 ? path.slice(2) : ['/'];
	          if (segments.length > 1 && segments[segments.length - 1] !== '/') {
	            segments = segments.slice(0, segments.length - 2);
	          }
	          else if (segments.length > 0) {
	            segments = segments.slice(0, segments.length - 1);
	          }
	        }
	        else {
	          segments.push(head);
	          segments.push(next);
	          path = path.slice(2);
	        }
	      }
	      else {
	        segments.push('/');
	        path.shift();
	      }
	    }
	    else {
	      segments.push(head);
	      path.shift();
	    }
	  }
	  return segments;
	}
	function unresolveUri(base, absolute) {
	  if (typeof base === 'string') base = parseUri(base);
	  if (typeof absolute === 'string') absolute = parseUri(absolute);
	  if (base.scheme !== absolute.scheme || !equal(base.authority, absolute.authority)) return absolute;
	  var relative = {};
	  var basePath = base.path;
	  if (typeof basePath === 'string') basePath = parsePath(basePath);
	  else if (!basePath) basePath = [];
	  else basePath = basePath.slice();
	  var absolutePath = absolute.path;
	  if (typeof absolutePath === 'string') absolutePath = parsePath(absolutePath);
	  else if (!absolutePath) absolutePath = [];
	  var relativePath = unmergePath(basePath, absolutePath.slice(), absolutePath);
	  if (relativePath.length > 0) relative.path = relativePath;
	  if (absolute.query !== undefined) relative.query = absolute.query;
	  if (absolute.fragment !== undefined) relative.fragment = absolute.fragment;
	  return relative;
	}
	function unmergePath(basePath, relativePath, absolutePath) {
	  if (basePath.length === 0) {
	    if (relativePath.length > 1) relativePath.shift();
	    return relativePath;
	  }
	  else if (basePath[0] !== '/') {
	    return relativePath;
	  }
	  else if (relativePath.length === 0 || relativePath[0] !== '/') {
	    relativePath.unshift('/');
	    return relativePath;
	  }
	  else {
	    basePath.shift();
	    relativePath.shift();
	    if (basePath.length > 0 && relativePath.length === 0) return ['/'];
	    else if (basePath.length === 0 || relativePath.length === 0 || basePath[0] !== relativePath[0]) {
	      return relativePath;
	    }
	    else {
	      basePath.shift();
	      relativePath.shift();
	      if (basePath.length > 0 && relativePath.length === 0) return absolutePath;
	      else return unmergePath(basePath, relativePath, absolutePath);
	    }
	  }
	}

	function UriWriter(builder) {
	  this.builder = builder || new StringBuilder();
	}
	UriWriter.prototype.writeUri = function (uri) {
	  if (uri.scheme) {
	    this.writeScheme(uri.scheme);
	    this.builder.append(58/*':'*/);
	  }
	  if (uri.authority) {
	    this.builder.append(47/*'/'*/);
	    this.builder.append(47/*'/'*/);
	    this.writeAuthority(uri.authority);
	  }
	  if (uri.path) {
	    this.writePath(uri.path);
	  }
	  if (uri.query !== undefined) {
	    this.builder.append(63/*'?'*/);
	    this.writeQuery(uri.query);
	  }
	  if (uri.fragment !== undefined) {
	    this.builder.append(35/*'#'*/);
	    this.writeFragment(uri.fragment);
	  }
	};
	UriWriter.prototype.writeScheme = function (scheme) {
	  var cs = new StringIterator(scheme);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isSchemeChar(c)) this.builder.append(c);
	    else throw 'Invalid URI scheme: ' + scheme;
	    cs.step();
	  }
	};
	UriWriter.prototype.writeAuthority = function (authority) {
	  if (typeof authority === 'string') authority = parseAuthority(authority);
	  if (authority.userInfo !== undefined) {
	    this.writeUserInfo(authority.userInfo);
	    this.builder.append(64/*'@'*/);
	  }
	  else if (authority.username !== undefined && authority.password !== undefined) {
	    this.writeUser(authority.username);
	    this.builder.append(58/*':'*/);
	    this.writeUserInfo(authority.password);
	    this.builder.append(64/*'@'*/);
	  }
	  if (authority.host !== undefined) {
	    this.writeHost(authority.host);
	  }
	  else if (authority.ipv4 !== undefined) {
	    this.writeHost(authority.ipv4);
	  }
	  else if (authority.ipv6 !== undefined) {
	    this.builder.append(91/*'['*/);
	    this.writeHostLiteral(authority.ipv6);
	    this.builder.append(93/*']'*/);
	  }
	  if (authority.port) {
	    this.builder.append(58/*':'*/);
	    this.writePort(authority.port);
	  }
	};
	UriWriter.prototype.writeUserInfo = function (userInfo) {
	  var cs = new StringIterator(userInfo);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isUserInfoChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeUser = function (user) {
	  var cs = new StringIterator(user);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isUserChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeHost = function (host) {
	  var cs = new StringIterator(host);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isHostChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeHostLiteral = function (host) {
	  var cs = new StringIterator(host);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isHostChar(c) || c === 58/*':'*/) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writePort = function (port) {
	  var i = 9;
	  var digits = new Array(10);
	  while (port > 0) {
	    digits[i] = port % 10;
	    port = Math.floor(port / 10);
	    i -= 1;
	  }
	  i += 1;
	  while (i < 10) {
	    this.builder.append(48/*'0'*/ + digits[i]);
	    i += 1;
	  }
	};
	UriWriter.prototype.writePath = function (path) {
	  if (typeof path === 'string') path = parsePath(path);
	  for (var i = 0, n = path.length; i < n; i += 1) {
	    var segment = path[i];
	    if (segment === '/') this.builder.append(47/*'/'*/);
	    else this.writePathSegment(segment);
	  }
	};
	UriWriter.prototype.writePathSegment = function (segment) {
	  var cs = new StringIterator(segment);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isPathChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeQuery = function (query) {
	  if (typeof query === 'string') this.writeQueryPart(query);
	  else if (Array.isArray(query)) this.writeQueryArray(query);
	  else if (query) this.writeQueryParams(query);
	};
	UriWriter.prototype.writeQueryArray = function (query) {
	  for (var i = 0, n = query.length; i < n; i += 1) {
	    var param = query[i];
	    if (typeof param === 'string') {
	      if (i > 0) this.builder.append(38/*'&'*/);
	      this.writeQueryParam(param);
	    }
	    else this.writeQueryParams(param, i);
	  }
	};
	UriWriter.prototype.writeQueryParams = function (params, i) {
	  var keys = Object.keys(params);
	  for (var j = 0, n = keys.length; j < n; i += 1, j += 1) {
	    var key = keys[j];
	    var value = params[key];
	    if (i > 0) this.builder.append(38/*'&'*/);
	    this.writeQueryParam(key);
	    this.builder.append(61/*'='*/);
	    this.writeQueryParam(value);
	  }
	};
	UriWriter.prototype.writeQueryParam = function (param) {
	  var cs = new StringIterator(param);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isParamChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeQueryPart = function (query) {
	  var cs = new StringIterator(query);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isQueryChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeFragment = function (fragment) {
	  var cs = new StringIterator(fragment);
	  while (!cs.isEmpty()) {
	    var c = cs.head();
	    if (isFragmentChar(c)) this.builder.append(c);
	    else this.writeEncoded(c);
	    cs.step();
	  }
	};
	UriWriter.prototype.writeEncoded = function (c) {
	  if (c === 0x00) { // modified UTF-8
	    this.writePctEncoded(0xC0);
	    this.writePctEncoded(0x80);
	  }
	  else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F
	    this.writePctEncoded(c);
	  }
	  else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF
	    this.writePctEncoded(0xC0 | (c >>> 6));
	    this.writePctEncoded(0x80 | (c & 0x3F));
	  }
	  else if (c >= 0x0800 && c <= 0xFFFF || // U+0800..U+D7FF
	           c >= 0xE000 && c <= 0xFFFF) { // U+E000..U+FFFF
	    this.writePctEncoded(0xE0 | (c >>> 12));
	    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));
	    this.writePctEncoded(0x80 | (c & 0x3F));
	  }
	  else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF
	    this.writePctEncoded(0xF0 | (c >>> 18));
	    this.writePctEncoded(0x80 | (c >>> 12 & 0x3F));
	    this.writePctEncoded(0x80 | (c >>> 6 & 0x3F));
	    this.writePctEncoded(0x80 | (c & 0x3F));
	  }
	  else { // surrogate or invalid code point
	    this.writePctEncoded(0xEF);
	    this.writePctEncoded(0xBF);
	    this.writePctEncoded(0xBD);
	  }
	};
	UriWriter.prototype.writePctEncoded = function (c) {
	  this.builder.append(37/*'%'*/);
	  this.builder.append(encodeHex(c >>> 4 & 0xF));
	  this.builder.append(encodeHex(c & 0xF));
	};
	UriWriter.prototype.state = function () {
	  return this.builder.state();
	};

	var uri = {};
	uri.parse = parseUri;
	uri.stringify = stringifyUri;
	uri.resolve = resolveUri;
	uri.unresolve = unresolveUri;


	module.exports = function (value) {
	  return coerce.apply(null, arguments);
	};
	exports = module.exports;
	exports.parse = parse;
	exports.stringify = stringify;
	exports.base64 = base64;
	exports.isRecord = isRecord;
	exports.size = size;
	exports.head = head;
	exports.tail = tail;
	exports.tag = tag;
	exports.has = has;
	exports.get = get;
	exports.set = set;
	exports.remove = remove;
	exports.keys = keys;
	exports.values = values;
	exports.forEach = forEach;
	exports.concat = concat;
	exports.equal = equal;
	exports.compare = compare;
	exports.uri = uri;
	exports.config = config;
	exports.StringIterator = StringIterator;
	exports.DocumentParser = DocumentParser;
	exports.BlockParser = BlockParser;
	exports.RecordParser = RecordParser;
	exports.UriParser = UriParser;
	exports.SchemeParser = SchemeParser;
	exports.AuthorityParser = AuthorityParser;
	exports.PathParser = PathParser;
	exports.QueryParser = QueryParser;
	exports.FragmentParser = FragmentParser;


/***/ }),
/* 36 */
/***/ (function(module, exports) {

	module.exports = {
		"version": "0.3.11"
	};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var config = __webpack_require__(38);
	var recon = global.recon || __webpack_require__(35);

	function decode(record) {
	  switch (recon.tag(record)) {
	    case '@event': return EventMessage.decode(record);
	    case '@command': return CommandMessage.decode(record);
	    case '@link': return LinkRequest.decode(record);
	    case '@linked': return LinkedResponse.decode(record);
	    case '@sync': return SyncRequest.decode(record);
	    case '@synced': return SyncedResponse.decode(record);
	    case '@unlink': return UnlinkRequest.decode(record);
	    case '@unlinked': return UnlinkedResponse.decode(record);
	    case '@auth': return AuthRequest.decode(record);
	    case '@authed': return AuthedResponse.decode(record);
	    case '@deauth': return DeauthRequest.decode(record);
	    case '@deauthed': return DeauthedResponse.decode(record);
	  }
	}

	function encode(envelope) {
	  return envelope.encode();
	}

	function parse(string) {
	  return decode(recon.parse(string));
	}

	function stringify(envelope) {
	  return recon.stringify(encode(envelope));
	}


	function Envelope() {}
	Object.defineProperty(Envelope.prototype, 'isRequest', {value: false});
	Object.defineProperty(Envelope.prototype, 'isResponse', {value: false});
	Object.defineProperty(Envelope.prototype, 'isMessage', {value: false});
	Object.defineProperty(Envelope.prototype, 'isEventMessage', {value: false});
	Object.defineProperty(Envelope.prototype, 'isCommandMessage', {value: false});
	Object.defineProperty(Envelope.prototype, 'isLinkRequest', {value: false});
	Object.defineProperty(Envelope.prototype, 'isLinkedResponse', {value: false});
	Object.defineProperty(Envelope.prototype, 'isSyncRequest', {value: false});
	Object.defineProperty(Envelope.prototype, 'isSyncedResponse', {value: false});
	Object.defineProperty(Envelope.prototype, 'isUnlinkRequest', {value: false});
	Object.defineProperty(Envelope.prototype, 'isUnlinkedResponse', {value: false});
	Object.defineProperty(Envelope.prototype, 'isAuthRequest', {value: false});
	Object.defineProperty(Envelope.prototype, 'isAuthedResponse', {value: false});
	Object.defineProperty(Envelope.prototype, 'isDeauthRequest', {value: false});
	Object.defineProperty(Envelope.prototype, 'isDeauthedResponse', {value: false});


	function RequestEnvelope() {
	  Envelope.call(this);
	}
	RequestEnvelope.prototype = Object.create(Envelope.prototype);
	RequestEnvelope.prototype.constructor = RequestEnvelope;
	Object.defineProperty(RequestEnvelope.prototype, 'isRequest', {value: true});


	function ResponseEnvelope() {
	  Envelope.call(this);
	}
	ResponseEnvelope.prototype = Object.create(Envelope.prototype);
	ResponseEnvelope.prototype.constructor = ResponseEnvelope;
	Object.defineProperty(ResponseEnvelope.prototype, 'isResponse', {value: true});


	function MessageEnvelope() {
	  Envelope.call(this);
	}
	MessageEnvelope.prototype = Object.create(Envelope.prototype);
	MessageEnvelope.prototype.constructor = MessageEnvelope;
	Object.defineProperty(MessageEnvelope.prototype, 'isMessage', {value: true});


	function EventMessage(node, lane, body) {
	  MessageEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.body = body;
	}
	EventMessage.prototype = Object.create(MessageEnvelope.prototype);
	EventMessage.prototype.constructor = EventMessage;
	Object.defineProperty(EventMessage.prototype, 'isEventMessage', {value: true});
	EventMessage.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new EventMessage(node, lane, this.body);
	};
	EventMessage.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  return recon.concat({'@event': headers}, this.body);
	};
	EventMessage.decode = function (record) {
	  var node, lane;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new EventMessage(node, lane, body);
	  }
	};


	function CommandMessage(node, lane, body) {
	  MessageEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.body = body;
	}
	CommandMessage.prototype = Object.create(MessageEnvelope.prototype);
	CommandMessage.prototype.constructor = CommandMessage;
	Object.defineProperty(CommandMessage.prototype, 'isCommandMessage', {value: true});
	CommandMessage.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new CommandMessage(node, lane, this.body);
	};
	CommandMessage.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  return recon.concat({'@command': headers}, this.body);
	};
	CommandMessage.decode = function (record) {
	  var node, lane;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new CommandMessage(node, lane, body);
	  }
	};


	function LinkRequest(node, lane, prio, body) {
	  RequestEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.prio = prio || 0.0;
	  this.body = body;
	}
	LinkRequest.prototype = Object.create(RequestEnvelope.prototype);
	LinkRequest.prototype.constructor = LinkRequest;
	Object.defineProperty(LinkRequest.prototype, 'isLinkRequest', {value: true});
	LinkRequest.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new LinkRequest(node, lane, this.prio, this.body);
	};
	LinkRequest.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  if (this.prio) headers.push({prio: this.prio});
	  return recon.concat({'@link': headers}, this.body);
	};
	LinkRequest.decode = function (record) {
	  var node, lane, prio;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (header.prio !== undefined) prio = header.prio;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new LinkRequest(node, lane, prio, body);
	  }
	};


	function LinkedResponse(node, lane, prio, body) {
	  ResponseEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.prio = prio || 0.0;
	  this.body = body;
	}
	LinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);
	LinkedResponse.prototype.constructor = LinkedResponse;
	Object.defineProperty(LinkedResponse.prototype, 'isLinkedResponse', {value: true});
	LinkedResponse.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new LinkedResponse(node, lane, this.prio, this.body);
	};
	LinkedResponse.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  if (this.prio) headers.push({prio: this.prio});
	  return recon.concat({'@linked': headers}, this.body);
	};
	LinkedResponse.decode = function (record) {
	  var node, lane, prio;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (header.prio !== undefined) prio = header.prio;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new LinkedResponse(node, lane, prio, body);
	  }
	};


	function SyncRequest(node, lane, prio, body) {
	  RequestEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.prio = prio || 0.0;
	  this.body = body;
	}
	SyncRequest.prototype = Object.create(RequestEnvelope.prototype);
	SyncRequest.prototype.constructor = SyncRequest;
	Object.defineProperty(SyncRequest.prototype, 'isSyncRequest', {value: true});
	SyncRequest.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new SyncRequest(node, lane, this.prio, this.body);
	};
	SyncRequest.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  if (this.prio) headers.push({prio: this.prio});
	  return recon.concat({'@sync': headers}, this.body);
	};
	SyncRequest.decode = function (record) {
	  var node, lane, prio;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (header.prio !== undefined) prio = header.prio;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new SyncRequest(node, lane, prio, body);
	  }
	};


	function SyncedResponse(node, lane, body) {
	  ResponseEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.body = body;
	}
	SyncedResponse.prototype = Object.create(ResponseEnvelope.prototype);
	SyncedResponse.prototype.constructor = SyncedResponse;
	Object.defineProperty(SyncedResponse.prototype, 'isSyncedResponse', {value: true});
	SyncedResponse.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new SyncedResponse(node, lane, this.body);
	};
	SyncedResponse.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  return recon.concat({'@synced': headers}, this.body);
	};
	SyncedResponse.decode = function (record) {
	  var node, lane;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new SyncedResponse(node, lane, body);
	  }
	};


	function UnlinkRequest(node, lane, body) {
	  RequestEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.body = body;
	}
	UnlinkRequest.prototype = Object.create(RequestEnvelope.prototype);
	UnlinkRequest.prototype.constructor = UnlinkRequest;
	Object.defineProperty(UnlinkRequest.prototype, 'isUnlinkRequest', {value: true});
	UnlinkRequest.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new UnlinkRequest(node, lane, this.body);
	};
	UnlinkRequest.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  return recon.concat({'@unlink': headers}, this.body);
	};
	UnlinkRequest.decode = function (record) {
	  var node, lane;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new UnlinkRequest(node, lane, body);
	  }
	};


	function UnlinkedResponse(node, lane, body) {
	  ResponseEnvelope.call(this);
	  this.node = node;
	  this.lane = lane;
	  this.body = body;
	}
	UnlinkedResponse.prototype = Object.create(ResponseEnvelope.prototype);
	UnlinkedResponse.prototype.constructor = UnlinkedResponse;
	Object.defineProperty(UnlinkedResponse.prototype, 'isUnlinkedResponse', {value: true});
	UnlinkedResponse.prototype.withAddress = function (node, lane) {
	  if (node === undefined) node = this.node;
	  if (lane === undefined) lane = this.lane;
	  return new UnlinkedResponse(node, lane, this.body);
	};
	UnlinkedResponse.prototype.encode = function () {
	  var headers = [{node: this.node}, {lane: this.lane}];
	  return recon.concat({'@unlinked': headers}, this.body);
	};
	UnlinkedResponse.decode = function (record) {
	  var node, lane;
	  var body = recon.tail(record);
	  var headers = recon.head(record);
	  var n = headers && headers.length || 0;
	  for (var i = 0; i < n; i += 1) {
	    var header = headers[i];
	    if (header.node !== undefined) node = header.node;
	    else if (header.lane !== undefined) lane = header.lane;
	    else if (i === 0) node = header;
	    else if (i === 1) lane = header;
	  }
	  if (node !== undefined && lane !== undefined) {
	    return new UnlinkedResponse(node, lane, body);
	  }
	};


	function AuthRequest(body) {
	  RequestEnvelope.call(this);
	  this.body = body;
	}
	AuthRequest.prototype = Object.create(RequestEnvelope.prototype);
	AuthRequest.prototype.constructor = AuthRequest;
	Object.defineProperty(AuthRequest.prototype, 'isAuthRequest', {value: true});
	AuthRequest.prototype.encode = function () {
	  return recon.concat({'@auth': null}, this.body);
	};
	AuthRequest.decode = function (record) {
	  var body = recon.tail(record);
	  return new AuthRequest(body);
	};


	function AuthedResponse(body) {
	  ResponseEnvelope.call(this);
	  this.body = body;
	}
	AuthedResponse.prototype = Object.create(ResponseEnvelope.prototype);
	AuthedResponse.prototype.constructor = AuthedResponse;
	Object.defineProperty(AuthedResponse.prototype, 'isAuthedResponse', {value: true});
	AuthedResponse.prototype.encode = function () {
	  return recon.concat({'@authed': null}, this.body);
	};
	AuthedResponse.decode = function (record) {
	  var body = recon.tail(record);
	  return new AuthedResponse(body);
	};


	function DeauthRequest(body) {
	  RequestEnvelope.call(this);
	  this.body = body;
	}
	DeauthRequest.prototype = Object.create(RequestEnvelope.prototype);
	DeauthRequest.prototype.constructor = DeauthRequest;
	Object.defineProperty(DeauthRequest.prototype, 'isDeauthRequest', {value: true});
	DeauthRequest.prototype.encode = function () {
	  return recon.concat({'@deauth': null}, this.body);
	};
	DeauthRequest.decode = function (record) {
	  var body = recon.tail(record);
	  return new DeauthRequest(body);
	};


	function DeauthedResponse(body) {
	  ResponseEnvelope.call(this);
	  this.body = body;
	}
	DeauthedResponse.prototype = Object.create(ResponseEnvelope.prototype);
	DeauthedResponse.prototype.constructor = DeauthedResponse;
	Object.defineProperty(DeauthedResponse.prototype, 'isDeauthedResponse', {value: true});
	DeauthedResponse.prototype.encode = function () {
	  return recon.concat({'@deauthed': null}, this.body);
	};
	DeauthedResponse.decode = function (record) {
	  var body = recon.tail(record);
	  return new DeauthedResponse(body);
	};


	exports.decode = decode;
	exports.encode = encode;
	exports.parse = parse;
	exports.stringify = stringify;
	exports.Envelope = Envelope;
	exports.RequestEnvelope = RequestEnvelope;
	exports.ResponseEnvelope = ResponseEnvelope;
	exports.MessageEnvelope = MessageEnvelope;
	exports.EventMessage = EventMessage;
	exports.CommandMessage = CommandMessage;
	exports.SyncRequest = SyncRequest;
	exports.SyncedResponse = SyncedResponse;
	exports.LinkRequest = LinkRequest;
	exports.LinkedResponse = LinkedResponse;
	exports.UnlinkRequest = UnlinkRequest;
	exports.UnlinkedResponse = UnlinkedResponse;
	exports.AuthRequest = AuthRequest;
	exports.AuthedResponse = AuthedResponse;
	exports.DeauthRequest = DeauthRequest;
	exports.DeauthedResponse = DeauthedResponse;
	exports.config = config;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	module.exports = {
		"version": "0.4.2"
	};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var _global = (function() { return this; })();
	var NativeWebSocket = _global.WebSocket || _global.MozWebSocket;
	var websocket_version = __webpack_require__(40);


	/**
	 * Expose a W3C WebSocket class with just one or two arguments.
	 */
	function W3CWebSocket(uri, protocols) {
		var native_instance;

		if (protocols) {
			native_instance = new NativeWebSocket(uri, protocols);
		}
		else {
			native_instance = new NativeWebSocket(uri);
		}

		/**
		 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
		 * class). Since it is an Object it will be returned as it is when creating an
		 * instance of W3CWebSocket via 'new W3CWebSocket()'.
		 *
		 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
		 */
		return native_instance;
	}


	/**
	 * Module exports.
	 */
	module.exports = {
	    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
	    'version'      : websocket_version
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(41).version;


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	module.exports = {
		"_args": [
			[
				{
					"raw": "websocket@^1.0.23",
					"scope": null,
					"escapedName": "websocket",
					"name": "websocket",
					"rawSpec": "^1.0.23",
					"spec": ">=1.0.23 <2.0.0",
					"type": "range"
				},
				"/home/derek/Projects/swim-dev-tools/node_modules/swim-client-js"
			]
		],
		"_from": "websocket@>=1.0.23 <2.0.0",
		"_id": "websocket@1.0.24",
		"_inCache": true,
		"_location": "/websocket",
		"_nodeVersion": "7.3.0",
		"_npmOperationalInternal": {
			"host": "packages-12-west.internal.npmjs.com",
			"tmp": "tmp/websocket-1.0.24.tgz_1482977757939_0.1858439394272864"
		},
		"_npmUser": {
			"name": "theturtle32",
			"email": "brian@worlize.com"
		},
		"_npmVersion": "3.10.10",
		"_phantomChildren": {},
		"_requested": {
			"raw": "websocket@^1.0.23",
			"scope": null,
			"escapedName": "websocket",
			"name": "websocket",
			"rawSpec": "^1.0.23",
			"spec": ">=1.0.23 <2.0.0",
			"type": "range"
		},
		"_requiredBy": [
			"/swim-client-js"
		],
		"_resolved": "https://registry.npmjs.org/websocket/-/websocket-1.0.24.tgz",
		"_shasum": "74903e75f2545b6b2e1de1425bc1c905917a1890",
		"_shrinkwrap": null,
		"_spec": "websocket@^1.0.23",
		"_where": "/home/derek/Projects/swim-dev-tools/node_modules/swim-client-js",
		"author": {
			"name": "Brian McKelvey",
			"email": "brian@worlize.com",
			"url": "https://www.worlize.com/"
		},
		"browser": "lib/browser.js",
		"bugs": {
			"url": "https://github.com/theturtle32/WebSocket-Node/issues"
		},
		"config": {
			"verbose": false
		},
		"contributors": [
			{
				"name": "Iñaki Baz Castillo",
				"email": "ibc@aliax.net",
				"url": "http://dev.sipdoc.net"
			}
		],
		"dependencies": {
			"debug": "^2.2.0",
			"nan": "^2.3.3",
			"typedarray-to-buffer": "^3.1.2",
			"yaeti": "^0.0.6"
		},
		"description": "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
		"devDependencies": {
			"buffer-equal": "^1.0.0",
			"faucet": "^0.0.1",
			"gulp": "git+https://github.com/gulpjs/gulp.git#4.0",
			"gulp-jshint": "^2.0.4",
			"jshint": "^2.0.0",
			"jshint-stylish": "^2.2.1",
			"tape": "^4.0.1"
		},
		"directories": {
			"lib": "./lib"
		},
		"dist": {
			"shasum": "74903e75f2545b6b2e1de1425bc1c905917a1890",
			"tarball": "https://registry.npmjs.org/websocket/-/websocket-1.0.24.tgz"
		},
		"engines": {
			"node": ">=0.8.0"
		},
		"gitHead": "0e15f9445953927c39ce84a232cb7dd6e3adf12e",
		"homepage": "https://github.com/theturtle32/WebSocket-Node",
		"keywords": [
			"websocket",
			"websockets",
			"socket",
			"networking",
			"comet",
			"push",
			"RFC-6455",
			"realtime",
			"server",
			"client"
		],
		"license": "Apache-2.0",
		"main": "index",
		"maintainers": [
			{
				"name": "theturtle32",
				"email": "brian@worlize.com"
			}
		],
		"name": "websocket",
		"optionalDependencies": {},
		"readme": "ERROR: No README data found!",
		"repository": {
			"type": "git",
			"url": "git+https://github.com/theturtle32/WebSocket-Node.git"
		},
		"scripts": {
			"gulp": "gulp",
			"install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
			"test": "faucet test/unit"
		},
		"version": "1.0.24"
	};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(43);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-swim-left-nav .swim-left-nav {\n  width: 100%;\n  height: 100%;\n}\nx-swim-left-nav .header,\nx-swim-left-nav .location {\n  width: 100%;\n  min-height: 56px;\n  height: 56px;\n  background-color: #709ed4;\n  color: #ffffff;\n}\nx-swim-left-nav .header-wrapper,\nx-swim-left-nav .location-wrapper {\n  padding: 16px 12px 0 16px;\n}\nx-swim-left-nav .header-wrapper .title,\nx-swim-left-nav .location-wrapper .title {\n  font-size: 18px;\n  margin-top: 3px;\n}\nx-swim-left-nav .location {\n  background-color: #ffffff;\n  color: #ffffff;\n  border-bottom: 1px solid #d0d0d0;\n}\nx-swim-left-nav .location-wrapper {\n  padding: 8px 12px 0 16px;\n}\nx-swim-left-nav .location-wrapper .mdl-button--fab.mdl-button--colored {\n  background: #709ed4;\n  color: #fff;\n}\nx-swim-left-nav .location-wrapper .title {\n  font-size: 11px;\n}\nx-swim-left-nav .location-wrapper .black {\n  color: #000000;\n}\nx-swim-left-nav .location-list {\n  overflow: scroll;\n}\n", ""]);

	// exports


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"swim-left-nav mdl-card mdl-shadow--2dp\"> <div class=header> <div class=header-wrapper> <i class=\"back-nav material-icons fl ml8 dashboard\">dashboard</i> <i class=\"back-nav material-icons fl ml8 keyboard-backspace pointer hidden\">keyboard_backspace</i> <div class=\"title fl pl12\">Orbcomm</div> <i class=\"material-icons fr pointer\">more_vert</i> </div> </div> <div class=location-list> </div> </div>";

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, d3) {__webpack_require__(46);
	var c3 = __webpack_require__(20);

	tag('x-swim-line-chart', {
	    template: __webpack_require__(48),
	    inserted: function () {


	        //TODO: Derek - Need to feed in interval
	        var duration = 500;
	        var limit = 50;
	        var now = new Date(Date.now() - duration);

	        var width = this.clientWidth;
	        var height = this.clientHeight;

	        var groups = {
	            max: {
	                color: 'orange',
	                data: d3.range(limit).map(function () {
	                    return 0;
	                })
	            },
	            mean: {
	                color: 'green',
	                data: d3.range(limit).map(function () {
	                    return 0;
	                })
	            },
	            min: {
	                color: 'blue',
	                data: d3.range(limit).map(function () {
	                    return 0;
	                })
	            }
	        };

	        var x = d3.time.scale()
	            .domain([now - (limit - 2), now - duration])
	            .range([0, width]);

	        var y = d3.scale.linear()
	            .domain([0, 100])
	            .range([height, 0]);

	        var line = d3.svg.line()
	            .interpolate('basis')
	            .x(function (d, i) {
	                return x(now - (limit - 1 - i) * duration);
	            })
	            .y(function (d) {
	                return y(d);
	            });

	        var svg = d3.select(this).select('.chart').append('svg')
	            .attr('width', width)
	            .attr('height', height + 50);

	        var paths = svg.append('g');

	        for (var name in groups) {
	            var group = groups[name];
	            group.path = paths.append('path')
	                .data([group.data])
	                .attr('class', name + ' group')
	                .style('stroke', group.color)
	                .style('stroke-width', 3)
	                .style('fill', 'none');
	        }

	        this._chart = function (data) {

	            now = new Date();

	            // Add new values
	            for (var name in groups) {
	                var group = groups[name];
	                group.data.push(data[name].value);
	                group.path.attr('d', line);
	            }

	            // Shift domain
	            x.domain([now - (limit - 2) * duration, now - duration]);

	            // Slide paths left
	            paths.attr('transform', null)
	                .transition()
	                .duration(duration)
	                .ease('linear')
	                .attr('transform', 'translate(' + x(now - (limit - 1) * duration) + ')');

	            // Remove oldest data point from each group
	            for (var name in groups) {
	                var group = groups[name];
	                group.data.shift()
	            }

	        };

	    },
	    methods: {
	        load: function (data) {

	            this._chart(data);
	        }
	    },
	    accessors: {
	        // X-Tag utomatically maps camelcased accessor setter names to their
	        // dashed attribute equivalents. In this example, `limitedCount` maps
	        // to the `limited-count` attribute.
	        data: {
	            attribute: {},
	            get: function () {
	                return this._data;
	            },
	            set: function (value) {
	                this._data = JSON.parse(value);
	            }
	        },
	        tooltip: {
	            attribute: {boolean: true},
	            get: function () {
	                return this._tooltip;
	            },
	            set: function (value) {
	                this._tooltip = value;
	            }
	        },
	        legend: {
	            attribute: {boolean: true},
	            get: function () {
	                return this._legend;
	            },
	            set: function (value) {
	                this._legend = value;
	            }
	        },
	        point: {
	            attribute: {boolean: true},
	            get: function () {
	                return this._point;
	            },
	            set: function (value) {
	                this._point = value;
	            }
	        },
	        axis_x: {
	            attribute: {boolean: true},
	            get: function () {
	                return this._axis_x;
	            },
	            set: function (value) {
	                this._axis_x = value;
	            }
	        },
	        axis_y: {
	            attribute: {boolean: true},
	            get: function () {
	                return this._axis_y;
	            },
	            set: function (value) {
	                this._axis_y = value;
	            }
	        }
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(22)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(47);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-swim-line-chart {\n  width: 100%;\n  display: block;\n}\nx-swim-line-chart .chart {\n  height: 100%;\n  width: 100%;\n  display: block;\n}\n", ""]);

	// exports


/***/ }),
/* 48 */
/***/ (function(module, exports) {

	module.exports = "<div class=chart></div>";

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Store, tag, $) {__webpack_require__(50);
	__webpack_require__(52);

	__webpack_require__(19);

	var d3 = __webpack_require__(22);
	var sankeyStore = Store.get('sankey');

	tag('x-swim-sankey', {
	  template: __webpack_require__(53),
	  draw: function () {
	    var state = Store.get(this.guid);
	    var drawPaths = state && state.pulsePaths.splice(10);
	    $(drawPaths).each(function (idx, value) {
	      $('x-swim-sankey')[0].flowCircle(value.weight, $('path[data-link-name=' + value.loc + ']')[0])
	    });
	    Store.put(this.guid, state);
	  },
	  methods: {
	    // draw a Circle that flows down a path on the sankey
	    // path name is a source.name + target.name with scrubbed spaces
	    flowCircle: function flowCircle(diameter, path, color) {

	      //Get path start point for placing marker
	      function pathStartPoint(path) {
	        var d = path.attr("d"),
	          dsplitted = d.split(" ");
	        return dsplitted[1].split(",");
	      }

	      var startPoint = pathStartPoint($(path));
	      var marker = this.svg.append("circle");

	      marker.attr("r", diameter)
	        .attr("class", "circle")
	        .style("fill", function () {
	          if (color) return color;
	        })
	        .attr("transform", "translate(" + startPoint + ")");

	      marker.transition()
	        .duration(7500)
	        .attrTween("transform", translateAlong(path)).remove();;

	      function translateAlong(path) {
	        var l = path.getTotalLength();
	        return function (i) {
	          return function (t) {
	            var p = path.getPointAtLength(t * l);
	            return "translate(" + p.x + "," + p.y + ")"; //Move marker
	          }
	        }
	      }
	    }
	  },
	  created: function () {
	    this.svg = d3.select(this).append("svg");
	  },
	  inserted: function () {

	    var tooltip = $('x-swim-chart-tooltip', this)[0];

	    var margin = {
	        top: 10,
	        right: 10,
	        bottom: 10,
	        left: 10
	      },

	      width = $(this).width() - margin.left - margin.right,

	      //todo: this is a hack right now, to fit into an app, fix fix fix
	      height = $(this).height() - 64 - margin.top - margin.bottom;

	    // append the svg canvas to the page
	    this.svg
	      .attr("width", width + margin.left + margin.right)
	      .attr("height", height + margin.top + margin.bottom)
	      .append("g")
	      .attr("transform",
	        "translate(" + margin.left + "," + margin.top + ")");

	    // Set the sankey diagram properties
	    var sankey = d3.sankey()
	      .nodeWidth(36)
	      .nodePadding(10)
	      .size([width, height]);

	    var path = sankey.link();

	    // load the data

	    var graph = __webpack_require__(54);
	    var nodeMap = {};
	    graph.nodes.forEach(function (x) {
	      nodeMap[x.name] = x;
	    });
	    graph.links = graph.links.map(function (x) {
	      return {
	        source: nodeMap[x.source],
	        target: nodeMap[x.target],
	        value: x.value
	      };
	    });

	    sankey
	      .nodes(graph.nodes)
	      .links(graph.links)
	      .layout(32);

	    // add in the links
	    var link = this.svg.append("g").selectAll(".link")
	      .data(graph.links)
	      .enter().append("path")
	      .attr("class", "link")
	      .attr("data-link-name", function (d) {
	        return d.source.name.replace(' ', '-') + "-" + d.target.name.replace(' ', '-');
	      })
	      .attr("d", path)
	      .style("stroke-width", function (d) {
	        return Math.max(1, d.dy);
	      })
	      .sort(function (a, b) {
	        return b.dy - a.dy;
	      });

	    // add the link titles
	    link.append("title")
	      .text(function (d) {
	        return d.source.name + " → " +
	          d.target.name;
	      });

	    // add in the nodes
	    var node = this.svg.append("g").selectAll(".node")
	      .data(graph.nodes)
	      .enter().append("g")
	      .attr("class", "node")
	      .attr("transform", function (d) {

	        // re-inflate from state store, then update from swim
	        // service
	        if (sankeyStore && sankeyStore[d.name]) {
	          d.x = sankeyStore[d.name][0];
	          d.y = sankeyStore[d.name][1];
	        }
	        // sankey.relayout();

	        link.attr("d", function (d) {
	          var p = path(d);
	          return p;
	        });

	        return "translate(" + d.x + "," + d.y + ")";

	      })
	      .call(d3.behavior.drag()
	        .on("dragstart", function () {
	          this.parentNode.appendChild(this);
	        })
	        .on("drag", function dragmove(d) {
	          var sankeyStore = Store.get('sankey') || {};

	          d3.select(this).attr("transform",
	            "translate(" + (
	              d.x = Math.max(0, Math.min(width - d.dx, d3.event.x))
	            ) + "," + (
	              d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))
	            ) + ")");

	          sankeyStore[d.name] = [d.x, d.y];
	          Store.put('sankey', sankeyStore);

	          sankey.relayout();

	          link.attr("d", function (d) {
	            var p = path(d);
	            return p;
	          });
	        })
	    );

	    // add the rectangles for the nodes
	    node.append("rect")
	      .attr("height", function (d) {
	        return d.dy;
	      })
	      .attr("width", sankey.nodeWidth())
	      .style("fill", function (d) {
	        var state = sankeyStore[d.name];
	        var color = state.color || d.color || '#709ed4';
	        return color;
	      }) // change color of fill if node has color
	      .append("title")
	      .text(function (d) {
	        return d.name;
	      });

	    // add in the title for the nodes
	    node.append("text")
	      .attr("x", -6)
	      .attr("y", function (d) {
	        return d.dy / 2;
	      })
	      .attr("dy", ".35em")
	      .attr("text-anchor", "end")
	      .attr("transform", null)
	      .text(function (d) {
	        return d.name;
	      })
	      .filter(function (d) {
	        return d.x < width / 2;
	      })
	      .attr("x", 6 + sankey.nodeWidth())
	      .attr("text-anchor", "start");

	    // position and update the tooltip
	    node.on("mouseover", function(d){
	      return $(tooltip).toggle();
	    })
	    .on("mousemove", function(d){
	    	Store.put($(tooltip)[0].guid, d.summary);
	    	$(tooltip)[0].location = d.name;
	      return $(tooltip)
	                .css('top', (d3.event.pageY-10) + 'px')
	                .css('left', (d3.event.pageX+10) + 'px');
	    })
	    .on("mouseout", function(){
	      return $(tooltip).toggle();
	    });

	  }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(5), __webpack_require__(7)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(51);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-swim-sankey .node rect {\n  cursor: move;\n  fill-opacity: .9;\n  shape-rendering: crispEdges;\n}\nx-swim-sankey .node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\nx-swim-sankey .link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: .2;\n}\nx-swim-sankey .link:hover {\n  stroke-opacity: .5;\n}\nx-swim-sankey svg circle {\n  fill: #ffc107;\n}\nx-swim-sankey x-swim-chart-tooltip {\n  position: absolute;\n  z-index: 999;\n}\nx-swim-sankey .info {\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 20px;\n  opacity: 0.5;\n}\n", ""]);

	// exports


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// borrowed from 
	// http://bl.ocks.org/d3noob/5028304

	var d3 = __webpack_require__(22);
	d3.sankey = function() {
	  var sankey = {},
	      nodeWidth = 24,
	      nodePadding = 8,
	      size = [1, 1],
	      nodes = [],
	      links = [];
	 
	  sankey.nodeWidth = function(_) {
	    if (!arguments.length) return nodeWidth;
	    nodeWidth = +_;
	    return sankey;
	  };
	 
	  sankey.nodePadding = function(_) {
	    if (!arguments.length) return nodePadding;
	    nodePadding = +_;
	    return sankey;
	  };
	 
	  sankey.nodes = function(_) {
	    if (!arguments.length) return nodes;
	    nodes = _;
	    return sankey;
	  };
	 
	  sankey.links = function(_) {
	    if (!arguments.length) return links;
	    links = _;
	    return sankey;
	  };
	 
	  sankey.size = function(_) {
	    if (!arguments.length) return size;
	    size = _;
	    return sankey;
	  };
	 
	  sankey.layout = function(iterations) {
	    computeNodeLinks();
	    computeNodeValues();
	    computeNodeBreadths();
	    computeNodeDepths(iterations);
	    computeLinkDepths();
	    return sankey;
	  };
	 
	  sankey.relayout = function() {
	    computeLinkDepths();
	    return sankey;
	  };
	 
	  sankey.link = function() {
	    var curvature = .5;
	 
	    function link(d) {
	      var x0 = d.source.x + d.source.dx,
	          x1 = d.target.x,
	          xi = d3.interpolateNumber(x0, x1),
	          x2 = xi(curvature),
	          x3 = xi(1 - curvature),
	          y0 = d.source.y + d.sy + d.dy / 2,
	          y1 = d.target.y + d.ty + d.dy / 2;

	      var path = "M" + x0 + "," + y0
	           + "C" + x2 + "," + y0
	           + " " + x3 + "," + y1
	           + " " + x1 + "," + y1;

	      return path;
	    }
	 
	    link.curvature = function(_) {
	      if (!arguments.length) return curvature;
	      curvature = +_;
	      return link;
	    };
	 
	    return link;
	  };
	 
	  // Populate the sourceLinks and targetLinks for each node.
	  // Also, if the source and target are not objects, assume they are indices.
	  function computeNodeLinks() {
	    nodes.forEach(function(node) {
	      node.sourceLinks = [];
	      node.targetLinks = [];
	    });
	    links.forEach(function(link) {
	      var source = link.source,
	          target = link.target;
	      if (typeof source === "number") source = link.source = nodes[link.source];
	      if (typeof target === "number") target = link.target = nodes[link.target];
	      source.sourceLinks.push(link);
	      target.targetLinks.push(link);
	    });
	  }
	 
	  // Compute the value (size) of each node by summing the associated links.
	  function computeNodeValues() {
	    nodes.forEach(function(node) {
	      node.value = Math.max(
	        d3.sum(node.sourceLinks, value),
	        d3.sum(node.targetLinks, value)
	      );
	    });
	  }
	 
	  // Iteratively assign the breadth (x-position) for each node.
	  // Nodes are assigned the maximum breadth of incoming neighbors plus one;
	  // nodes with no incoming links are assigned breadth zero, while
	  // nodes with no outgoing links are assigned the maximum breadth.
	  function computeNodeBreadths() {
	    var remainingNodes = nodes,
	        nextNodes,
	        x = 0;
	 
	    while (remainingNodes.length) {
	      nextNodes = [];
	      remainingNodes.forEach(function(node) {
	        node.x = x;
	        node.dx = nodeWidth;
	        node.sourceLinks.forEach(function(link) {
	          nextNodes.push(link.target);
	        });
	      });
	      remainingNodes = nextNodes;
	      ++x;
	    }
	 
	    //
	    moveSinksRight(x);
	    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));
	  }
	 
	  function moveSourcesRight() {
	    nodes.forEach(function(node) {
	      if (!node.targetLinks.length) {
	        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;
	      }
	    });
	  }
	 
	  function moveSinksRight(x) {
	    nodes.forEach(function(node) {
	      if (!node.sourceLinks.length) {
	        node.x = x - 1;
	      }
	    });
	  }
	 
	  function scaleNodeBreadths(kx) {
	    nodes.forEach(function(node) {
	      node.x *= kx;
	    });
	  }
	 
	  function computeNodeDepths(iterations) {
	    var nodesByBreadth = d3.nest()
	        .key(function(d) { return d.x; })
	        .sortKeys(d3.ascending)
	        .entries(nodes)
	        .map(function(d) { return d.values; });
	 
	    //
	    initializeNodeDepth();
	    resolveCollisions();
	    for (var alpha = 1; iterations > 0; --iterations) {
	      relaxRightToLeft(alpha *= .99);
	      resolveCollisions();
	      relaxLeftToRight(alpha);
	      resolveCollisions();
	    }
	 
	    function initializeNodeDepth() {
	      var ky = d3.min(nodesByBreadth, function(nodes) {
	        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);
	      });
	 
	      nodesByBreadth.forEach(function(nodes) {
	        nodes.forEach(function(node, i) {
	          node.y = i;
	          node.dy = 20; //height of node
	        });
	      });
	 
	      links.forEach(function(link) {
	        link.dy = 20; //link.value * ky;
	      });
	    }
	 
	    function relaxLeftToRight(alpha) {
	      nodesByBreadth.forEach(function(nodes, breadth) {
	        nodes.forEach(function(node) {
	          if (node.targetLinks.length) {
	            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);
	            node.y += (y - center(node)) * alpha;
	          }
	        });
	      });
	 
	      function weightedSource(link) {
	        return center(link.source) * link.value;
	      }
	    }
	 
	    function relaxRightToLeft(alpha) {
	      nodesByBreadth.slice().reverse().forEach(function(nodes) {
	        nodes.forEach(function(node) {
	          if (node.sourceLinks.length) {
	            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);
	            node.y += (y - center(node)) * alpha;
	          }
	        });
	      });
	 
	      function weightedTarget(link) {
	        return center(link.target) * link.value;
	      }
	    }
	 
	    function resolveCollisions() {
	      nodesByBreadth.forEach(function(nodes) {
	        var node,
	            dy,
	            y0 = 0,
	            n = nodes.length,
	            i;
	 
	        // Push any overlapping nodes down.
	        nodes.sort(ascendingDepth);
	        for (i = 0; i < n; ++i) {
	          node = nodes[i];
	          dy = y0 - node.y;
	          if (dy > 0) node.y += dy;
	          y0 = node.y + node.dy + nodePadding;
	        }
	 
	        // If the bottommost node goes outside the bounds, push it back up.
	        dy = y0 - nodePadding - size[1];
	        if (dy > 0) {
	          y0 = node.y -= dy;
	 
	          // Push any overlapping nodes back up.
	          for (i = n - 2; i >= 0; --i) {
	            node = nodes[i];
	            dy = node.y + node.dy + nodePadding - y0;
	            if (dy > 0) node.y -= dy;
	            y0 = node.y;
	          }
	        }
	      });
	    }
	 
	    function ascendingDepth(a, b) {
	      return a.y - b.y;
	    }
	  }
	 
	  function computeLinkDepths() {
	    nodes.forEach(function(node) {
	      node.sourceLinks.sort(ascendingTargetDepth);
	      node.targetLinks.sort(ascendingSourceDepth);
	    });
	    nodes.forEach(function(node) {
	      var sy = 0, ty = 0;
	      node.sourceLinks.forEach(function(link) {
	        link.sy = sy;
	        sy += link.dy;
	      });
	      node.targetLinks.forEach(function(link) {
	        link.ty = ty;
	        ty += link.dy;
	      });
	    });
	 
	    function ascendingSourceDepth(a, b) {
	      return a.source.y - b.source.y;
	    }
	 
	    function ascendingTargetDepth(a, b) {
	      return a.target.y - b.target.y;
	    }
	  }
	 
	  function center(node) {
	    return node.y + node.dy / 2;
	  }
	 
	  function value(link) {
	    return link.value;
	  }
	 
	  return sankey;
	};


	module.exports = d3.sankey;

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	module.exports = "<x-swim-chart-tooltip style=display:none></x-swim-chart-tooltip> <i class=\"material-icons info\">info</i>";

/***/ }),
/* 54 */
/***/ (function(module, exports) {

	module.exports = {
		"links": [
			{
				"source": "Location 0001",
				"target": "Location 0002",
				"value": "1.4"
			},
			{
				"source": "Location 0002",
				"target": "Location 0003",
				"value": "1.4"
			},
			{
				"source": "Location 0003",
				"target": "Location 0004",
				"value": "1.4"
			},
			{
				"source": "Location 0004",
				"target": "Location 0005",
				"value": "1.4"
			},
			{
				"source": "Location 0005",
				"target": "Location 0006",
				"value": "1.4"
			},
			{
				"source": "Location 0006",
				"target": "Location 0007",
				"value": "1.4"
			},
			{
				"source": "Location 0007",
				"target": "Location 0008",
				"value": "1.4"
			},
			{
				"source": "Location 0008",
				"target": "Location 0009",
				"value": "1.4"
			}
		],
		"nodes": [
			{
				"name": "Location 0001",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						56
					],
					[
						"data3",
						50
					],
					[
						"data4",
						120
					]
				]
			},
			{
				"name": "Location 0002",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						30
					],
					[
						"data3",
						50
					],
					[
						"data4",
						30
					]
				]
			},
			{
				"name": "Location 0003",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						120
					],
					[
						"data3",
						50
					],
					[
						"data4",
						220
					]
				]
			},
			{
				"name": "Location 0004",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						120
					],
					[
						"data3",
						50
					],
					[
						"data4",
						220
					]
				]
			},
			{
				"name": "Location 0005",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						30
					],
					[
						"data3",
						30
					],
					[
						"data4",
						220
					]
				]
			},
			{
				"name": "Location 0006",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						320
					],
					[
						"data3",
						50
					],
					[
						"data4",
						120
					]
				]
			},
			{
				"name": "Location 0007",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						120
					],
					[
						"data3",
						50
					],
					[
						"data4",
						220
					]
				]
			},
			{
				"name": "Location 0008",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						45
					],
					[
						"data3",
						50
					],
					[
						"data4",
						20
					]
				]
			},
			{
				"name": "Location 0009",
				"color": "red",
				"summary": [
					[
						"data1",
						30
					],
					[
						"data2",
						45
					],
					[
						"data3",
						50
					],
					[
						"data4",
						220
					]
				]
			}
		]
	};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, Swim, _, d3) {__webpack_require__(56);
	var c3 = __webpack_require__(20);

	tag('x-swim-step-chart', {
	    template: __webpack_require__(58),
	    inserted: function () {
	        var _self = this;
	        _self.dates = [];
	        _self.connectivity = ['Connectivity'];
	        _self.connectivityBar = ['Connectivity_bar'];

	        var array = [];

	        Swim.downlink()
	            .host('ws://sensornet.swim.services:80/?token=abcd')
	            .node('org/NewOrg')
	            .lane('readerConnectionHistory')
	            .onEvent(function (message) {

	                var timestamp = message.body['@update'].key;
	                var value = message.body[1];

	                array.push({
	                    date: timestamp,
	                    close: value
	                });

	            })
	            .sync();

	        setTimeout(function () {

	            var sorted = _.sortedUniq(array, function (obj) {
	                return obj.timestamp;
	            });
	            
	            var margin = {top: 20, right: 50, bottom: 30, left: 50},
	                width = 996 - margin.left - margin.right,
	                height = 224 - margin.top - margin.bottom;

	            var x = d3.time.scale()
	                .range([0, width]);

	            var y = d3.scale.linear()
	                .range([height, 0]);

	            var xAxis = d3.svg.axis()
	                .scale(x)
	                .orient('bottom');

	            var yAxis = d3.svg.axis()
	                .scale(y)
	                .orient('left');

	            var line = d3.svg.area()
	                .x(function (d) {
	                    return x(d.date);
	                })
	                .y(function (d) {
	                    return y(d.close);
	                });

	            line.interpolate('step-after');
	            //line.interpolate('step-before');

	            var svg = d3.select(_self).select('.chart').append('svg')
	                .attr('width', width + margin.left + margin.right)
	                .attr('height', height + margin.top + margin.bottom)
	                .append('g')
	                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

	            var data = sorted;

	            x.domain(d3.extent(data, function (d) {
	                return d.date;
	            }));
	            y.domain(d3.extent(data, function (d) {
	                return d.close;
	            }));

	            svg.append('g')
	                .attr('class', 'x axis')
	                .attr('transform', 'translate(0,' + height + ')')
	                .call(xAxis);

	            svg.append('g')
	                .attr('class', 'y axis')
	                .call(yAxis)
	                .append('text')
	                .attr('transform', 'rotate(-90)')
	                .attr('y', 6)
	                .attr('dy', '.71em')
	                .style('text-anchor', 'end')
	                .text('Readers');

	            // draw the data as an svg path
	            svg.append('path')
	                .datum(data)
	                .attr('class', 'line')
	                .attr('d', line);

	            // draw the data points as circles
	            svg.selectAll('rect')
	                .data(data)
	                .enter().append('svg:rect')
	                .attr('x', function (d) {
	                    return x(d.date)
	                })
	                .attr('y', function (d) {
	                    return y(d.close)
	                })
	                .attr('stroke-width', 2)
	                .attr('stroke', 'steelblue')
	                .attr('fill', 'orange')
	                .attr('fill-opacity', .5)
	                .attr('width', 15)
	                .attr('height', 4)
	                .on('mouseover', function (d) {
	                    console.log('d', d);
	                })

	        }, 2000);

	        // _self.removeAlertBars();
	        // _self.createAlertBars();

	    },
	    methods: {
	        removeAlertBars: function () {
	            var alertBar = d3.selectAll(this).selectAll('.alert-bar');
	            alertBar.remove();
	        },
	        getAlert: function (height) {
	            if (height < 100) {
	                return '#ffc107';
	            } else {
	                return '#709ed4';
	            }
	        },
	        createAlertBars: function () {

	            var bars = d3.selectAll(this).selectAll('path.c3-bar');
	            var __bars = bars[0];

	            for (var i = 0; i < __bars.length; i++) {
	                var parent = d3.select(__bars[i].parentNode);
	                var bbox = __bars[i].getBBox();
	                var alert = this.getAlert(bbox.height);
	                var offset = (bbox.height - 4);

	                parent.append('rect')
	                    .attr('class', 'alert-bar')
	                    .attr('width', bbox.width)
	                    .attr('height', bbox.height - offset)
	                    .attr('x', bbox.x)
	                    .attr('y', bbox.y - 4)
	                    .attr('fill', alert)
	                    .attr('fill-opacity', 1)
	            }

	            bars.remove();

	        }
	    }

	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(33), __webpack_require__(2), __webpack_require__(22)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(57);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!../../less-loader/index.js!./style.less", function() {
				var newContent = require("!!../../css-loader/index.js!../../less-loader/index.js!./style.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, "x-swim-step-chart {\n  width: 100%;\n  height: 100%;\n  display: block;\n  color: rgba(112, 158, 212, 0.5);\n}\nx-swim-step-chart path.c3-bar {\n  fill-opacity: 0;\n  stroke-width: 0;\n}\n.chart-wrapper {\n  height: 100%;\n  width: 100%;\n  position: relative;\n}\n.chart-wrapper form {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n}\n.chart {\n  height: 100%;\n  width: 100%;\n  display: block;\n}\n.axis path,\n.axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n.x.axis path {\n  display: none;\n}\n.line {\n  fill: none;\n  stroke: steelblue;\n  stroke-width: 1.5px;\n}\n", ""]);

	// exports


/***/ }),
/* 58 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"chart mdl-card mdl-shadow--2dp\"></div>";

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(12);
	var debug = utils.getParameterByName('debug');
	module.exports = function (appname) {
	    return function () {
	        // var debug = require('debug')('app-name');
	        // if(debug())
	        return app.debug || debug;
	    };
	};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(tag, _) {'use strict';

	/* this library handles standalone packages for 
	 *  Swim Apps.
	 *
	 *  Standalone Swim Apps
	 *
	 *
	 */
	var global = global || window;
	var swimModules = {};
	var swimModule = {
	    require: function require(name) {
	        return document.createElement(swimModules[name]);
	    },
	    register: function register(name, def) {
	        if (swimModules[name]) {
	            if (console) console.warn('module already registered');
	            return;
	        }

	        tag('x-' + name, {
	            template: def.template,
	            accessors: {
	                data: {
	                    attribute: {},
	                    get: function get() {
	                        return this._data;
	                    },
	                    set: function set(value) {
	                        this._data = value;
	                        this.update();
	                    }
	                }
	            },
	            methods: {
	                update: _.debounce(function () {
	                    requestAnimationFrame(def.updated);
	                }, 1000 / 30)
	            },
	            created: def.created,
	            inserted: def.inserted
	        });

	        swimModules[name] = 'x-' + name;
	    }
	};

	swimModule = global && global.swimModule || swimModule;

	global.swimModule = swimModule;
	global.swimModules = swimModules;
	module.exports = swimModule;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(2)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(62);
	module.exports = __webpack_require__(64);

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(63);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(17)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../css-loader/index.js!./odometer-theme-minimal.css", function() {
				var newContent = require("!!../../css-loader/index.js!./odometer-theme-minimal.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(16)();
	// imports


	// module
	exports.push([module.id, ".odometer.odometer-auto-theme, .odometer.odometer-theme-minimal {\n  display: inline-block;\n  vertical-align: middle;\n  *vertical-align: auto;\n  *zoom: 1;\n  *display: inline;\n  position: relative;\n}\n.odometer.odometer-auto-theme .odometer-digit, .odometer.odometer-theme-minimal .odometer-digit {\n  display: inline-block;\n  vertical-align: middle;\n  *vertical-align: auto;\n  *zoom: 1;\n  *display: inline;\n  position: relative;\n}\n.odometer.odometer-auto-theme .odometer-digit .odometer-digit-spacer, .odometer.odometer-theme-minimal .odometer-digit .odometer-digit-spacer {\n  display: inline-block;\n  vertical-align: middle;\n  *vertical-align: auto;\n  *zoom: 1;\n  *display: inline;\n  visibility: hidden;\n}\n.odometer.odometer-auto-theme .odometer-digit .odometer-digit-inner, .odometer.odometer-theme-minimal .odometer-digit .odometer-digit-inner {\n  text-align: left;\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n}\n.odometer.odometer-auto-theme .odometer-digit .odometer-ribbon, .odometer.odometer-theme-minimal .odometer-digit .odometer-ribbon {\n  display: block;\n}\n.odometer.odometer-auto-theme .odometer-digit .odometer-ribbon-inner, .odometer.odometer-theme-minimal .odometer-digit .odometer-ribbon-inner {\n  display: block;\n  -webkit-backface-visibility: hidden;\n}\n.odometer.odometer-auto-theme .odometer-digit .odometer-value, .odometer.odometer-theme-minimal .odometer-digit .odometer-value {\n  display: block;\n  -webkit-transform: translateZ(0);\n}\n.odometer.odometer-auto-theme .odometer-digit .odometer-value.odometer-last-value, .odometer.odometer-theme-minimal .odometer-digit .odometer-value.odometer-last-value {\n  position: absolute;\n}\n.odometer.odometer-auto-theme.odometer-animating-up .odometer-ribbon-inner, .odometer.odometer-theme-minimal.odometer-animating-up .odometer-ribbon-inner {\n  -webkit-transition: -webkit-transform 2s;\n  -moz-transition: -moz-transform 2s;\n  -ms-transition: -ms-transform 2s;\n  -o-transition: -o-transform 2s;\n  transition: transform 2s;\n}\n.odometer.odometer-auto-theme.odometer-animating-up.odometer-animating .odometer-ribbon-inner, .odometer.odometer-theme-minimal.odometer-animating-up.odometer-animating .odometer-ribbon-inner {\n  -webkit-transform: translateY(-100%);\n  -moz-transform: translateY(-100%);\n  -ms-transform: translateY(-100%);\n  -o-transform: translateY(-100%);\n  transform: translateY(-100%);\n}\n.odometer.odometer-auto-theme.odometer-animating-down .odometer-ribbon-inner, .odometer.odometer-theme-minimal.odometer-animating-down .odometer-ribbon-inner {\n  -webkit-transform: translateY(-100%);\n  -moz-transform: translateY(-100%);\n  -ms-transform: translateY(-100%);\n  -o-transform: translateY(-100%);\n  transform: translateY(-100%);\n}\n.odometer.odometer-auto-theme.odometer-animating-down.odometer-animating .odometer-ribbon-inner, .odometer.odometer-theme-minimal.odometer-animating-down.odometer-animating .odometer-ribbon-inner {\n  -webkit-transition: -webkit-transform 2s;\n  -moz-transition: -moz-transform 2s;\n  -ms-transition: -ms-transform 2s;\n  -o-transition: -o-transform 2s;\n  transition: transform 2s;\n  -webkit-transform: translateY(0);\n  -moz-transform: translateY(0);\n  -ms-transform: translateY(0);\n  -o-transform: translateY(0);\n  transform: translateY(0);\n}\n", ""]);

	// exports


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {
	  var COUNT_FRAMERATE, COUNT_MS_PER_FRAME, DIGIT_FORMAT, DIGIT_HTML, DIGIT_SPEEDBOOST, DURATION, FORMAT_MARK_HTML, FORMAT_PARSER, FRAMERATE, FRAMES_PER_VALUE, MS_PER_FRAME, MutationObserver, Odometer, RIBBON_HTML, TRANSITION_END_EVENTS, TRANSITION_SUPPORT, VALUE_HTML, addClass, createFromHTML, fractionalPart, now, removeClass, requestAnimationFrame, round, transitionCheckStyles, trigger, truncate, wrapJQuery, _jQueryWrapped, _old, _ref, _ref1,
	    __slice = [].slice;

	  VALUE_HTML = '<span class="odometer-value"></span>';

	  RIBBON_HTML = '<span class="odometer-ribbon"><span class="odometer-ribbon-inner">' + VALUE_HTML + '</span></span>';

	  DIGIT_HTML = '<span class="odometer-digit"><span class="odometer-digit-spacer">8</span><span class="odometer-digit-inner">' + RIBBON_HTML + '</span></span>';

	  FORMAT_MARK_HTML = '<span class="odometer-formatting-mark"></span>';

	  DIGIT_FORMAT = '(,ddd).dd';

	  FORMAT_PARSER = /^\(?([^)]*)\)?(?:(.)(d+))?$/;

	  FRAMERATE = 30;

	  DURATION = 2000;

	  COUNT_FRAMERATE = 20;

	  FRAMES_PER_VALUE = 2;

	  DIGIT_SPEEDBOOST = .5;

	  MS_PER_FRAME = 1000 / FRAMERATE;

	  COUNT_MS_PER_FRAME = 1000 / COUNT_FRAMERATE;

	  TRANSITION_END_EVENTS = 'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd';

	  transitionCheckStyles = document.createElement('div').style;

	  TRANSITION_SUPPORT = (transitionCheckStyles.transition != null) || (transitionCheckStyles.webkitTransition != null) || (transitionCheckStyles.mozTransition != null) || (transitionCheckStyles.oTransition != null);

	  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

	  MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

	  createFromHTML = function(html) {
	    var el;
	    el = document.createElement('div');
	    el.innerHTML = html;
	    return el.children[0];
	  };

	  removeClass = function(el, name) {
	    return el.className = el.className.replace(new RegExp("(^| )" + (name.split(' ').join('|')) + "( |$)", 'gi'), ' ');
	  };

	  addClass = function(el, name) {
	    removeClass(el, name);
	    return el.className += " " + name;
	  };

	  trigger = function(el, name) {
	    var evt;
	    if (document.createEvent != null) {
	      evt = document.createEvent('HTMLEvents');
	      evt.initEvent(name, true, true);
	      return el.dispatchEvent(evt);
	    }
	  };

	  now = function() {
	    var _ref, _ref1;
	    return (_ref = (_ref1 = window.performance) != null ? typeof _ref1.now === "function" ? _ref1.now() : void 0 : void 0) != null ? _ref : +(new Date);
	  };

	  round = function(val, precision) {
	    if (precision == null) {
	      precision = 0;
	    }
	    if (!precision) {
	      return Math.round(val);
	    }
	    val *= Math.pow(10, precision);
	    val += 0.5;
	    val = Math.floor(val);
	    return val /= Math.pow(10, precision);
	  };

	  truncate = function(val) {
	    if (val < 0) {
	      return Math.ceil(val);
	    } else {
	      return Math.floor(val);
	    }
	  };

	  fractionalPart = function(val) {
	    return val - round(val);
	  };

	  _jQueryWrapped = false;

	  (wrapJQuery = function() {
	    var property, _i, _len, _ref, _results;
	    if (_jQueryWrapped) {
	      return;
	    }
	    if (window.jQuery != null) {
	      _jQueryWrapped = true;
	      _ref = ['html', 'text'];
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        property = _ref[_i];
	        _results.push((function(property) {
	          var old;
	          old = window.jQuery.fn[property];
	          return window.jQuery.fn[property] = function(val) {
	            var _ref1;
	            if ((val == null) || (((_ref1 = this[0]) != null ? _ref1.odometer : void 0) == null)) {
	              return old.apply(this, arguments);
	            }
	            return this[0].odometer.update(val);
	          };
	        })(property));
	      }
	      return _results;
	    }
	  })();

	  setTimeout(wrapJQuery, 0);

	  Odometer = (function() {
	    function Odometer(options) {
	      var e, k, property, v, _base, _i, _len, _ref, _ref1, _ref2,
	        _this = this;
	      this.options = options;
	      this.el = this.options.el;
	      if (this.el.odometer != null) {
	        return this.el.odometer;
	      }
	      this.el.odometer = this;
	      _ref = Odometer.options;
	      for (k in _ref) {
	        v = _ref[k];
	        if (this.options[k] == null) {
	          this.options[k] = v;
	        }
	      }
	      if ((_base = this.options).duration == null) {
	        _base.duration = DURATION;
	      }
	      this.MAX_VALUES = ((this.options.duration / MS_PER_FRAME) / FRAMES_PER_VALUE) | 0;
	      this.resetFormat();
	      this.value = this.cleanValue((_ref1 = this.options.value) != null ? _ref1 : '');
	      this.renderInside();
	      this.render();
	      try {
	        _ref2 = ['innerHTML', 'innerText', 'textContent'];
	        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
	          property = _ref2[_i];
	          if (this.el[property] != null) {
	            (function(property) {
	              return Object.defineProperty(_this.el, property, {
	                get: function() {
	                  var _ref3;
	                  if (property === 'innerHTML') {
	                    return _this.inside.outerHTML;
	                  } else {
	                    return (_ref3 = _this.inside.innerText) != null ? _ref3 : _this.inside.textContent;
	                  }
	                },
	                set: function(val) {
	                  return _this.update(val);
	                }
	              });
	            })(property);
	          }
	        }
	      } catch (_error) {
	        e = _error;
	        this.watchForMutations();
	      }
	      this;
	    }

	    Odometer.prototype.renderInside = function() {
	      this.inside = document.createElement('div');
	      this.inside.className = 'odometer-inside';
	      this.el.innerHTML = '';
	      return this.el.appendChild(this.inside);
	    };

	    Odometer.prototype.watchForMutations = function() {
	      var e,
	        _this = this;
	      if (MutationObserver == null) {
	        return;
	      }
	      try {
	        if (this.observer == null) {
	          this.observer = new MutationObserver(function(mutations) {
	            var newVal;
	            newVal = _this.el.innerText;
	            _this.renderInside();
	            _this.render(_this.value);
	            return _this.update(newVal);
	          });
	        }
	        this.watchMutations = true;
	        return this.startWatchingMutations();
	      } catch (_error) {
	        e = _error;
	      }
	    };

	    Odometer.prototype.startWatchingMutations = function() {
	      if (this.watchMutations) {
	        return this.observer.observe(this.el, {
	          childList: true
	        });
	      }
	    };

	    Odometer.prototype.stopWatchingMutations = function() {
	      var _ref;
	      return (_ref = this.observer) != null ? _ref.disconnect() : void 0;
	    };

	    Odometer.prototype.cleanValue = function(val) {
	      var _ref;
	      if (typeof val === 'string') {
	        val = val.replace((_ref = this.format.radix) != null ? _ref : '.', '<radix>');
	        val = val.replace(/[.,]/g, '');
	        val = val.replace('<radix>', '.');
	        val = parseFloat(val, 10) || 0;
	      }
	      return round(val, this.format.precision);
	    };

	    Odometer.prototype.bindTransitionEnd = function() {
	      var event, renderEnqueued, _i, _len, _ref, _results,
	        _this = this;
	      if (this.transitionEndBound) {
	        return;
	      }
	      this.transitionEndBound = true;
	      renderEnqueued = false;
	      _ref = TRANSITION_END_EVENTS.split(' ');
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        event = _ref[_i];
	        _results.push(this.el.addEventListener(event, function() {
	          if (renderEnqueued) {
	            return true;
	          }
	          renderEnqueued = true;
	          setTimeout(function() {
	            _this.render();
	            renderEnqueued = false;
	            return trigger(_this.el, 'odometerdone');
	          }, 0);
	          return true;
	        }, false));
	      }
	      return _results;
	    };

	    Odometer.prototype.resetFormat = function() {
	      var format, fractional, parsed, precision, radix, repeating, _ref, _ref1;
	      format = (_ref = this.options.format) != null ? _ref : DIGIT_FORMAT;
	      format || (format = 'd');
	      parsed = FORMAT_PARSER.exec(format);
	      if (!parsed) {
	        throw new Error("Odometer: Unparsable digit format");
	      }
	      _ref1 = parsed.slice(1, 4), repeating = _ref1[0], radix = _ref1[1], fractional = _ref1[2];
	      precision = (fractional != null ? fractional.length : void 0) || 0;
	      return this.format = {
	        repeating: repeating,
	        radix: radix,
	        precision: precision
	      };
	    };

	    Odometer.prototype.render = function(value) {
	      var classes, cls, match, newClasses, theme, _i, _len;
	      if (value == null) {
	        value = this.value;
	      }
	      this.stopWatchingMutations();
	      this.resetFormat();
	      this.inside.innerHTML = '';
	      theme = this.options.theme;
	      classes = this.el.className.split(' ');
	      newClasses = [];
	      for (_i = 0, _len = classes.length; _i < _len; _i++) {
	        cls = classes[_i];
	        if (!cls.length) {
	          continue;
	        }
	        if (match = /^odometer-theme-(.+)$/.exec(cls)) {
	          theme = match[1];
	          continue;
	        }
	        if (/^odometer(-|$)/.test(cls)) {
	          continue;
	        }
	        newClasses.push(cls);
	      }
	      newClasses.push('odometer');
	      if (!TRANSITION_SUPPORT) {
	        newClasses.push('odometer-no-transitions');
	      }
	      if (theme) {
	        newClasses.push("odometer-theme-" + theme);
	      } else {
	        newClasses.push("odometer-auto-theme");
	      }
	      this.el.className = newClasses.join(' ');
	      this.ribbons = {};
	      this.formatDigits(value);
	      return this.startWatchingMutations();
	    };

	    Odometer.prototype.formatDigits = function(value) {
	      var digit, valueDigit, valueString, wholePart, _i, _j, _len, _len1, _ref, _ref1;
	      this.digits = [];
	      if (this.options.formatFunction) {
	        valueString = this.options.formatFunction(value);
	        _ref = valueString.split('').reverse();
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          valueDigit = _ref[_i];
	          if (valueDigit.match(/0-9/)) {
	            digit = this.renderDigit();
	            digit.querySelector('.odometer-value').innerHTML = valueDigit;
	            this.digits.push(digit);
	            this.insertDigit(digit);
	          } else {
	            this.addSpacer(valueDigit);
	          }
	        }
	      } else {
	        wholePart = !this.format.precision || !fractionalPart(value) || false;
	        _ref1 = value.toString().split('').reverse();
	        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
	          digit = _ref1[_j];
	          if (digit === '.') {
	            wholePart = true;
	          }
	          this.addDigit(digit, wholePart);
	        }
	      }
	    };

	    Odometer.prototype.update = function(newValue) {
	      var diff,
	        _this = this;
	      newValue = this.cleanValue(newValue);
	      if (!(diff = newValue - this.value)) {
	        return;
	      }
	      removeClass(this.el, 'odometer-animating-up odometer-animating-down odometer-animating');
	      if (diff > 0) {
	        addClass(this.el, 'odometer-animating-up');
	      } else {
	        addClass(this.el, 'odometer-animating-down');
	      }
	      this.stopWatchingMutations();
	      this.animate(newValue);
	      this.startWatchingMutations();
	      setTimeout(function() {
	        _this.el.offsetHeight;
	        return addClass(_this.el, 'odometer-animating');
	      }, 0);
	      return this.value = newValue;
	    };

	    Odometer.prototype.renderDigit = function() {
	      return createFromHTML(DIGIT_HTML);
	    };

	    Odometer.prototype.insertDigit = function(digit, before) {
	      if (before != null) {
	        return this.inside.insertBefore(digit, before);
	      } else if (!this.inside.children.length) {
	        return this.inside.appendChild(digit);
	      } else {
	        return this.inside.insertBefore(digit, this.inside.children[0]);
	      }
	    };

	    Odometer.prototype.addSpacer = function(chr, before, extraClasses) {
	      var spacer;
	      spacer = createFromHTML(FORMAT_MARK_HTML);
	      spacer.innerHTML = chr;
	      if (extraClasses) {
	        addClass(spacer, extraClasses);
	      }
	      return this.insertDigit(spacer, before);
	    };

	    Odometer.prototype.addDigit = function(value, repeating) {
	      var chr, digit, resetted, _ref;
	      if (repeating == null) {
	        repeating = true;
	      }
	      if (value === '-') {
	        return this.addSpacer(value, null, 'odometer-negation-mark');
	      }
	      if (value === '.') {
	        return this.addSpacer((_ref = this.format.radix) != null ? _ref : '.', null, 'odometer-radix-mark');
	      }
	      if (repeating) {
	        resetted = false;
	        while (true) {
	          if (!this.format.repeating.length) {
	            if (resetted) {
	              throw new Error("Bad odometer format without digits");
	            }
	            this.resetFormat();
	            resetted = true;
	          }
	          chr = this.format.repeating[this.format.repeating.length - 1];
	          this.format.repeating = this.format.repeating.substring(0, this.format.repeating.length - 1);
	          if (chr === 'd') {
	            break;
	          }
	          this.addSpacer(chr);
	        }
	      }
	      digit = this.renderDigit();
	      digit.querySelector('.odometer-value').innerHTML = value;
	      this.digits.push(digit);
	      return this.insertDigit(digit);
	    };

	    Odometer.prototype.animate = function(newValue) {
	      if (!TRANSITION_SUPPORT || this.options.animation === 'count') {
	        return this.animateCount(newValue);
	      } else {
	        return this.animateSlide(newValue);
	      }
	    };

	    Odometer.prototype.animateCount = function(newValue) {
	      var cur, diff, last, start, tick,
	        _this = this;
	      if (!(diff = +newValue - this.value)) {
	        return;
	      }
	      start = last = now();
	      cur = this.value;
	      return (tick = function() {
	        var delta, dist, fraction;
	        if ((now() - start) > _this.options.duration) {
	          _this.value = newValue;
	          _this.render();
	          trigger(_this.el, 'odometerdone');
	          return;
	        }
	        delta = now() - last;
	        if (delta > COUNT_MS_PER_FRAME) {
	          last = now();
	          fraction = delta / _this.options.duration;
	          dist = diff * fraction;
	          cur += dist;
	          _this.render(Math.round(cur));
	        }
	        if (requestAnimationFrame != null) {
	          return requestAnimationFrame(tick);
	        } else {
	          return setTimeout(tick, COUNT_MS_PER_FRAME);
	        }
	      })();
	    };

	    Odometer.prototype.getDigitCount = function() {
	      var i, max, value, values, _i, _len;
	      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
	        value = values[i];
	        values[i] = Math.abs(value);
	      }
	      max = Math.max.apply(Math, values);
	      return Math.ceil(Math.log(max + 1) / Math.log(10));
	    };

	    Odometer.prototype.getFractionalDigitCount = function() {
	      var i, parser, parts, value, values, _i, _len;
	      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      parser = /^\-?\d*\.(\d*?)0*$/;
	      for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
	        value = values[i];
	        values[i] = value.toString();
	        parts = parser.exec(values[i]);
	        if (parts == null) {
	          values[i] = 0;
	        } else {
	          values[i] = parts[1].length;
	        }
	      }
	      return Math.max.apply(Math, values);
	    };

	    Odometer.prototype.resetDigits = function() {
	      this.digits = [];
	      this.ribbons = [];
	      this.inside.innerHTML = '';
	      return this.resetFormat();
	    };

	    Odometer.prototype.animateSlide = function(newValue) {
	      var boosted, cur, diff, digitCount, digits, dist, end, fractionalCount, frame, frames, i, incr, j, mark, numEl, oldValue, start, _base, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _results;
	      oldValue = this.value;
	      fractionalCount = this.getFractionalDigitCount(oldValue, newValue);
	      if (fractionalCount) {
	        newValue = newValue * Math.pow(10, fractionalCount);
	        oldValue = oldValue * Math.pow(10, fractionalCount);
	      }
	      if (!(diff = newValue - oldValue)) {
	        return;
	      }
	      this.bindTransitionEnd();
	      digitCount = this.getDigitCount(oldValue, newValue);
	      digits = [];
	      boosted = 0;
	      for (i = _i = 0; 0 <= digitCount ? _i < digitCount : _i > digitCount; i = 0 <= digitCount ? ++_i : --_i) {
	        start = truncate(oldValue / Math.pow(10, digitCount - i - 1));
	        end = truncate(newValue / Math.pow(10, digitCount - i - 1));
	        dist = end - start;
	        if (Math.abs(dist) > this.MAX_VALUES) {
	          frames = [];
	          incr = dist / (this.MAX_VALUES + this.MAX_VALUES * boosted * DIGIT_SPEEDBOOST);
	          cur = start;
	          while ((dist > 0 && cur < end) || (dist < 0 && cur > end)) {
	            frames.push(Math.round(cur));
	            cur += incr;
	          }
	          if (frames[frames.length - 1] !== end) {
	            frames.push(end);
	          }
	          boosted++;
	        } else {
	          frames = (function() {
	            _results = [];
	            for (var _j = start; start <= end ? _j <= end : _j >= end; start <= end ? _j++ : _j--){ _results.push(_j); }
	            return _results;
	          }).apply(this);
	        }
	        for (i = _k = 0, _len = frames.length; _k < _len; i = ++_k) {
	          frame = frames[i];
	          frames[i] = Math.abs(frame % 10);
	        }
	        digits.push(frames);
	      }
	      this.resetDigits();
	      _ref = digits.reverse();
	      for (i = _l = 0, _len1 = _ref.length; _l < _len1; i = ++_l) {
	        frames = _ref[i];
	        if (!this.digits[i]) {
	          this.addDigit(' ', i >= fractionalCount);
	        }
	        if ((_base = this.ribbons)[i] == null) {
	          _base[i] = this.digits[i].querySelector('.odometer-ribbon-inner');
	        }
	        this.ribbons[i].innerHTML = '';
	        if (diff < 0) {
	          frames = frames.reverse();
	        }
	        for (j = _m = 0, _len2 = frames.length; _m < _len2; j = ++_m) {
	          frame = frames[j];
	          numEl = document.createElement('div');
	          numEl.className = 'odometer-value';
	          numEl.innerHTML = frame;
	          this.ribbons[i].appendChild(numEl);
	          if (j === frames.length - 1) {
	            addClass(numEl, 'odometer-last-value');
	          }
	          if (j === 0) {
	            addClass(numEl, 'odometer-first-value');
	          }
	        }
	      }
	      if (start < 0) {
	        this.addDigit('-');
	      }
	      mark = this.inside.querySelector('.odometer-radix-mark');
	      if (mark != null) {
	        mark.parent.removeChild(mark);
	      }
	      if (fractionalCount) {
	        return this.addSpacer(this.format.radix, this.digits[fractionalCount - 1], 'odometer-radix-mark');
	      }
	    };

	    return Odometer;

	  })();

	  Odometer.options = (_ref = window.odometerOptions) != null ? _ref : {};

	  setTimeout(function() {
	    var k, v, _base, _ref1, _results;
	    if (window.odometerOptions) {
	      _ref1 = window.odometerOptions;
	      _results = [];
	      for (k in _ref1) {
	        v = _ref1[k];
	        _results.push((_base = Odometer.options)[k] != null ? (_base = Odometer.options)[k] : _base[k] = v);
	      }
	      return _results;
	    }
	  }, 0);

	  Odometer.init = function() {
	    var el, elements, _i, _len, _ref1, _results;
	    if (document.querySelectorAll == null) {
	      return;
	    }
	    elements = document.querySelectorAll(Odometer.options.selector || '.odometer');
	    _results = [];
	    for (_i = 0, _len = elements.length; _i < _len; _i++) {
	      el = elements[_i];
	      _results.push(el.odometer = new Odometer({
	        el: el,
	        value: (_ref1 = el.innerText) != null ? _ref1 : el.textContent
	      }));
	    }
	    return _results;
	  };

	  if ((((_ref1 = document.documentElement) != null ? _ref1.doScroll : void 0) != null) && (document.createEventObject != null)) {
	    _old = document.onreadystatechange;
	    document.onreadystatechange = function() {
	      if (document.readyState === 'complete' && Odometer.options.auto !== false) {
	        Odometer.init();
	      }
	      return _old != null ? _old.apply(this, arguments) : void 0;
	    };
	  } else {
	    document.addEventListener('DOMContentLoaded', function() {
	      if (Odometer.options.auto !== false) {
	        return Odometer.init();
	      }
	    }, false);
	  }

	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Odometer;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined" && exports !== null) {
	    module.exports = Odometer;
	  } else {
	    window.Odometer = Odometer;
	  }

	}).call(this);


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(66).Router;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Router) {

	//
	// Generated on Tue Dec 16 2014 12:13:47 GMT+0100 (CET) by Charlie Robbins, Paolo Fragomeni & the Contributors (Using Codesurgeon).
	// Version 1.2.6
	//

	(function (exports) {

	/*
	 * browser.js: Browser specific functionality for director.
	 *
	 * (C) 2011, Charlie Robbins, Paolo Fragomeni, & the Contributors.
	 * MIT LICENSE
	 *
	 */

	var dloc = document.location;

	function dlocHashEmpty() {
	  // Non-IE browsers return '' when the address bar shows '#'; Director's logic
	  // assumes both mean empty.
	  return dloc.hash === '' || dloc.hash === '#';
	}

	var listener = {
	  mode: 'modern',
	  hash: dloc.hash,
	  history: false,

	  check: function () {
	    var h = dloc.hash;
	    if (h != this.hash) {
	      this.hash = h;
	      this.onHashChanged();
	    }
	  },

	  fire: function () {
	    if (this.mode === 'modern') {
	      this.history === true ? window.onpopstate() : window.onhashchange();
	    }
	    else {
	      this.onHashChanged();
	    }
	  },

	  init: function (fn, history) {
	    var self = this;
	    this.history = history;

	    if (!Router.listeners) {
	      Router.listeners = [];
	    }

	    function onchange(onChangeEvent) {
	      for (var i = 0, l = Router.listeners.length; i < l; i++) {
	        Router.listeners[i](onChangeEvent);
	      }
	    }

	    //note IE8 is being counted as 'modern' because it has the hashchange event
	    if ('onhashchange' in window && (document.documentMode === undefined
	      || document.documentMode > 7)) {
	      // At least for now HTML5 history is available for 'modern' browsers only
	      if (this.history === true) {
	        // There is an old bug in Chrome that causes onpopstate to fire even
	        // upon initial page load. Since the handler is run manually in init(),
	        // this would cause Chrome to run it twise. Currently the only
	        // workaround seems to be to set the handler after the initial page load
	        // http://code.google.com/p/chromium/issues/detail?id=63040
	        setTimeout(function() {
	          window.onpopstate = onchange;
	        }, 500);
	      }
	      else {
	        window.onhashchange = onchange;
	      }
	      this.mode = 'modern';
	    }
	    else {
	      //
	      // IE support, based on a concept by Erik Arvidson ...
	      //
	      var frame = document.createElement('iframe');
	      frame.id = 'state-frame';
	      frame.style.display = 'none';
	      document.body.appendChild(frame);
	      this.writeFrame('');

	      if ('onpropertychange' in document && 'attachEvent' in document) {
	        document.attachEvent('onpropertychange', function () {
	          if (event.propertyName === 'location') {
	            self.check();
	          }
	        });
	      }

	      window.setInterval(function () { self.check(); }, 50);

	      this.onHashChanged = onchange;
	      this.mode = 'legacy';
	    }

	    Router.listeners.push(fn);

	    return this.mode;
	  },

	  destroy: function (fn) {
	    if (!Router || !Router.listeners) {
	      return;
	    }

	    var listeners = Router.listeners;

	    for (var i = listeners.length - 1; i >= 0; i--) {
	      if (listeners[i] === fn) {
	        listeners.splice(i, 1);
	      }
	    }
	  },

	  setHash: function (s) {
	    // Mozilla always adds an entry to the history
	    if (this.mode === 'legacy') {
	      this.writeFrame(s);
	    }

	    if (this.history === true) {
	      window.history.pushState({}, document.title, s);
	      // Fire an onpopstate event manually since pushing does not obviously
	      // trigger the pop event.
	      this.fire();
	    } else {
	      dloc.hash = (s[0] === '/') ? s : '/' + s;
	    }
	    return this;
	  },

	  writeFrame: function (s) {
	    // IE support...
	    var f = document.getElementById('state-frame');
	    var d = f.contentDocument || f.contentWindow.document;
	    d.open();
	    d.write("<script>_hash = '" + s + "'; onload = parent.listener.syncHash;<script>");
	    d.close();
	  },

	  syncHash: function () {
	    // IE support...
	    var s = this._hash;
	    if (s != dloc.hash) {
	      dloc.hash = s;
	    }
	    return this;
	  },

	  onHashChanged: function () {}
	};

	var Router = exports.Router = function (routes) {
	  if (!(this instanceof Router)) return new Router(routes);

	  this.params   = {};
	  this.routes   = {};
	  this.methods  = ['on', 'once', 'after', 'before'];
	  this.scope    = [];
	  this._methods = {};

	  this._insert = this.insert;
	  this.insert = this.insertEx;

	  this.historySupport = (window.history != null ? window.history.pushState : null) != null

	  this.configure();
	  this.mount(routes || {});
	};

	Router.prototype.init = function (r) {
	  var self = this
	    , routeTo;
	  this.handler = function(onChangeEvent) {
	    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;
	    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '');
	    self.dispatch('on', url.charAt(0) === '/' ? url : '/' + url);
	  };

	  listener.init(this.handler, this.history);

	  if (this.history === false) {
	    if (dlocHashEmpty() && r) {
	      dloc.hash = r;
	    } else if (!dlocHashEmpty()) {
	      self.dispatch('on', '/' + dloc.hash.replace(/^(#\/|#|\/)/, ''));
	    }
	  }
	  else {
	    if (this.convert_hash_in_init) {
	      // Use hash as route
	      routeTo = dlocHashEmpty() && r ? r : !dlocHashEmpty() ? dloc.hash.replace(/^#/, '') : null;
	      if (routeTo) {
	        window.history.replaceState({}, document.title, routeTo);
	      }
	    }
	    else {
	      // Use canonical url
	      routeTo = this.getPath();
	    }

	    // Router has been initialized, but due to the chrome bug it will not
	    // yet actually route HTML5 history state changes. Thus, decide if should route.
	    if (routeTo || this.run_in_init === true) {
	      this.handler();
	    }
	  }

	  return this;
	};

	Router.prototype.explode = function () {
	  var v = this.history === true ? this.getPath() : dloc.hash;
	  if (v.charAt(1) === '/') { v=v.slice(1) }
	  return v.slice(1, v.length).split("/");
	};

	Router.prototype.setRoute = function (i, v, val) {
	  var url = this.explode();

	  if (typeof i === 'number' && typeof v === 'string') {
	    url[i] = v;
	  }
	  else if (typeof val === 'string') {
	    url.splice(i, v, s);
	  }
	  else {
	    url = [i];
	  }

	  listener.setHash(url.join('/'));
	  return url;
	};

	//
	// ### function insertEx(method, path, route, parent)
	// #### @method {string} Method to insert the specific `route`.
	// #### @path {Array} Parsed path to insert the `route` at.
	// #### @route {Array|function} Route handlers to insert.
	// #### @parent {Object} **Optional** Parent "routes" to insert into.
	// insert a callback that will only occur once per the matched route.
	//
	Router.prototype.insertEx = function(method, path, route, parent) {
	  if (method === "once") {
	    method = "on";
	    route = function(route) {
	      var once = false;
	      return function() {
	        if (once) return;
	        once = true;
	        return route.apply(this, arguments);
	      };
	    }(route);
	  }
	  return this._insert(method, path, route, parent);
	};

	Router.prototype.getRoute = function (v) {
	  var ret = v;

	  if (typeof v === "number") {
	    ret = this.explode()[v];
	  }
	  else if (typeof v === "string"){
	    var h = this.explode();
	    ret = h.indexOf(v);
	  }
	  else {
	    ret = this.explode();
	  }

	  return ret;
	};

	Router.prototype.destroy = function () {
	  listener.destroy(this.handler);
	  return this;
	};

	Router.prototype.getPath = function () {
	  var path = window.location.pathname;
	  if (path.substr(0, 1) !== '/') {
	    path = '/' + path;
	  }
	  return path;
	};
	function _every(arr, iterator) {
	  for (var i = 0; i < arr.length; i += 1) {
	    if (iterator(arr[i], i, arr) === false) {
	      return;
	    }
	  }
	}

	function _flatten(arr) {
	  var flat = [];
	  for (var i = 0, n = arr.length; i < n; i++) {
	    flat = flat.concat(arr[i]);
	  }
	  return flat;
	}

	function _asyncEverySeries(arr, iterator, callback) {
	  if (!arr.length) {
	    return callback();
	  }
	  var completed = 0;
	  (function iterate() {
	    iterator(arr[completed], function(err) {
	      if (err || err === false) {
	        callback(err);
	        callback = function() {};
	      } else {
	        completed += 1;
	        if (completed === arr.length) {
	          callback();
	        } else {
	          iterate();
	        }
	      }
	    });
	  })();
	}

	function paramifyString(str, params, mod) {
	  mod = str;
	  for (var param in params) {
	    if (params.hasOwnProperty(param)) {
	      mod = params[param](str);
	      if (mod !== str) {
	        break;
	      }
	    }
	  }
	  return mod === str ? "([._a-zA-Z0-9-%()]+)" : mod;
	}

	function regifyString(str, params) {
	  var matches, last = 0, out = "";
	  while (matches = str.substr(last).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/)) {
	    last = matches.index + matches[0].length;
	    matches[0] = matches[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)");
	    out += str.substr(0, matches.index) + matches[0];
	  }
	  str = out += str.substr(last);
	  var captures = str.match(/:([^\/]+)/ig), capture, length;
	  if (captures) {
	    length = captures.length;
	    for (var i = 0; i < length; i++) {
	      capture = captures[i];
	      if (capture.slice(0, 2) === "::") {
	        str = capture.slice(1);
	      } else {
	        str = str.replace(capture, paramifyString(capture, params));
	      }
	    }
	  }
	  return str;
	}

	function terminator(routes, delimiter, start, stop) {
	  var last = 0, left = 0, right = 0, start = (start || "(").toString(), stop = (stop || ")").toString(), i;
	  for (i = 0; i < routes.length; i++) {
	    var chunk = routes[i];
	    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {
	      left = chunk.indexOf(start, last);
	      right = chunk.indexOf(stop, last);
	      if (~left && !~right || !~left && ~right) {
	        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);
	        routes = [ tmp ].concat(routes.slice((i || 1) + 1));
	      }
	      last = (right > left ? right : left) + 1;
	      i = 0;
	    } else {
	      last = 0;
	    }
	  }
	  return routes;
	}

	var QUERY_SEPARATOR = /\?.*/;

	Router.prototype.configure = function(options) {
	  options = options || {};
	  for (var i = 0; i < this.methods.length; i++) {
	    this._methods[this.methods[i]] = true;
	  }
	  this.recurse = options.recurse || this.recurse || false;
	  this.async = options.async || false;
	  this.delimiter = options.delimiter || "/";
	  this.strict = typeof options.strict === "undefined" ? true : options.strict;
	  this.notfound = options.notfound;
	  this.resource = options.resource;
	  this.history = options.html5history && this.historySupport || false;
	  this.run_in_init = this.history === true && options.run_handler_in_init !== false;
	  this.convert_hash_in_init = this.history === true && options.convert_hash_in_init !== false;
	  this.every = {
	    after: options.after || null,
	    before: options.before || null,
	    on: options.on || null
	  };
	  return this;
	};

	Router.prototype.param = function(token, matcher) {
	  if (token[0] !== ":") {
	    token = ":" + token;
	  }
	  var compiled = new RegExp(token, "g");
	  this.params[token] = function(str) {
	    return str.replace(compiled, matcher.source || matcher);
	  };
	  return this;
	};

	Router.prototype.on = Router.prototype.route = function(method, path, route) {
	  var self = this;
	  if (!route && typeof path == "function") {
	    route = path;
	    path = method;
	    method = "on";
	  }
	  if (Array.isArray(path)) {
	    return path.forEach(function(p) {
	      self.on(method, p, route);
	    });
	  }
	  if (path.source) {
	    path = path.source.replace(/\\\//ig, "/");
	  }
	  if (Array.isArray(method)) {
	    return method.forEach(function(m) {
	      self.on(m.toLowerCase(), path, route);
	    });
	  }
	  path = path.split(new RegExp(this.delimiter));
	  path = terminator(path, this.delimiter);
	  this.insert(method, this.scope.concat(path), route);
	};

	Router.prototype.path = function(path, routesFn) {
	  var self = this, length = this.scope.length;
	  if (path.source) {
	    path = path.source.replace(/\\\//ig, "/");
	  }
	  path = path.split(new RegExp(this.delimiter));
	  path = terminator(path, this.delimiter);
	  this.scope = this.scope.concat(path);
	  routesFn.call(this, this);
	  this.scope.splice(length, path.length);
	};

	Router.prototype.dispatch = function(method, path, callback) {
	  var self = this, fns = this.traverse(method, path.replace(QUERY_SEPARATOR, ""), this.routes, ""), invoked = this._invoked, after;
	  this._invoked = true;
	  if (!fns || fns.length === 0) {
	    this.last = [];
	    if (typeof this.notfound === "function") {
	      this.invoke([ this.notfound ], {
	        method: method,
	        path: path
	      }, callback);
	    }
	    return false;
	  }
	  if (this.recurse === "forward") {
	    fns = fns.reverse();
	  }
	  function updateAndInvoke() {
	    self.last = fns.after;
	    self.invoke(self.runlist(fns), self, callback);
	  }
	  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];
	  if (after && after.length > 0 && invoked) {
	    if (this.async) {
	      this.invoke(after, this, updateAndInvoke);
	    } else {
	      this.invoke(after, this);
	      updateAndInvoke();
	    }
	    return true;
	  }
	  updateAndInvoke();
	  return true;
	};

	Router.prototype.invoke = function(fns, thisArg, callback) {
	  var self = this;
	  var apply;
	  if (this.async) {
	    apply = function(fn, next) {
	      if (Array.isArray(fn)) {
	        return _asyncEverySeries(fn, apply, next);
	      } else if (typeof fn == "function") {
	        fn.apply(thisArg, (fns.captures || []).concat(next));
	      }
	    };
	    _asyncEverySeries(fns, apply, function() {
	      if (callback) {
	        callback.apply(thisArg, arguments);
	      }
	    });
	  } else {
	    apply = function(fn) {
	      if (Array.isArray(fn)) {
	        return _every(fn, apply);
	      } else if (typeof fn === "function") {
	        return fn.apply(thisArg, fns.captures || []);
	      } else if (typeof fn === "string" && self.resource) {
	        self.resource[fn].apply(thisArg, fns.captures || []);
	      }
	    };
	    _every(fns, apply);
	  }
	};

	Router.prototype.traverse = function(method, path, routes, regexp, filter) {
	  var fns = [], current, exact, match, next, that;
	  function filterRoutes(routes) {
	    if (!filter) {
	      return routes;
	    }
	    function deepCopy(source) {
	      var result = [];
	      for (var i = 0; i < source.length; i++) {
	        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];
	      }
	      return result;
	    }
	    function applyFilter(fns) {
	      for (var i = fns.length - 1; i >= 0; i--) {
	        if (Array.isArray(fns[i])) {
	          applyFilter(fns[i]);
	          if (fns[i].length === 0) {
	            fns.splice(i, 1);
	          }
	        } else {
	          if (!filter(fns[i])) {
	            fns.splice(i, 1);
	          }
	        }
	      }
	    }
	    var newRoutes = deepCopy(routes);
	    newRoutes.matched = routes.matched;
	    newRoutes.captures = routes.captures;
	    newRoutes.after = routes.after.filter(filter);
	    applyFilter(newRoutes);
	    return newRoutes;
	  }
	  if (path === this.delimiter && routes[method]) {
	    next = [ [ routes.before, routes[method] ].filter(Boolean) ];
	    next.after = [ routes.after ].filter(Boolean);
	    next.matched = true;
	    next.captures = [];
	    return filterRoutes(next);
	  }
	  for (var r in routes) {
	    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === "object" && !Array.isArray(routes[r]))) {
	      current = exact = regexp + this.delimiter + r;
	      if (!this.strict) {
	        exact += "[" + this.delimiter + "]?";
	      }
	      match = path.match(new RegExp("^" + exact));
	      if (!match) {
	        continue;
	      }
	      if (match[0] && match[0] == path && routes[r][method]) {
	        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];
	        next.after = [ routes[r].after ].filter(Boolean);
	        next.matched = true;
	        next.captures = match.slice(1);
	        if (this.recurse && routes === this.routes) {
	          next.push([ routes.before, routes.on ].filter(Boolean));
	          next.after = next.after.concat([ routes.after ].filter(Boolean));
	        }
	        return filterRoutes(next);
	      }
	      next = this.traverse(method, path, routes[r], current);
	      if (next.matched) {
	        if (next.length > 0) {
	          fns = fns.concat(next);
	        }
	        if (this.recurse) {
	          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));
	          next.after = next.after.concat([ routes[r].after ].filter(Boolean));
	          if (routes === this.routes) {
	            fns.push([ routes["before"], routes["on"] ].filter(Boolean));
	            next.after = next.after.concat([ routes["after"] ].filter(Boolean));
	          }
	        }
	        fns.matched = true;
	        fns.captures = next.captures;
	        fns.after = next.after;
	        return filterRoutes(fns);
	      }
	    }
	  }
	  return false;
	};

	Router.prototype.insert = function(method, path, route, parent) {
	  var methodType, parentType, isArray, nested, part;
	  path = path.filter(function(p) {
	    return p && p.length > 0;
	  });
	  parent = parent || this.routes;
	  part = path.shift();
	  if (/\:|\*/.test(part) && !/\\d|\\w/.test(part)) {
	    part = regifyString(part, this.params);
	  }
	  if (path.length > 0) {
	    parent[part] = parent[part] || {};
	    return this.insert(method, path, route, parent[part]);
	  }
	  if (!part && !path.length && parent === this.routes) {
	    methodType = typeof parent[method];
	    switch (methodType) {
	     case "function":
	      parent[method] = [ parent[method], route ];
	      return;
	     case "object":
	      parent[method].push(route);
	      return;
	     case "undefined":
	      parent[method] = route;
	      return;
	    }
	    return;
	  }
	  parentType = typeof parent[part];
	  isArray = Array.isArray(parent[part]);
	  if (parent[part] && !isArray && parentType == "object") {
	    methodType = typeof parent[part][method];
	    switch (methodType) {
	     case "function":
	      parent[part][method] = [ parent[part][method], route ];
	      return;
	     case "object":
	      parent[part][method].push(route);
	      return;
	     case "undefined":
	      parent[part][method] = route;
	      return;
	    }
	  } else if (parentType == "undefined") {
	    nested = {};
	    nested[method] = route;
	    parent[part] = nested;
	    return;
	  }
	  throw new Error("Invalid route context: " + parentType);
	};



	Router.prototype.extend = function(methods) {
	  var self = this, len = methods.length, i;
	  function extend(method) {
	    self._methods[method] = true;
	    self[method] = function() {
	      var extra = arguments.length === 1 ? [ method, "" ] : [ method ];
	      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));
	    };
	  }
	  for (i = 0; i < len; i++) {
	    extend(methods[i]);
	  }
	};

	Router.prototype.runlist = function(fns) {
	  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);
	  if (this.every && this.every.on) {
	    runlist.push(this.every.on);
	  }
	  runlist.captures = fns.captures;
	  runlist.source = fns.source;
	  return runlist;
	};

	Router.prototype.mount = function(routes, path) {
	  if (!routes || typeof routes !== "object" || Array.isArray(routes)) {
	    return;
	  }
	  var self = this;
	  path = path || [];
	  if (!Array.isArray(path)) {
	    path = path.split(self.delimiter);
	  }
	  function insertOrMount(route, local) {
	    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === "" || !self._methods[parts[0]], event = isRoute ? "on" : rename;
	    if (isRoute) {
	      rename = rename.slice((rename.match(new RegExp("^" + self.delimiter)) || [ "" ])[0].length);
	      parts.shift();
	    }
	    if (isRoute && routeType === "object" && !Array.isArray(routes[route])) {
	      local = local.concat(parts);
	      self.mount(routes[route], local);
	      return;
	    }
	    if (isRoute) {
	      local = local.concat(rename.split(self.delimiter));
	      local = terminator(local, self.delimiter);
	    }
	    self.insert(event, local, routes[route]);
	  }
	  for (var route in routes) {
	    if (routes.hasOwnProperty(route)) {
	      insertOrMount(route, path.slice(0));
	    }
	  }
	};



	}( true ? exports : window));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(65)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  * $script.js JS loader & dependency manager
	  * https://github.com/ded/script.js
	  * (c) Dustin Diaz 2014 | License MIT
	  */

	(function (name, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  else this[name] = definition()
	})('$script', function () {
	  var doc = document
	    , head = doc.getElementsByTagName('head')[0]
	    , s = 'string'
	    , f = false
	    , push = 'push'
	    , readyState = 'readyState'
	    , onreadystatechange = 'onreadystatechange'
	    , list = {}
	    , ids = {}
	    , delay = {}
	    , scripts = {}
	    , scriptpath
	    , urlArgs

	  function every(ar, fn) {
	    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f
	    return 1
	  }
	  function each(ar, fn) {
	    every(ar, function (el) {
	      return !fn(el)
	    })
	  }

	  function $script(paths, idOrDone, optDone) {
	    paths = paths[push] ? paths : [paths]
	    var idOrDoneIsDone = idOrDone && idOrDone.call
	      , done = idOrDoneIsDone ? idOrDone : optDone
	      , id = idOrDoneIsDone ? paths.join('') : idOrDone
	      , queue = paths.length
	    function loopFn(item) {
	      return item.call ? item() : list[item]
	    }
	    function callback() {
	      if (!--queue) {
	        list[id] = 1
	        done && done()
	        for (var dset in delay) {
	          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])
	        }
	      }
	    }
	    setTimeout(function () {
	      each(paths, function loading(path, force) {
	        if (path === null) return callback()
	        
	        if (!force && !/^https?:\/\//.test(path) && scriptpath) {
	          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;
	        }
	        
	        if (scripts[path]) {
	          if (id) ids[id] = 1
	          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)
	        }

	        scripts[path] = 1
	        if (id) ids[id] = 1
	        create(path, callback)
	      })
	    }, 0)
	    return $script
	  }

	  function create(path, fn) {
	    var el = doc.createElement('script'), loaded
	    el.onload = el.onerror = el[onreadystatechange] = function () {
	      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;
	      el.onload = el[onreadystatechange] = null
	      loaded = 1
	      scripts[path] = 2
	      fn()
	    }
	    el.async = 1
	    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;
	    head.insertBefore(el, head.lastChild)
	  }

	  $script.get = create

	  $script.order = function (scripts, id, done) {
	    (function callback(s) {
	      s = scripts.shift()
	      !scripts.length ? $script(s, id, done) : $script(s, callback)
	    }())
	  }

	  $script.path = function (p) {
	    scriptpath = p
	  }
	  $script.urlArgs = function (str) {
	    urlArgs = str;
	  }
	  $script.ready = function (deps, ready, req) {
	    deps = deps[push] ? deps : [deps]
	    var missing = [];
	    !each(deps, function (dep) {
	      list[dep] || missing[push](dep);
	    }) && every(deps, function (dep) {return list[dep]}) ?
	      ready() : !function (key) {
	      delay[key] = delay[key] || []
	      delay[key][push](ready)
	      req && req(missing)
	    }(deps.join('|'))
	    return $script
	  }

	  $script.done = function (idOrDone) {
	    $script([null], idOrDone)
	  }

	  return $script
	});


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(dialogPolyfill, module) {(function() {

	  // nb. This is for IE10 and lower _only_.
	  var supportCustomEvent = window.CustomEvent;
	  if (!supportCustomEvent || typeof supportCustomEvent == 'object') {
	    supportCustomEvent = function CustomEvent(event, x) {
	      x = x || {};
	      var ev = document.createEvent('CustomEvent');
	      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
	      return ev;
	    };
	    supportCustomEvent.prototype = window.Event.prototype;
	  }

	  /**
	   * @param {Element} el to check for stacking context
	   * @return {boolean} whether this el or its parents creates a stacking context
	   */
	  function createsStackingContext(el) {
	    while (el && el !== document.body) {
	      var s = window.getComputedStyle(el);
	      var invalid = function(k, ok) {
	        return !(s[k] === undefined || s[k] === ok);
	      }
	      if (s.opacity < 1 ||
	          invalid('zIndex', 'auto') ||
	          invalid('transform', 'none') ||
	          invalid('mixBlendMode', 'normal') ||
	          invalid('filter', 'none') ||
	          invalid('perspective', 'none') ||
	          s['isolation'] === 'isolate' ||
	          s.position === 'fixed' ||
	          s.webkitOverflowScrolling === 'touch') {
	        return true;
	      }
	      el = el.parentElement;
	    }
	    return false;
	  }

	  /**
	   * Finds the nearest <dialog> from the passed element.
	   *
	   * @param {Element} el to search from
	   * @return {HTMLDialogElement} dialog found
	   */
	  function findNearestDialog(el) {
	    while (el) {
	      if (el.localName === 'dialog') {
	        return /** @type {HTMLDialogElement} */ (el);
	      }
	      el = el.parentElement;
	    }
	    return null;
	  }

	  /**
	   * Blur the specified element, as long as it's not the HTML body element.
	   * This works around an IE9/10 bug - blurring the body causes Windows to
	   * blur the whole application.
	   *
	   * @param {Element} el to blur
	   */
	  function safeBlur(el) {
	    if (el && el.blur && el != document.body) {
	      el.blur();
	    }
	  }

	  /**
	   * @param {!NodeList} nodeList to search
	   * @param {Node} node to find
	   * @return {boolean} whether node is inside nodeList
	   */
	  function inNodeList(nodeList, node) {
	    for (var i = 0; i < nodeList.length; ++i) {
	      if (nodeList[i] == node) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * @param {!HTMLDialogElement} dialog to upgrade
	   * @constructor
	   */
	  function dialogPolyfillInfo(dialog) {
	    this.dialog_ = dialog;
	    this.replacedStyleTop_ = false;
	    this.openAsModal_ = false;

	    // Set a11y role. Browsers that support dialog implicitly know this already.
	    if (!dialog.hasAttribute('role')) {
	      dialog.setAttribute('role', 'dialog');
	    }

	    dialog.show = this.show.bind(this);
	    dialog.showModal = this.showModal.bind(this);
	    dialog.close = this.close.bind(this);

	    if (!('returnValue' in dialog)) {
	      dialog.returnValue = '';
	    }

	    if ('MutationObserver' in window) {
	      var mo = new MutationObserver(this.maybeHideModal.bind(this));
	      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});
	    } else {
	      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also
	      // seem to fire even if the element was removed as part of a parent removal. Use the removed
	      // events to force downgrade (useful if removed/immediately added).
	      var removed = false;
	      var cb = function() {
	        removed ? this.downgradeModal() : this.maybeHideModal();
	        removed = false;
	      }.bind(this);
	      var timeout;
	      var delayModel = function(ev) {
	        var cand = 'DOMNodeRemoved';
	        removed |= (ev.type.substr(0, cand.length) === cand);
	        window.clearTimeout(timeout);
	        timeout = window.setTimeout(cb, 0);
	      };
	      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {
	        dialog.addEventListener(name, delayModel);
	      });
	    }
	    // Note that the DOM is observed inside DialogManager while any dialog
	    // is being displayed as a modal, to catch modal removal from the DOM.

	    Object.defineProperty(dialog, 'open', {
	      set: this.setOpen.bind(this),
	      get: dialog.hasAttribute.bind(dialog, 'open')
	    });

	    this.backdrop_ = document.createElement('div');
	    this.backdrop_.className = 'backdrop';
	    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));
	  }

	  dialogPolyfillInfo.prototype = {

	    get dialog() {
	      return this.dialog_;
	    },

	    /**
	     * Maybe remove this dialog from the modal top layer. This is called when
	     * a modal dialog may no longer be tenable, e.g., when the dialog is no
	     * longer open or is no longer part of the DOM.
	     */
	    maybeHideModal: function() {
	      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }
	      this.downgradeModal();
	    },

	    /**
	     * Remove this dialog from the modal top layer, leaving it as a non-modal.
	     */
	    downgradeModal: function() {
	      if (!this.openAsModal_) { return; }
	      this.openAsModal_ = false;
	      this.dialog_.style.zIndex = '';

	      // This won't match the native <dialog> exactly because if the user set top on a centered
	      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's
	      // possible to polyfill this perfectly.
	      if (this.replacedStyleTop_) {
	        this.dialog_.style.top = '';
	        this.replacedStyleTop_ = false;
	      }

	      // Clear the backdrop and remove from the manager.
	      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);
	      dialogPolyfill.dm.removeDialog(this);
	    },

	    /**
	     * @param {boolean} value whether to open or close this dialog
	     */
	    setOpen: function(value) {
	      if (value) {
	        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');
	      } else {
	        this.dialog_.removeAttribute('open');
	        this.maybeHideModal();  // nb. redundant with MutationObserver
	      }
	    },

	    /**
	     * Handles clicks on the fake .backdrop element, redirecting them as if
	     * they were on the dialog itself.
	     *
	     * @param {!Event} e to redirect
	     */
	    backdropClick_: function(e) {
	      if (!this.dialog_.hasAttribute('tabindex')) {
	        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be
	        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this
	        // would not be needed - clicks would move the implicit cursor there.
	        var fake = document.createElement('div');
	        this.dialog_.insertBefore(fake, this.dialog_.firstChild);
	        fake.tabIndex = -1;
	        fake.focus();
	        this.dialog_.removeChild(fake);
	      } else {
	        this.dialog_.focus();
	      }

	      var redirectedEvent = document.createEvent('MouseEvents');
	      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,
	          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,
	          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
	      this.dialog_.dispatchEvent(redirectedEvent);
	      e.stopPropagation();
	    },

	    /**
	     * Focuses on the first focusable element within the dialog. This will always blur the current
	     * focus, even if nothing within the dialog is found.
	     */
	    focus_: function() {
	      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.
	      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');
	      if (!target && this.dialog_.tabIndex >= 0) {
	        target = this.dialog_;
	      }
	      if (!target) {
	        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the
	        // alternative involves stepping through and trying to focus everything.
	        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];
	        var query = opts.map(function(el) {
	          return el + ':not([disabled])';
	        });
	        // TODO(samthor): tabindex values that are not numeric are not focusable.
	        query.push('[tabindex]:not([disabled]):not([tabindex=""])');  // tabindex != "", not disabled
	        target = this.dialog_.querySelector(query.join(', '));
	      }
	      safeBlur(document.activeElement);
	      target && target.focus();
	    },

	    /**
	     * Sets the zIndex for the backdrop and dialog.
	     *
	     * @param {number} dialogZ
	     * @param {number} backdropZ
	     */
	    updateZIndex: function(dialogZ, backdropZ) {
	      if (dialogZ < backdropZ) {
	        throw new Error('dialogZ should never be < backdropZ');
	      }
	      this.dialog_.style.zIndex = dialogZ;
	      this.backdrop_.style.zIndex = backdropZ;
	    },

	    /**
	     * Shows the dialog. If the dialog is already open, this does nothing.
	     */
	    show: function() {
	      if (!this.dialog_.open) {
	        this.setOpen(true);
	        this.focus_();
	      }
	    },

	    /**
	     * Show this dialog modally.
	     */
	    showModal: function() {
	      if (this.dialog_.hasAttribute('open')) {
	        throw new Error('Failed to execute \'showModal\' on dialog: The element is already open, and therefore cannot be opened modally.');
	      }
	      if (!document.body.contains(this.dialog_)) {
	        throw new Error('Failed to execute \'showModal\' on dialog: The element is not in a Document.');
	      }
	      if (!dialogPolyfill.dm.pushDialog(this)) {
	        throw new Error('Failed to execute \'showModal\' on dialog: There are too many open modal dialogs.');
	      }

	      if (createsStackingContext(this.dialog_.parentElement)) {
	        console.warn('A dialog is being shown inside a stacking context. ' +
	            'This may cause it to be unusable. For more information, see this link: ' +
	            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');
	      }

	      this.setOpen(true);
	      this.openAsModal_ = true;

	      // Optionally center vertically, relative to the current viewport.
	      if (dialogPolyfill.needsCentering(this.dialog_)) {
	        dialogPolyfill.reposition(this.dialog_);
	        this.replacedStyleTop_ = true;
	      } else {
	        this.replacedStyleTop_ = false;
	      }

	      // Insert backdrop.
	      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);

	      // Focus on whatever inside the dialog.
	      this.focus_();
	    },

	    /**
	     * Closes this HTMLDialogElement. This is optional vs clearing the open
	     * attribute, however this fires a 'close' event.
	     *
	     * @param {string=} opt_returnValue to use as the returnValue
	     */
	    close: function(opt_returnValue) {
	      if (!this.dialog_.hasAttribute('open')) {
	        throw new Error('Failed to execute \'close\' on dialog: The element does not have an \'open\' attribute, and therefore cannot be closed.');
	      }
	      this.setOpen(false);

	      // Leave returnValue untouched in case it was set directly on the element
	      if (opt_returnValue !== undefined) {
	        this.dialog_.returnValue = opt_returnValue;
	      }

	      // Triggering "close" event for any attached listeners on the <dialog>.
	      var closeEvent = new supportCustomEvent('close', {
	        bubbles: false,
	        cancelable: false
	      });
	      this.dialog_.dispatchEvent(closeEvent);
	    }

	  };

	  var dialogPolyfill = {};

	  dialogPolyfill.reposition = function(element) {
	    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
	    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
	    element.style.top = Math.max(scrollTop, topValue) + 'px';
	  };

	  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {
	    for (var i = 0; i < document.styleSheets.length; ++i) {
	      var styleSheet = document.styleSheets[i];
	      var cssRules = null;
	      // Some browsers throw on cssRules.
	      try {
	        cssRules = styleSheet.cssRules;
	      } catch (e) {}
	      if (!cssRules) { continue; }
	      for (var j = 0; j < cssRules.length; ++j) {
	        var rule = cssRules[j];
	        var selectedNodes = null;
	        // Ignore errors on invalid selector texts.
	        try {
	          selectedNodes = document.querySelectorAll(rule.selectorText);
	        } catch(e) {}
	        if (!selectedNodes || !inNodeList(selectedNodes, element)) {
	          continue;
	        }
	        var cssTop = rule.style.getPropertyValue('top');
	        var cssBottom = rule.style.getPropertyValue('bottom');
	        if ((cssTop && cssTop != 'auto') || (cssBottom && cssBottom != 'auto')) {
	          return true;
	        }
	      }
	    }
	    return false;
	  };

	  dialogPolyfill.needsCentering = function(dialog) {
	    var computedStyle = window.getComputedStyle(dialog);
	    if (computedStyle.position != 'absolute') {
	      return false;
	    }

	    // We must determine whether the top/bottom specified value is non-auto.  In
	    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but
	    // Firefox returns the used value. So we do this crazy thing instead: check
	    // the inline style and then go through CSS rules.
	    if ((dialog.style.top != 'auto' && dialog.style.top != '') ||
	        (dialog.style.bottom != 'auto' && dialog.style.bottom != ''))
	      return false;
	    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
	  };

	  /**
	   * @param {!Element} element to force upgrade
	   */
	  dialogPolyfill.forceRegisterDialog = function(element) {
	    if (element.showModal) {
	      console.warn('This browser already supports <dialog>, the polyfill ' +
	          'may not work correctly', element);
	    }
	    if (element.localName !== 'dialog') {
	      throw new Error('Failed to register dialog: The element is not a dialog.');
	    }
	    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));
	  };

	  /**
	   * @param {!Element} element to upgrade, if necessary
	   */
	  dialogPolyfill.registerDialog = function(element) {
	    if (!element.showModal) {
	      dialogPolyfill.forceRegisterDialog(element);
	    }
	  };

	  /**
	   * @constructor
	   */
	  dialogPolyfill.DialogManager = function() {
	    /** @type {!Array<!dialogPolyfillInfo>} */
	    this.pendingDialogStack = [];

	    var checkDOM = this.checkDOM_.bind(this);

	    // The overlay is used to simulate how a modal dialog blocks the document.
	    // The blocking dialog is positioned on top of the overlay, and the rest of
	    // the dialogs on the pending dialog stack are positioned below it. In the
	    // actual implementation, the modal dialog stacking is controlled by the
	    // top layer, where z-index has no effect.
	    this.overlay = document.createElement('div');
	    this.overlay.className = '_dialog_overlay';
	    this.overlay.addEventListener('click', function(e) {
	      this.forwardTab_ = undefined;
	      e.stopPropagation();
	      checkDOM([]);  // sanity-check DOM
	    }.bind(this));

	    this.handleKey_ = this.handleKey_.bind(this);
	    this.handleFocus_ = this.handleFocus_.bind(this);

	    this.zIndexLow_ = 100000;
	    this.zIndexHigh_ = 100000 + 150;

	    this.forwardTab_ = undefined;

	    if ('MutationObserver' in window) {
	      this.mo_ = new MutationObserver(function(records) {
	        var removed = [];
	        records.forEach(function(rec) {
	          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {
	            if (!(c instanceof Element)) {
	              continue;
	            } else if (c.localName === 'dialog') {
	              removed.push(c);
	            } else {
	              var q = c.querySelector('dialog');
	              q && removed.push(q);
	            }
	          }
	        });
	        removed.length && checkDOM(removed);
	      });
	    }
	  };

	  /**
	   * Called on the first modal dialog being shown. Adds the overlay and related
	   * handlers.
	   */
	  dialogPolyfill.DialogManager.prototype.blockDocument = function() {
	    document.documentElement.addEventListener('focus', this.handleFocus_, true);
	    document.addEventListener('keydown', this.handleKey_);
	    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});
	  };

	  /**
	   * Called on the first modal dialog being removed, i.e., when no more modal
	   * dialogs are visible.
	   */
	  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {
	    document.documentElement.removeEventListener('focus', this.handleFocus_, true);
	    document.removeEventListener('keydown', this.handleKey_);
	    this.mo_ && this.mo_.disconnect();
	  };

	  /**
	   * Updates the stacking of all known dialogs.
	   */
	  dialogPolyfill.DialogManager.prototype.updateStacking = function() {
	    var zIndex = this.zIndexHigh_;

	    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
	      dpi.updateZIndex(--zIndex, --zIndex);
	      if (i === 0) {
	        this.overlay.style.zIndex = --zIndex;
	      }
	    }

	    // Make the overlay a sibling of the dialog itself.
	    var last = this.pendingDialogStack[0];
	    if (last) {
	      var p = last.dialog.parentNode || document.body;
	      p.appendChild(this.overlay);
	    } else if (this.overlay.parentNode) {
	      this.overlay.parentNode.removeChild(this.overlay);
	    }
	  };

	  /**
	   * @param {Element} candidate to check if contained or is the top-most modal dialog
	   * @return {boolean} whether candidate is contained in top dialog
	   */
	  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {
	    while (candidate = findNearestDialog(candidate)) {
	      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
	        if (dpi.dialog === candidate) {
	          return i === 0;  // only valid if top-most
	        }
	      }
	      candidate = candidate.parentElement;
	    }
	    return false;
	  };

	  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {
	    if (this.containedByTopDialog_(event.target)) { return; }

	    event.preventDefault();
	    event.stopPropagation();
	    safeBlur(/** @type {Element} */ (event.target));

	    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key

	    var dpi = this.pendingDialogStack[0];
	    var dialog = dpi.dialog;
	    var position = dialog.compareDocumentPosition(event.target);
	    if (position & Node.DOCUMENT_POSITION_PRECEDING) {
	      if (this.forwardTab_) {  // forward
	        dpi.focus_();
	      } else {  // backwards
	        document.documentElement.focus();
	      }
	    } else {
	      // TODO: Focus after the dialog, is ignored.
	    }

	    return false;
	  };

	  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {
	    this.forwardTab_ = undefined;
	    if (event.keyCode === 27) {
	      event.preventDefault();
	      event.stopPropagation();
	      var cancelEvent = new supportCustomEvent('cancel', {
	        bubbles: false,
	        cancelable: true
	      });
	      var dpi = this.pendingDialogStack[0];
	      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {
	        dpi.dialog.close();
	      }
	    } else if (event.keyCode === 9) {
	      this.forwardTab_ = !event.shiftKey;
	    }
	  };

	  /**
	   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are
	   * removed and immediately readded don't stay modal, they become normal.
	   *
	   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed
	   */
	  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {
	    // This operates on a clone because it may cause it to change. Each change also calls
	    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs
	    // at a time?!
	    var clone = this.pendingDialogStack.slice();
	    clone.forEach(function(dpi) {
	      if (removed.indexOf(dpi.dialog) !== -1) {
	        dpi.downgradeModal();
	      } else {
	        dpi.maybeHideModal();
	      }
	    });
	  };

	  /**
	   * @param {!dialogPolyfillInfo} dpi
	   * @return {boolean} whether the dialog was allowed
	   */
	  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {
	    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
	    if (this.pendingDialogStack.length >= allowed) {
	      return false;
	    }
	    if (this.pendingDialogStack.unshift(dpi) === 1) {
	      this.blockDocument();
	    }
	    this.updateStacking();
	    return true;
	  };

	  /**
	   * @param {!dialogPolyfillInfo} dpi
	   */
	  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {
	    var index = this.pendingDialogStack.indexOf(dpi);
	    if (index == -1) { return; }

	    this.pendingDialogStack.splice(index, 1);
	    if (this.pendingDialogStack.length === 0) {
	      this.unblockDocument();
	    }
	    this.updateStacking();
	  };

	  dialogPolyfill.dm = new dialogPolyfill.DialogManager();

	  /**
	   * Global form 'dialog' method handler. Closes a dialog correctly on submit
	   * and possibly sets its return value.
	   */
	  document.addEventListener('submit', function(ev) {
	    var target = ev.target;
	    if (!target || !target.hasAttribute('method')) { return; }
	    if (target.getAttribute('method').toLowerCase() !== 'dialog') { return; }
	    ev.preventDefault();

	    var dialog = findNearestDialog(/** @type {Element} */ (ev.target));
	    if (!dialog) { return; }

	    // FIXME: The original event doesn't contain the element used to submit the
	    // form (if any). Look in some possible places.
	    var returnValue;
	    var cands = [document.activeElement, ev.explicitOriginalTarget];
	    var els = ['BUTTON', 'INPUT'];
	    cands.some(function(cand) {
	      if (cand && cand.form == ev.target && els.indexOf(cand.nodeName.toUpperCase()) != -1) {
	        returnValue = cand.value;
	        return true;
	      }
	    });
	    dialog.close(returnValue);
	  }, true);

	  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;
	  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;

	  if ("function" === 'function' && 'amd' in __webpack_require__(69)) {
	    // AMD support
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return dialogPolyfill; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {
	    // CommonJS support
	    module['exports'] = dialogPolyfill;
	  } else {
	    // all others
	    window['dialogPolyfill'] = dialogPolyfill;
	  }
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(68), __webpack_require__(3)(module)))

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.18.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';

	var hookCallback;

	function hooks () {
	    return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}

	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}

	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}

	function isObjectEmpty(obj) {
	    var k;
	    for (k in obj) {
	        // even if its not own property I'd still call it non-empty
	        return false;
	    }
	    return true;
	}

	function isUndefined(input) {
	    return input === void 0;
	}

	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}

	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}

	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}

	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}

	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }

	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }

	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }

	    return a;
	}

	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null,
	        rfc2822         : false,
	        weekdayMismatch : false
	    };
	}

	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}

	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;

	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }

	        return false;
	    };
	}

	var some$1 = some;

	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));

	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }

	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}

	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }

	    return m;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];

	function copyConfig(to, from) {
	    var i, prop, val;

	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }

	    if (momentProperties.length > 0) {
	        for (i = 0; i < momentProperties.length; i++) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }

	    return to;
	}

	var updateInProgress = false;

	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}

	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}

	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}

	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }

	    return value;
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}

	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}

	function deprecate(msg, fn) {
	    var firstTime = true;

	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}

	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    this._dayOfMonthOrdinalParseLenient = new RegExp(
	        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	            '|' + (/\d{1,2}/).source);
	}

	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}

	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}

	var keys;

	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}

	var keys$1 = keys;

	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};

	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}

	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};

	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];

	    if (format || !formatUpper) {
	        return format;
	    }

	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });

	    return this._longDateFormat[key];
	}

	var defaultInvalidDate = 'Invalid date';

	function invalidDate () {
	    return this._invalidDate;
	}

	var defaultOrdinal = '%d';
	var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}

	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    ss : '%d seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};

	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}

	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}

	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}

	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;

	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }

	    return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}

	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}

	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}

	function set$1 (mom, unit, value) {
	    if (mom.isValid()) {
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	}

	// MOMENTS

	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}


	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}

	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}

	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	var formatFunctions = {};

	var formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}

	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}

	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;

	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }

	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}

	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }

	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	    return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
	    var i = 5;

	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }

	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }

	    return format;
	}

	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	var regexes = {};

	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}

	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }

	    return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}

	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}

	var tokens = {};

	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}

	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}

	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}

	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;

	var indexOf;

	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}

	var indexOf$1 = indexOf;

	function daysInMonth(year, month) {
	    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	}

	// FORMATTING

	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});

	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});

	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias('month', 'M');

	// PRIORITY

	addUnitPriority('month', 8);

	// PARSING

	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});

	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});

	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});

	// LOCALES

	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return isArray(this._months) ? this._months :
	            this._months['standalone'];
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}

	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return isArray(this._monthsShort) ? this._monthsShort :
	            this._monthsShort['standalone'];
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;

	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }

	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }

	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function setMonth (mom, value) {
	    var dayOfMonth;

	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }

	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }

	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}

	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}

	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}

	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}

	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}

	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});

	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});

	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	// ALIASES

	addUnitAlias('year', 'y');

	// PRIORITIES

	addUnitPriority('year', 1);

	// PARSING

	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);

	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}

	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet('FullYear', true);

	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}

	function createDate (y, m, d, h, M, s, ms) {
	    // can't just apply() to create a date:
	    // https://stackoverflow.com/q/181348
	    var date = new Date(y, m, d, h, M, s, ms);

	    // the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}

	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));

	    // the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	    return -fwdlw + fwd - 1;
	}

	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;

	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }

	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}

	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;

	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }

	    return {
	        week: resWeek,
	        year: resYear
	    };
	}

	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	// ALIASES

	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');

	// PRIORITIES

	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);

	// PARSING

	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);

	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});

	// HELPERS

	// LOCALES

	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};

	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}

	function localeFirstDayOfYear () {
	    return this._week.doy;
	}

	// MOMENTS

	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	// FORMATTING

	addFormatToken('d', 0, 'do', 'day');

	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});

	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');

	// ALIASES

	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');

	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);

	// PARSING

	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});

	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }

	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }

	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }

	    return null;
	}

	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}

	// LOCALES

	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return isArray(this._weekdays) ? this._weekdays :
	            this._weekdays['standalone'];
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}

	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}

	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];

	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;

	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }

	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }

	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already

	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}

	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}

	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }

	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.

	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}

	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}

	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}

	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}


	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;

	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	function hFormat() {
	    return this.hours() % 12 || 12;
	}

	function kFormat() {
	    return this.hours() || 24;
	}

	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);

	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}

	meridiem('a', true);
	meridiem('A', false);

	// ALIASES

	addUnitAlias('hour', 'h');

	// PRIORITY
	addUnitPriority('hour', 13);

	// PARSING

	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}

	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('k',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);

	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);

	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	    var kInput = toInt(input);
	    array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}


	// MOMENTS

	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);

	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	    relativeTime: defaultRelativeTime,

	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,

	    week: defaultLocaleWeek,

	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,

	    meridiemParse: defaultLocaleMeridiemParse
	};

	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;

	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;

	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}

	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            __webpack_require__(71)("./" + name);
	            // because defineLocale currently also sets the global locale, we
	            // want to undo that for lazy loaded locales
	            getSetGlobalLocale(oldLocale);
	        } catch (e) { }
	    }
	    return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }

	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }

	    return globalLocale._abbr;
	}

	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));

	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }

	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);


	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}

	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;

	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}

	// returns locale data
	function getLocale (key) {
	    var locale;

	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }

	    if (!key) {
	        return globalLocale;
	    }

	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }

	    return chooseLocale(key);
	}

	function listLocales() {
	    return keys$1(locales);
	}

	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;

	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;

	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }

	        getParsingFlags(m).overflow = overflow;
	    }

	    return m;
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];

	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];

	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;

	    if (match) {
	        getParsingFlags(config).iso = true;

	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}

	// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

	// date and time from ref 2822 format
	function configFromRFC2822(config) {
	    var string, match, dayFormat,
	        dateFormat, timeFormat, tzFormat;
	    var timezones = {
	        ' GMT': ' +0000',
	        ' EDT': ' -0400',
	        ' EST': ' -0500',
	        ' CDT': ' -0500',
	        ' CST': ' -0600',
	        ' MDT': ' -0600',
	        ' MST': ' -0700',
	        ' PDT': ' -0700',
	        ' PST': ' -0800'
	    };
	    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
	    var timezone, timezoneIndex;

	    string = config._i
	        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
	        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
	        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
	    match = basicRfcRegex.exec(string);

	    if (match) {
	        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
	        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
	        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

	        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	        if (match[1]) { // day of week given
	            var momentDate = new Date(match[2]);
	            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];

	            if (match[1].substr(0,3) !== momentDay) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return;
	            }
	        }

	        switch (match[5].length) {
	            case 2: // military
	                if (timezoneIndex === 0) {
	                    timezone = ' +0000';
	                } else {
	                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
	                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
	                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
	                }
	                break;
	            case 4: // Zone
	                timezone = timezones[match[5]];
	                break;
	            default: // UT or +/-9999
	                timezone = timezones[' GMT'];
	        }
	        match[5] = timezone;
	        config._i = match.splice(1).join('');
	        tzFormat = ' ZZ';
	        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
	        configFromStringAndFormat(config);
	        getParsingFlags(config).rfc2822 = true;
	    } else {
	        config._isValid = false;
	    }
	}

	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);

	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }

	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    configFromRFC2822(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    // Final attempt, use Input Fallback
	    hooks.createFromInputFallback(config);
	}

	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);

	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}

	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;

	    if (config._d) {
	        return;
	    }

	    currentDate = currentDateArray(config);

	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }

	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear != null) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }

	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }

	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }

	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }

	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }

	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }

	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	}

	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;

	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;

	        var curWeek = weekOfYear(createLocal(), dow, doy);

	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	        // Default to current week.
	        week = defaults(w.w, curWeek.week);

	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	    if (config._f === hooks.RFC_2822) {
	        configFromRFC2822(config);
	        return;
	    }
	    config._a = [];
	    getParsingFlags(config).empty = true;

	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;

	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }

	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }

	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }

	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	    configFromArray(config);
	    checkOverflow(config);
	}


	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;

	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,

	        scoreToBeat,
	        i,
	        currentScore;

	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }

	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);

	        if (!isValid(tempConfig)) {
	            continue;
	        }

	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;

	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	        getParsingFlags(tempConfig).score = currentScore;

	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }

	    extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }

	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });

	    configFromArray(config);
	}

	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }

	    return res;
	}

	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;

	    config._locale = config._locale || getLocale(config._l);

	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }

	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }

	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }

	    if (!isValid(config)) {
	        config._d = null;
	    }

	    return config;
	}

	function configFromInput(config) {
	    var input = config._i;
	    if (isUndefined(input)) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (isObject(input)) {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}

	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};

	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }

	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;

	    return createFromConfig(c);
	}

	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}

	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isBefore', args);
	}

	function max () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isAfter', args);
	}

	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};

	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

	function isDurationValid(m) {
	    for (var key in m) {
	        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	            return false;
	        }
	    }

	    var unitHasDecimal = false;
	    for (var i = 0; i < ordering.length; ++i) {
	        if (m[ordering[i]]) {
	            if (unitHasDecimal) {
	                return false; // only allow non-integers for smallest unit
	            }
	            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                unitHasDecimal = true;
	            }
	        }
	    }

	    return true;
	}

	function isValid$1() {
	    return this._isValid;
	}

	function createInvalid$1() {
	    return createDuration(NaN);
	}

	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;

	    this._isValid = isDurationValid(normalizedInput);

	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;

	    this._data = {};

	    this._locale = getLocale();

	    this._bubble();
	}

	function isDuration (obj) {
	    return obj instanceof Duration;
	}

	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}

	// FORMATTING

	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}

	offset('Z', ':');
	offset('ZZ', '');

	// PARSING

	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);

	    if (matches === null) {
	        return null;
	    }

	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);

	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}

	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime, keepMinutes) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16 && !keepMinutes) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}

	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }

	        this.utcOffset(input, keepLocalTime);

	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}

	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;

	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}

	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm, false, true);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}

	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;

	    return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}

	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }

	    var c = {};

	    copyConfig(c, this);
	    c = prepareConfig(c);

	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }

	    return this._isDSTShifted;
	}

	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}

	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;

	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }

	    ret = new Duration(duration);

	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }

	    return ret;
	}

	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;

	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};

	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }

	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	    return res;
	}

	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }

	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }

	    return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }

	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}

	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);

	    if (!mom.isValid()) {
	        // No op
	        return;
	    }

	    updateOffset = updateOffset == null ? true : updateOffset;

	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}

	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');

	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}

	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';

	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}

	function clone () {
	    return new Moment(this);
	}

	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}

	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}

	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}

	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}

	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}

	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}

	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;

	    if (!this.isValid()) {
	        return NaN;
	    }

	    that = cloneWithOffset(input, this);

	    if (!that.isValid()) {
	        return NaN;
	    }

	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	    units = normalizeUnits(units);

	    if (units === 'year' || units === 'month' || units === 'quarter') {
	        output = monthDiff(this, that);
	        if (units === 'quarter') {
	            output = output / 3;
	        } else if (units === 'year') {
	            output = output / 12;
	        }
	    } else {
	        delta = this - that;
	        output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	    }
	    return asFloat ? output : absFloor(output);
	}

	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;

	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }

	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}

	function toISOString() {
	    if (!this.isValid()) {
	        return null;
	    }
	    var m = this.clone().utc();
	    if (m.year() < 0 || m.year() > 9999) {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	    if (isFunction(Date.prototype.toISOString)) {
	        // native implementation is ~50x faster, use it when we can
	        return this.toDate().toISOString();
	    }
	    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';

	    return this.format(prefix + year + datetime + suffix);
	}

	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}

	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}

	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;

	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}

	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);

	function localeData () {
	    return this._locale;
	}

	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }

	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }

	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }

	    return this;
	}

	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }

	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }

	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}

	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}

	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}

	function toDate () {
	    return new Date(this.valueOf());
	}

	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}

	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}

	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}

	function isValid$2 () {
	    return isValid(this);
	}

	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}

	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}

	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}

	// FORMATTING

	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});

	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	// ALIASES

	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');

	// PRIORITY

	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);


	// PARSING

	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);

	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});

	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}

	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}

	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}

	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}

	// FORMATTING

	addFormatToken('Q', 0, 'Qo', 'quarter');

	// ALIASES

	addUnitAlias('quarter', 'Q');

	// PRIORITY

	addUnitPriority('quarter', 7);

	// PARSING

	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}

	// FORMATTING

	addFormatToken('D', ['DD', 2], 'Do', 'date');

	// ALIASES

	addUnitAlias('date', 'D');

	// PRIOROITY
	addUnitPriority('date', 9);

	// PARSING

	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    return isStrict ?
	      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	      locale._dayOfMonthOrdinalParseLenient;
	});

	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet('Date', true);

	// FORMATTING

	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	// ALIASES

	addUnitAlias('dayOfYear', 'DDD');

	// PRIORITY
	addUnitPriority('dayOfYear', 4);

	// PARSING

	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}

	// FORMATTING

	addFormatToken('m', ['mm', 2], 0, 'minute');

	// ALIASES

	addUnitAlias('minute', 'm');

	// PRIORITY

	addUnitPriority('minute', 14);

	// PARSING

	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet('Minutes', false);

	// FORMATTING

	addFormatToken('s', ['ss', 2], 0, 'second');

	// ALIASES

	addUnitAlias('second', 's');

	// PRIORITY

	addUnitPriority('second', 15);

	// PARSING

	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet('Seconds', false);

	// FORMATTING

	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});


	// ALIASES

	addUnitAlias('millisecond', 'ms');

	// PRIORITY

	addUnitPriority('millisecond', 16);

	// PARSING

	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);

	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}

	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS

	var getSetMillisecond = makeGetSet('Milliseconds', false);

	// FORMATTING

	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');

	// MOMENTS

	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}

	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}

	var proto = Moment.prototype;

	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$2;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;

	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;

	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;

	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;

	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;

	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;

	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;

	// Hour
	proto.hour = proto.hours = getSetHour;

	// Minute
	proto.minute = proto.minutes = getSetMinute;

	// Second
	proto.second = proto.seconds = getSetSecond;

	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;

	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;

	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;

	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	function createUnix (input) {
	    return createLocal(input * 1000);
	}

	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat (string) {
	    return string;
	}

	var proto$1 = Locale.prototype;

	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;

	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;

	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;

	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;

	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}

	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }

	    format = format || '';

	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;

	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    }

	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;

	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}

	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}

	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}

	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}

	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}

	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}

	getSetGlobalLocale('en', {
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	var mathAbs = Math.abs;

	function abs () {
	    var data           = this._data;

	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);

	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);

	    return this;
	}

	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);

	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;

	    return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}

	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}

	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;

	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }

	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;

	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;

	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;

	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;

	    days += absFloor(hours / 24);

	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));

	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;

	    data.days   = days;
	    data.months = months;
	    data.years  = years;

	    return this;
	}

	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}

	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}

	function as (units) {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;

	    units = normalizeUnits(units);

	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}

	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}

	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}

	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');

	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this.isValid() ? this[units + 's']() : NaN;
	}

	function makeGetter(name) {
	    return function () {
	        return this.isValid() ? this._data[name] : NaN;
	    };
	}

	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');

	function weeks () {
	    return absFloor(this.days() / 7);
	}

	var round = Math.round;
	var thresholds = {
	    ss: 44,         // a few seconds to seconds
	    s : 45,         // seconds to minute
	    m : 45,         // minutes to hour
	    h : 22,         // hours to day
	    d : 26,         // days to month
	    M : 11          // months to year
	};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}

	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));

	    var a = seconds <= thresholds.ss && ['s', seconds]  ||
	            seconds < thresholds.s   && ['ss', seconds] ||
	            minutes <= 1             && ['m']           ||
	            minutes < thresholds.m   && ['mm', minutes] ||
	            hours   <= 1             && ['h']           ||
	            hours   < thresholds.h   && ['hh', hours]   ||
	            days    <= 1             && ['d']           ||
	            days    < thresholds.d   && ['dd', days]    ||
	            months  <= 1             && ['M']           ||
	            months  < thresholds.M   && ['MM', months]  ||
	            years   <= 1             && ['y']           || ['yy', years];

	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    if (threshold === 's') {
	        thresholds.ss = limit - 1;
	    }
	    return true;
	}

	function humanize (withSuffix) {
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);

	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }

	    return locale.postformat(output);
	}

	var abs$1 = Math.abs;

	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;

	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;

	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;


	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds;
	    var total = this.asSeconds();

	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }

	    return (total < 0 ? '-' : '') +
	        'P' +
	        (Y ? Y + 'Y' : '') +
	        (M ? M + 'M' : '') +
	        (D ? D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? h + 'H' : '') +
	        (m ? m + 'M' : '') +
	        (s ? s + 'S' : '');
	}

	var proto$2 = Duration.prototype;

	proto$2.isValid        = isValid$1;
	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;

	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;

	// Side effect imports

	// FORMATTING

	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');

	// PARSING

	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});

	// Side effect imports


	hooks.version = '2.18.1';

	setHookCallback(createLocal);

	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;

	return hooks;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)(module)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./af": 72,
		"./af.js": 72,
		"./ar": 73,
		"./ar-dz": 74,
		"./ar-dz.js": 74,
		"./ar-kw": 75,
		"./ar-kw.js": 75,
		"./ar-ly": 76,
		"./ar-ly.js": 76,
		"./ar-ma": 77,
		"./ar-ma.js": 77,
		"./ar-sa": 78,
		"./ar-sa.js": 78,
		"./ar-tn": 79,
		"./ar-tn.js": 79,
		"./ar.js": 73,
		"./az": 80,
		"./az.js": 80,
		"./be": 81,
		"./be.js": 81,
		"./bg": 82,
		"./bg.js": 82,
		"./bn": 83,
		"./bn.js": 83,
		"./bo": 84,
		"./bo.js": 84,
		"./br": 85,
		"./br.js": 85,
		"./bs": 86,
		"./bs.js": 86,
		"./ca": 87,
		"./ca.js": 87,
		"./cs": 88,
		"./cs.js": 88,
		"./cv": 89,
		"./cv.js": 89,
		"./cy": 90,
		"./cy.js": 90,
		"./da": 91,
		"./da.js": 91,
		"./de": 92,
		"./de-at": 93,
		"./de-at.js": 93,
		"./de-ch": 94,
		"./de-ch.js": 94,
		"./de.js": 92,
		"./dv": 95,
		"./dv.js": 95,
		"./el": 96,
		"./el.js": 96,
		"./en-au": 97,
		"./en-au.js": 97,
		"./en-ca": 98,
		"./en-ca.js": 98,
		"./en-gb": 99,
		"./en-gb.js": 99,
		"./en-ie": 100,
		"./en-ie.js": 100,
		"./en-nz": 101,
		"./en-nz.js": 101,
		"./eo": 102,
		"./eo.js": 102,
		"./es": 103,
		"./es-do": 104,
		"./es-do.js": 104,
		"./es.js": 103,
		"./et": 105,
		"./et.js": 105,
		"./eu": 106,
		"./eu.js": 106,
		"./fa": 107,
		"./fa.js": 107,
		"./fi": 108,
		"./fi.js": 108,
		"./fo": 109,
		"./fo.js": 109,
		"./fr": 110,
		"./fr-ca": 111,
		"./fr-ca.js": 111,
		"./fr-ch": 112,
		"./fr-ch.js": 112,
		"./fr.js": 110,
		"./fy": 113,
		"./fy.js": 113,
		"./gd": 114,
		"./gd.js": 114,
		"./gl": 115,
		"./gl.js": 115,
		"./gom-latn": 116,
		"./gom-latn.js": 116,
		"./he": 117,
		"./he.js": 117,
		"./hi": 118,
		"./hi.js": 118,
		"./hr": 119,
		"./hr.js": 119,
		"./hu": 120,
		"./hu.js": 120,
		"./hy-am": 121,
		"./hy-am.js": 121,
		"./id": 122,
		"./id.js": 122,
		"./is": 123,
		"./is.js": 123,
		"./it": 124,
		"./it.js": 124,
		"./ja": 125,
		"./ja.js": 125,
		"./jv": 126,
		"./jv.js": 126,
		"./ka": 127,
		"./ka.js": 127,
		"./kk": 128,
		"./kk.js": 128,
		"./km": 129,
		"./km.js": 129,
		"./kn": 130,
		"./kn.js": 130,
		"./ko": 131,
		"./ko.js": 131,
		"./ky": 132,
		"./ky.js": 132,
		"./lb": 133,
		"./lb.js": 133,
		"./lo": 134,
		"./lo.js": 134,
		"./lt": 135,
		"./lt.js": 135,
		"./lv": 136,
		"./lv.js": 136,
		"./me": 137,
		"./me.js": 137,
		"./mi": 138,
		"./mi.js": 138,
		"./mk": 139,
		"./mk.js": 139,
		"./ml": 140,
		"./ml.js": 140,
		"./mr": 141,
		"./mr.js": 141,
		"./ms": 142,
		"./ms-my": 143,
		"./ms-my.js": 143,
		"./ms.js": 142,
		"./my": 144,
		"./my.js": 144,
		"./nb": 145,
		"./nb.js": 145,
		"./ne": 146,
		"./ne.js": 146,
		"./nl": 147,
		"./nl-be": 148,
		"./nl-be.js": 148,
		"./nl.js": 147,
		"./nn": 149,
		"./nn.js": 149,
		"./pa-in": 150,
		"./pa-in.js": 150,
		"./pl": 151,
		"./pl.js": 151,
		"./pt": 152,
		"./pt-br": 153,
		"./pt-br.js": 153,
		"./pt.js": 152,
		"./ro": 154,
		"./ro.js": 154,
		"./ru": 155,
		"./ru.js": 155,
		"./sd": 156,
		"./sd.js": 156,
		"./se": 157,
		"./se.js": 157,
		"./si": 158,
		"./si.js": 158,
		"./sk": 159,
		"./sk.js": 159,
		"./sl": 160,
		"./sl.js": 160,
		"./sq": 161,
		"./sq.js": 161,
		"./sr": 162,
		"./sr-cyrl": 163,
		"./sr-cyrl.js": 163,
		"./sr.js": 162,
		"./ss": 164,
		"./ss.js": 164,
		"./sv": 165,
		"./sv.js": 165,
		"./sw": 166,
		"./sw.js": 166,
		"./ta": 167,
		"./ta.js": 167,
		"./te": 168,
		"./te.js": 168,
		"./tet": 169,
		"./tet.js": 169,
		"./th": 170,
		"./th.js": 170,
		"./tl-ph": 171,
		"./tl-ph.js": 171,
		"./tlh": 172,
		"./tlh.js": 172,
		"./tr": 173,
		"./tr.js": 173,
		"./tzl": 174,
		"./tzl.js": 174,
		"./tzm": 175,
		"./tzm-latn": 176,
		"./tzm-latn.js": 176,
		"./tzm.js": 175,
		"./uk": 177,
		"./uk.js": 177,
		"./ur": 178,
		"./ur.js": 178,
		"./uz": 179,
		"./uz-latn": 180,
		"./uz-latn.js": 180,
		"./uz.js": 179,
		"./vi": 181,
		"./vi.js": 181,
		"./x-pseudo": 182,
		"./x-pseudo.js": 182,
		"./yo": 183,
		"./yo.js": 183,
		"./zh-cn": 184,
		"./zh-cn.js": 184,
		"./zh-hk": 185,
		"./zh-hk.js": 185,
		"./zh-tw": 186,
		"./zh-tw.js": 186
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 71;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var af = moment.defineLocale('af', {
	    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	    meridiemParse: /vm|nm/i,
	    isPM : function (input) {
	        return /^nm$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'vm' : 'VM';
	        } else {
	            return isLower ? 'nm' : 'NM';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Vandag om] LT',
	        nextDay : '[Môre om] LT',
	        nextWeek : 'dddd [om] LT',
	        lastDay : '[Gister om] LT',
	        lastWeek : '[Laas] dddd [om] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'oor %s',
	        past : '%s gelede',
	        s : '\'n paar sekondes',
	        m : '\'n minuut',
	        mm : '%d minute',
	        h : '\'n uur',
	        hh : '%d ure',
	        d : '\'n dag',
	        dd : '%d dae',
	        M : '\'n maand',
	        MM : '%d maande',
	        y : '\'n jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	    },
	    week : {
	        dow : 1, // Maandag is die eerste dag van die week.
	        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	    }
	});

	return af;

	})));


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'كانون الثاني يناير',
	    'شباط فبراير',
	    'آذار مارس',
	    'نيسان أبريل',
	    'أيار مايو',
	    'حزيران يونيو',
	    'تموز يوليو',
	    'آب أغسطس',
	    'أيلول سبتمبر',
	    'تشرين الأول أكتوبر',
	    'تشرين الثاني نوفمبر',
	    'كانون الأول ديسمبر'
	];

	var ar = moment.defineLocale('ar', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ar;

	})));


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arDz = moment.defineLocale('ar-dz', {
	    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 4  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arDz;

	})));


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Kuwait) [ar-kw]
	//! author : Nusret Parlak: https://github.com/nusretparlak

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arKw = moment.defineLocale('ar-kw', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arKw;

	})));


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '1',
	    '2': '2',
	    '3': '3',
	    '4': '4',
	    '5': '5',
	    '6': '6',
	    '7': '7',
	    '8': '8',
	    '9': '9',
	    '0': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'يناير',
	    'فبراير',
	    'مارس',
	    'أبريل',
	    'مايو',
	    'يونيو',
	    'يوليو',
	    'أغسطس',
	    'سبتمبر',
	    'أكتوبر',
	    'نوفمبر',
	    'ديسمبر'
	];

	var arLy = moment.defineLocale('ar-ly', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arLy;

	})));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arMa = moment.defineLocale('ar-ma', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arMa;

	})));


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};

	var arSa = moment.defineLocale('ar-sa', {
	    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    preparse: function (string) {
	        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return arSa;

	})));


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var arTn = moment.defineLocale('ar-tn', {
	    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'في %s',
	        past: 'منذ %s',
	        s: 'ثوان',
	        m: 'دقيقة',
	        mm: '%d دقائق',
	        h: 'ساعة',
	        hh: '%d ساعات',
	        d: 'يوم',
	        dd: '%d أيام',
	        M: 'شهر',
	        MM: '%d أشهر',
	        y: 'سنة',
	        yy: '%d سنوات'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return arTn;

	})));


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var suffixes = {
	    1: '-inci',
	    5: '-inci',
	    8: '-inci',
	    70: '-inci',
	    80: '-inci',
	    2: '-nci',
	    7: '-nci',
	    20: '-nci',
	    50: '-nci',
	    3: '-üncü',
	    4: '-üncü',
	    100: '-üncü',
	    6: '-ncı',
	    9: '-uncu',
	    10: '-uncu',
	    30: '-uncu',
	    60: '-ıncı',
	    90: '-ıncı'
	};

	var az = moment.defineLocale('az', {
	    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[sabah saat] LT',
	        nextWeek : '[gələn həftə] dddd [saat] LT',
	        lastDay : '[dünən] LT',
	        lastWeek : '[keçən həftə] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s əvvəl',
	        s : 'birneçə saniyyə',
	        m : 'bir dəqiqə',
	        mm : '%d dəqiqə',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir il',
	        yy : '%d il'
	    },
	    meridiemParse: /gecə|səhər|gündüz|axşam/,
	    isPM : function (input) {
	        return /^(gündüz|axşam)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'gecə';
	        } else if (hour < 12) {
	            return 'səhər';
	        } else if (hour < 17) {
	            return 'gündüz';
	        } else {
	            return 'axşam';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '-ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return az;

	})));


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	        'dd': 'дзень_дні_дзён',
	        'MM': 'месяц_месяцы_месяцаў',
	        'yy': 'год_гады_гадоў'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвіліна' : 'хвіліну';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'гадзіна' : 'гадзіну';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}

	var be = moment.defineLocale('be', {
	    months : {
	        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	    },
	    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	    weekdays : {
	        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	    },
	    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сёння ў] LT',
	        nextDay: '[Заўтра ў] LT',
	        lastDay: '[Учора ў] LT',
	        nextWeek: function () {
	            return '[У] dddd [ў] LT';
	        },
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'праз %s',
	        past : '%s таму',
	        s : 'некалькі секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithPlural,
	        hh : relativeTimeWithPlural,
	        d : 'дзень',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночы|раніцы|дня|вечара/,
	    isPM : function (input) {
	        return /^(дня|вечара)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночы';
	        } else if (hour < 12) {
	            return 'раніцы';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечара';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return be;

	})));


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var bg = moment.defineLocale('bg', {
	    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Днес в] LT',
	        nextDay : '[Утре в] LT',
	        nextWeek : 'dddd [в] LT',
	        lastDay : '[Вчера в] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'след %s',
	        past : 'преди %s',
	        s : 'няколко секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дни',
	        M : 'месец',
	        MM : '%d месеца',
	        y : 'година',
	        yy : '%d години'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bg;

	})));


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '১',
	    '2': '২',
	    '3': '৩',
	    '4': '৪',
	    '5': '৫',
	    '6': '৬',
	    '7': '৭',
	    '8': '৮',
	    '9': '৯',
	    '0': '০'
	};
	var numberMap = {
	    '১': '1',
	    '২': '2',
	    '৩': '3',
	    '৪': '4',
	    '৫': '5',
	    '৬': '6',
	    '৭': '7',
	    '৮': '8',
	    '৯': '9',
	    '০': '0'
	};

	var bn = moment.defineLocale('bn', {
	    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm সময়',
	        LTS : 'A h:mm:ss সময়',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm সময়',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	    },
	    calendar : {
	        sameDay : '[আজ] LT',
	        nextDay : '[আগামীকাল] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[গতকাল] LT',
	        lastWeek : '[গত] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s পরে',
	        past : '%s আগে',
	        s : 'কয়েক সেকেন্ড',
	        m : 'এক মিনিট',
	        mm : '%d মিনিট',
	        h : 'এক ঘন্টা',
	        hh : '%d ঘন্টা',
	        d : 'এক দিন',
	        dd : '%d দিন',
	        M : 'এক মাস',
	        MM : '%d মাস',
	        y : 'এক বছর',
	        yy : '%d বছর'
	    },
	    preparse: function (string) {
	        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'রাত';
	        } else if (hour < 10) {
	            return 'সকাল';
	        } else if (hour < 17) {
	            return 'দুপুর';
	        } else if (hour < 20) {
	            return 'বিকাল';
	        } else {
	            return 'রাত';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bn;

	})));


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '༡',
	    '2': '༢',
	    '3': '༣',
	    '4': '༤',
	    '5': '༥',
	    '6': '༦',
	    '7': '༧',
	    '8': '༨',
	    '9': '༩',
	    '0': '༠'
	};
	var numberMap = {
	    '༡': '1',
	    '༢': '2',
	    '༣': '3',
	    '༤': '4',
	    '༥': '5',
	    '༦': '6',
	    '༧': '7',
	    '༨': '8',
	    '༩': '9',
	    '༠': '0'
	};

	var bo = moment.defineLocale('bo', {
	    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[དི་རིང] LT',
	        nextDay : '[སང་ཉིན] LT',
	        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	        lastDay : '[ཁ་སང] LT',
	        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ལ་',
	        past : '%s སྔན་ལ',
	        s : 'ལམ་སང',
	        m : 'སྐར་མ་གཅིག',
	        mm : '%d སྐར་མ',
	        h : 'ཆུ་ཚོད་གཅིག',
	        hh : '%d ཆུ་ཚོད',
	        d : 'ཉིན་གཅིག',
	        dd : '%d ཉིན་',
	        M : 'ཟླ་བ་གཅིག',
	        MM : '%d ཟླ་བ',
	        y : 'ལོ་གཅིག',
	        yy : '%d ལོ'
	    },
	    preparse: function (string) {
	        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'མཚན་མོ';
	        } else if (hour < 10) {
	            return 'ཞོགས་ཀས';
	        } else if (hour < 17) {
	            return 'ཉིན་གུང';
	        } else if (hour < 20) {
	            return 'དགོང་དག';
	        } else {
	            return 'མཚན་མོ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bo;

	})));


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function relativeTimeWithMutation(number, withoutSuffix, key) {
	    var format = {
	        'mm': 'munutenn',
	        'MM': 'miz',
	        'dd': 'devezh'
	    };
	    return number + ' ' + mutation(format[key], number);
	}
	function specialMutationForYears(number) {
	    switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	    }
	}
	function lastNumber(number) {
	    if (number > 9) {
	        return lastNumber(number % 10);
	    }
	    return number;
	}
	function mutation(text, number) {
	    if (number === 2) {
	        return softMutation(text);
	    }
	    return text;
	}
	function softMutation(text) {
	    var mutationTable = {
	        'm': 'v',
	        'b': 'v',
	        'd': 'z'
	    };
	    if (mutationTable[text.charAt(0)] === undefined) {
	        return text;
	    }
	    return mutationTable[text.charAt(0)] + text.substring(1);
	}

	var br = moment.defineLocale('br', {
	    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h[e]mm A',
	        LTS : 'h[e]mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [a viz] MMMM YYYY',
	        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	    },
	    calendar : {
	        sameDay : '[Hiziv da] LT',
	        nextDay : '[Warc\'hoazh da] LT',
	        nextWeek : 'dddd [da] LT',
	        lastDay : '[Dec\'h da] LT',
	        lastWeek : 'dddd [paset da] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'a-benn %s',
	        past : '%s \'zo',
	        s : 'un nebeud segondennoù',
	        m : 'ur vunutenn',
	        mm : relativeTimeWithMutation,
	        h : 'un eur',
	        hh : '%d eur',
	        d : 'un devezh',
	        dd : relativeTimeWithMutation,
	        M : 'ur miz',
	        MM : relativeTimeWithMutation,
	        y : 'ur bloaz',
	        yy : specialMutationForYears
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	    ordinal : function (number) {
	        var output = (number === 1) ? 'añ' : 'vet';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return br;

	})));


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}

	var bs = moment.defineLocale('bs', {
	    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return bs;

	})));


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ca = moment.defineLocale('ca', {
	    months : {
	        standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
	        isFormat: /D[oD]?(\s)+MMMM/
	    },
	    monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : '[el] D MMMM [de] YYYY',
	        ll : 'D MMM YYYY',
	        LLL : '[el] D MMMM [de] YYYY [a les] H:mm',
	        lll : 'D MMM YYYY, H:mm',
	        LLLL : '[el] dddd D MMMM [de] YYYY [a les] H:mm',
	        llll : 'ddd D MMM YYYY, H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextDay : function () {
	            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastDay : function () {
	            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'd\'aquí %s',
	        past : 'fa %s',
	        s : 'uns segons',
	        m : 'un minut',
	        mm : '%d minuts',
	        h : 'una hora',
	        hh : '%d hores',
	        d : 'un dia',
	        dd : '%d dies',
	        M : 'un mes',
	        MM : '%d mesos',
	        y : 'un any',
	        yy : '%d anys'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	    ordinal : function (number, period) {
	        var output = (number === 1) ? 'r' :
	            (number === 2) ? 'n' :
	            (number === 3) ? 'r' :
	            (number === 4) ? 't' : 'è';
	        if (period === 'w' || period === 'W') {
	            output = 'a';
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return ca;

	})));


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
	var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	    }
	}

	var cs = moment.defineLocale('cs', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParse : (function (months, monthsShort) {
	        var i, _monthsParse = [];
	        for (i = 0; i < 12; i++) {
	            // use custom parser to solve problem with July (červenec)
	            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	        }
	        return _monthsParse;
	    }(months, monthsShort)),
	    shortMonthsParse : (function (monthsShort) {
	        var i, _shortMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	        }
	        return _shortMonthsParse;
	    }(monthsShort)),
	    longMonthsParse : (function (months) {
	        var i, _longMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	        }
	        return _longMonthsParse;
	    }(months)),
	    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm',
	        l : 'D. M. YYYY'
	    },
	    calendar : {
	        sameDay: '[dnes v] LT',
	        nextDay: '[zítra v] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	            }
	        },
	        lastDay: '[včera v] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'před %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return cs;

	})));


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var cv = moment.defineLocale('cv', {
	    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	    },
	    calendar : {
	        sameDay: '[Паян] LT [сехетре]',
	        nextDay: '[Ыран] LT [сехетре]',
	        lastDay: '[Ӗнер] LT [сехетре]',
	        nextWeek: '[Ҫитес] dddd LT [сехетре]',
	        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (output) {
	            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	            return output + affix;
	        },
	        past : '%s каялла',
	        s : 'пӗр-ик ҫеккунт',
	        m : 'пӗр минут',
	        mm : '%d минут',
	        h : 'пӗр сехет',
	        hh : '%d сехет',
	        d : 'пӗр кун',
	        dd : '%d кун',
	        M : 'пӗр уйӑх',
	        MM : '%d уйӑх',
	        y : 'пӗр ҫул',
	        yy : '%d ҫул'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	    ordinal : '%d-мӗш',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return cv;

	})));


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var cy = moment.defineLocale('cy', {
	    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    // time formats are the same as en-gb
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[Heddiw am] LT',
	        nextDay: '[Yfory am] LT',
	        nextWeek: 'dddd [am] LT',
	        lastDay: '[Ddoe am] LT',
	        lastWeek: 'dddd [diwethaf am] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'mewn %s',
	        past: '%s yn ôl',
	        s: 'ychydig eiliadau',
	        m: 'munud',
	        mm: '%d munud',
	        h: 'awr',
	        hh: '%d awr',
	        d: 'diwrnod',
	        dd: '%d diwrnod',
	        M: 'mis',
	        MM: '%d mis',
	        y: 'blwyddyn',
	        yy: '%d flynedd'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	    ordinal: function (number) {
	        var b = number,
	            output = '',
	            lookup = [
	                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	            ];
	        if (b > 20) {
	            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                output = 'fed'; // not 30ain, 70ain or 90ain
	            } else {
	                output = 'ain';
	            }
	        } else if (b > 0) {
	            output = lookup[b];
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return cy;

	})));


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var da = moment.defineLocale('da', {
	    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay : '[i dag kl.] LT',
	        nextDay : '[i morgen kl.] LT',
	        nextWeek : 'på dddd [kl.] LT',
	        lastDay : '[i går kl.] LT',
	        lastWeek : '[i] dddd[s kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'få sekunder',
	        m : 'et minut',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dage',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'et år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return da;

	})));


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}

	var de = moment.defineLocale('de', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return de;

	})));


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}

	var deAt = moment.defineLocale('de-at', {
	    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return deAt;

	})));


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Switzerland) [de-ch]
	//! author : sschueller : https://github.com/sschueller

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	// based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#

	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}

	var deCh = moment.defineLocale('de-ch', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Febr._März_April_Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH.mm',
	        LTS: 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH.mm',
	        LLLL : 'dddd, D. MMMM YYYY HH.mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return deCh;

	})));


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = [
	    'ޖެނުއަރީ',
	    'ފެބްރުއަރީ',
	    'މާރިޗު',
	    'އޭޕްރީލު',
	    'މޭ',
	    'ޖޫން',
	    'ޖުލައި',
	    'އޯގަސްޓު',
	    'ސެޕްޓެމްބަރު',
	    'އޮކްޓޯބަރު',
	    'ނޮވެމްބަރު',
	    'ޑިސެމްބަރު'
	];
	var weekdays = [
	    'އާދިއްތަ',
	    'ހޯމަ',
	    'އަންގާރަ',
	    'ބުދަ',
	    'ބުރާސްފަތި',
	    'ހުކުރު',
	    'ހޮނިހިރު'
	];

	var dv = moment.defineLocale('dv', {
	    months : months,
	    monthsShort : months,
	    weekdays : weekdays,
	    weekdaysShort : weekdays,
	    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	    longDateFormat : {

	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/M/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /މކ|މފ/,
	    isPM : function (input) {
	        return 'މފ' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'މކ';
	        } else {
	            return 'މފ';
	        }
	    },
	    calendar : {
	        sameDay : '[މިއަދު] LT',
	        nextDay : '[މާދަމާ] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[އިއްޔެ] LT',
	        lastWeek : '[ފާއިތުވި] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ތެރޭގައި %s',
	        past : 'ކުރިން %s',
	        s : 'ސިކުންތުކޮޅެއް',
	        m : 'މިނިޓެއް',
	        mm : 'މިނިޓު %d',
	        h : 'ގަޑިއިރެއް',
	        hh : 'ގަޑިއިރު %d',
	        d : 'ދުވަހެއް',
	        dd : 'ދުވަސް %d',
	        M : 'މަހެއް',
	        MM : 'މަސް %d',
	        y : 'އަހަރެއް',
	        yy : 'އަހަރު %d'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 7,  // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return dv;

	})));


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}


	var el = moment.defineLocale('el', {
	    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	    months : function (momentToFormat, format) {
	        if (!momentToFormat) {
	            return this._monthsNominativeEl;
	        } else if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	            return this._monthsGenitiveEl[momentToFormat.month()];
	        } else {
	            return this._monthsNominativeEl[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'μμ' : 'ΜΜ';
	        } else {
	            return isLower ? 'πμ' : 'ΠΜ';
	        }
	    },
	    isPM : function (input) {
	        return ((input + '').toLowerCase()[0] === 'μ');
	    },
	    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendarEl : {
	        sameDay : '[Σήμερα {}] LT',
	        nextDay : '[Αύριο {}] LT',
	        nextWeek : 'dddd [{}] LT',
	        lastDay : '[Χθες {}] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 6:
	                    return '[το προηγούμενο] dddd [{}] LT';
	                default:
	                    return '[την προηγούμενη] dddd [{}] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    calendar : function (key, mom) {
	        var output = this._calendarEl[key],
	            hours = mom && mom.hours();
	        if (isFunction(output)) {
	            output = output.apply(mom);
	        }
	        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	    },
	    relativeTime : {
	        future : 'σε %s',
	        past : '%s πριν',
	        s : 'λίγα δευτερόλεπτα',
	        m : 'ένα λεπτό',
	        mm : '%d λεπτά',
	        h : 'μία ώρα',
	        hh : '%d ώρες',
	        d : 'μία μέρα',
	        dd : '%d μέρες',
	        M : 'ένας μήνας',
	        MM : '%d μήνες',
	        y : 'ένας χρόνος',
	        yy : '%d χρόνια'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}η/,
	    ordinal: '%dη',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4st is the first week of the year.
	    }
	});

	return el;

	})));


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enAu = moment.defineLocale('en-au', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enAu;

	})));


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enCa = moment.defineLocale('en-ca', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'YYYY-MM-DD',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	return enCa;

	})));


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enGb = moment.defineLocale('en-gb', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enGb;

	})));


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enIe = moment.defineLocale('en-ie', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enIe;

	})));


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var enNz = moment.defineLocale('en-nz', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return enNz;

	})));


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
	//! comment : miestasmia corrected the translation by colindean

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var eo = moment.defineLocale('eo', {
	    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	    weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	    weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	    weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D[-a de] MMMM, YYYY',
	        LLL : 'D[-a de] MMMM, YYYY HH:mm',
	        LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
	    },
	    meridiemParse: /[ap]\.t\.m/i,
	    isPM: function (input) {
	        return input.charAt(0).toLowerCase() === 'p';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'p.t.m.' : 'P.T.M.';
	        } else {
	            return isLower ? 'a.t.m.' : 'A.T.M.';
	        }
	    },
	    calendar : {
	        sameDay : '[Hodiaŭ je] LT',
	        nextDay : '[Morgaŭ je] LT',
	        nextWeek : 'dddd [je] LT',
	        lastDay : '[Hieraŭ je] LT',
	        lastWeek : '[pasinta] dddd [je] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'post %s',
	        past : 'antaŭ %s',
	        s : 'sekundoj',
	        m : 'minuto',
	        mm : '%d minutoj',
	        h : 'horo',
	        hh : '%d horoj',
	        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	        dd : '%d tagoj',
	        M : 'monato',
	        MM : '%d monatoj',
	        y : 'jaro',
	        yy : '%d jaroj'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}a/,
	    ordinal : '%da',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return eo;

	})));


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	var es = moment.defineLocale('es', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return es;

	})));


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	var esDo = moment.defineLocale('es-do', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortDot;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY h:mm A',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return esDo;

	})));


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	        'm' : ['ühe minuti', 'üks minut'],
	        'mm': [number + ' minuti', number + ' minutit'],
	        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	        'hh': [number + ' tunni', number + ' tundi'],
	        'd' : ['ühe päeva', 'üks päev'],
	        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	        'MM': [number + ' kuu', number + ' kuud'],
	        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	        'yy': [number + ' aasta', number + ' aastat']
	    };
	    if (withoutSuffix) {
	        return format[key][2] ? format[key][2] : format[key][1];
	    }
	    return isFuture ? format[key][0] : format[key][1];
	}

	var et = moment.defineLocale('et', {
	    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	    longDateFormat : {
	        LT   : 'H:mm',
	        LTS : 'H:mm:ss',
	        L    : 'DD.MM.YYYY',
	        LL   : 'D. MMMM YYYY',
	        LLL  : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[Täna,] LT',
	        nextDay  : '[Homme,] LT',
	        nextWeek : '[Järgmine] dddd LT',
	        lastDay  : '[Eile,] LT',
	        lastWeek : '[Eelmine] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s pärast',
	        past   : '%s tagasi',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : '%d päeva',
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return et;

	})));


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var eu = moment.defineLocale('eu', {
	    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY[ko] MMMM[ren] D[a]',
	        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	        l : 'YYYY-M-D',
	        ll : 'YYYY[ko] MMM D[a]',
	        lll : 'YYYY[ko] MMM D[a] HH:mm',
	        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	    },
	    calendar : {
	        sameDay : '[gaur] LT[etan]',
	        nextDay : '[bihar] LT[etan]',
	        nextWeek : 'dddd LT[etan]',
	        lastDay : '[atzo] LT[etan]',
	        lastWeek : '[aurreko] dddd LT[etan]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s barru',
	        past : 'duela %s',
	        s : 'segundo batzuk',
	        m : 'minutu bat',
	        mm : '%d minutu',
	        h : 'ordu bat',
	        hh : '%d ordu',
	        d : 'egun bat',
	        dd : '%d egun',
	        M : 'hilabete bat',
	        MM : '%d hilabete',
	        y : 'urte bat',
	        yy : '%d urte'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return eu;

	})));


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '۱',
	    '2': '۲',
	    '3': '۳',
	    '4': '۴',
	    '5': '۵',
	    '6': '۶',
	    '7': '۷',
	    '8': '۸',
	    '9': '۹',
	    '0': '۰'
	};
	var numberMap = {
	    '۱': '1',
	    '۲': '2',
	    '۳': '3',
	    '۴': '4',
	    '۵': '5',
	    '۶': '6',
	    '۷': '7',
	    '۸': '8',
	    '۹': '9',
	    '۰': '0'
	};

	var fa = moment.defineLocale('fa', {
	    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /قبل از ظهر|بعد از ظهر/,
	    isPM: function (input) {
	        return /بعد از ظهر/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'قبل از ظهر';
	        } else {
	            return 'بعد از ظهر';
	        }
	    },
	    calendar : {
	        sameDay : '[امروز ساعت] LT',
	        nextDay : '[فردا ساعت] LT',
	        nextWeek : 'dddd [ساعت] LT',
	        lastDay : '[دیروز ساعت] LT',
	        lastWeek : 'dddd [پیش] [ساعت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'در %s',
	        past : '%s پیش',
	        s : 'چند ثانیه',
	        m : 'یک دقیقه',
	        mm : '%d دقیقه',
	        h : 'یک ساعت',
	        hh : '%d ساعت',
	        d : 'یک روز',
	        dd : '%d روز',
	        M : 'یک ماه',
	        MM : '%d ماه',
	        y : 'یک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/[۰-۹]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}م/,
	    ordinal : '%dم',
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12 // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return fa;

	})));


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
	var numbersFuture = [
	        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	        numbersPast[7], numbersPast[8], numbersPast[9]
	    ];
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = '';
	    switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	    }
	    result = verbalNumber(number, isFuture) + ' ' + result;
	    return result;
	}
	function verbalNumber(number, isFuture) {
	    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	}

	var fi = moment.defineLocale('fi', {
	    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'Do MMMM[ta] YYYY',
	        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	        l : 'D.M.YYYY',
	        ll : 'Do MMM YYYY',
	        lll : 'Do MMM YYYY, [klo] HH.mm',
	        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	    },
	    calendar : {
	        sameDay : '[tänään] [klo] LT',
	        nextDay : '[huomenna] [klo] LT',
	        nextWeek : 'dddd [klo] LT',
	        lastDay : '[eilen] [klo] LT',
	        lastWeek : '[viime] dddd[na] [klo] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s päästä',
	        past : '%s sitten',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fi;

	})));


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var fo = moment.defineLocale('fo', {
	    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D. MMMM, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Í dag kl.] LT',
	        nextDay : '[Í morgin kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[Í gjár kl.] LT',
	        lastWeek : '[síðstu] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'um %s',
	        past : '%s síðani',
	        s : 'fá sekund',
	        m : 'ein minutt',
	        mm : '%d minuttir',
	        h : 'ein tími',
	        hh : '%d tímar',
	        d : 'ein dagur',
	        dd : '%d dagar',
	        M : 'ein mánaði',
	        MM : '%d mánaðir',
	        y : 'eitt ár',
	        yy : '%d ár'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fo;

	})));


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var fr = moment.defineLocale('fr', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // TODO: Return 'e' when day of month > 1. Move this case inside
	            // block for masculine words below.
	            // See https://github.com/moment/moment/issues/3375
	            case 'D':
	                return number + (number === 1 ? 'er' : '');

	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');

	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fr;

	})));


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var frCa = moment.defineLocale('fr-ca', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'D':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');

	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    }
	});

	return frCa;

	})));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var frCh = moment.defineLocale('fr-ch', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Aujourd’hui à] LT',
	        nextDay : '[Demain à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[Hier à] LT',
	        lastWeek : 'dddd [dernier à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // Words with masculine grammatical gender: mois, trimestre, jour
	            default:
	            case 'M':
	            case 'Q':
	            case 'D':
	            case 'DDD':
	            case 'd':
	                return number + (number === 1 ? 'er' : 'e');

	            // Words with feminine grammatical gender: semaine
	            case 'w':
	            case 'W':
	                return number + (number === 1 ? 're' : 'e');
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return frCh;

	})));


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	var fy = moment.defineLocale('fy', {
	    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[hjoed om] LT',
	        nextDay: '[moarn om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[juster om] LT',
	        lastWeek: '[ôfrûne] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'oer %s',
	        past : '%s lyn',
	        s : 'in pear sekonden',
	        m : 'ien minút',
	        mm : '%d minuten',
	        h : 'ien oere',
	        hh : '%d oeren',
	        d : 'ien dei',
	        dd : '%d dagen',
	        M : 'ien moanne',
	        MM : '%d moannen',
	        y : 'ien jier',
	        yy : '%d jierren'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return fy;

	})));


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = [
	    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	];

	var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

	var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

	var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

	var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

	var gd = moment.defineLocale('gd', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParseExact : true,
	    weekdays : weekdays,
	    weekdaysShort : weekdaysShort,
	    weekdaysMin : weekdaysMin,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[An-diugh aig] LT',
	        nextDay : '[A-màireach aig] LT',
	        nextWeek : 'dddd [aig] LT',
	        lastDay : '[An-dè aig] LT',
	        lastWeek : 'dddd [seo chaidh] [aig] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ann an %s',
	        past : 'bho chionn %s',
	        s : 'beagan diogan',
	        m : 'mionaid',
	        mm : '%d mionaidean',
	        h : 'uair',
	        hh : '%d uairean',
	        d : 'latha',
	        dd : '%d latha',
	        M : 'mìos',
	        MM : '%d mìosan',
	        y : 'bliadhna',
	        yy : '%d bliadhna'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
	    ordinal : function (number) {
	        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return gd;

	})));


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var gl = moment.defineLocale('gl', {
	    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        lastDay : function () {
	            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	        },
	        lastWeek : function () {
	            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (str) {
	            if (str.indexOf('un') === 0) {
	                return 'n' + str;
	            }
	            return 'en ' + str;
	        },
	        past : 'hai %s',
	        s : 'uns segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'unha hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return gl;

	})));


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Latin script [gom-latn]
	//! author : The Discoverer : https://github.com/WikiDiscoverer

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['thodde secondanim', 'thodde second'],
	        'm': ['eka mintan', 'ek minute'],
	        'mm': [number + ' mintanim', number + ' mintam'],
	        'h': ['eka horan', 'ek hor'],
	        'hh': [number + ' horanim', number + ' hor'],
	        'd': ['eka disan', 'ek dis'],
	        'dd': [number + ' disanim', number + ' dis'],
	        'M': ['eka mhoinean', 'ek mhoino'],
	        'MM': [number + ' mhoineanim', number + ' mhoine'],
	        'y': ['eka vorsan', 'ek voros'],
	        'yy': [number + ' vorsanim', number + ' vorsam']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}

	var gomLatn = moment.defineLocale('gom-latn', {
	    months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
	    monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
	    weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	    weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'A h:mm [vazta]',
	        LTS : 'A h:mm:ss [vazta]',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY A h:mm [vazta]',
	        LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
	        llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
	    },
	    calendar : {
	        sameDay: '[Aiz] LT',
	        nextDay: '[Faleam] LT',
	        nextWeek: '[Ieta to] dddd[,] LT',
	        lastDay: '[Kal] LT',
	        lastWeek: '[Fatlo] dddd[,] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s',
	        past : '%s adim',
	        s : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}(er)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            // the ordinal 'er' only applies to day of the month
	            case 'D':
	                return number + 'er';
	            default:
	            case 'M':
	            case 'Q':
	            case 'DDD':
	            case 'd':
	            case 'w':
	            case 'W':
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    },
	    meridiemParse: /rati|sokalli|donparam|sanje/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'rati') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'sokalli') {
	            return hour;
	        } else if (meridiem === 'donparam') {
	            return hour > 12 ? hour : hour + 12;
	        } else if (meridiem === 'sanje') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'rati';
	        } else if (hour < 12) {
	            return 'sokalli';
	        } else if (hour < 16) {
	            return 'donparam';
	        } else if (hour < 20) {
	            return 'sanje';
	        } else {
	            return 'rati';
	        }
	    }
	});

	return gomLatn;

	})));


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var he = moment.defineLocale('he', {
	    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [ב]MMMM YYYY',
	        LLL : 'D [ב]MMMM YYYY HH:mm',
	        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	        l : 'D/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[היום ב־]LT',
	        nextDay : '[מחר ב־]LT',
	        nextWeek : 'dddd [בשעה] LT',
	        lastDay : '[אתמול ב־]LT',
	        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'בעוד %s',
	        past : 'לפני %s',
	        s : 'מספר שניות',
	        m : 'דקה',
	        mm : '%d דקות',
	        h : 'שעה',
	        hh : function (number) {
	            if (number === 2) {
	                return 'שעתיים';
	            }
	            return number + ' שעות';
	        },
	        d : 'יום',
	        dd : function (number) {
	            if (number === 2) {
	                return 'יומיים';
	            }
	            return number + ' ימים';
	        },
	        M : 'חודש',
	        MM : function (number) {
	            if (number === 2) {
	                return 'חודשיים';
	            }
	            return number + ' חודשים';
	        },
	        y : 'שנה',
	        yy : function (number) {
	            if (number === 2) {
	                return 'שנתיים';
	            } else if (number % 10 === 0 && number !== 10) {
	                return number + ' שנה';
	            }
	            return number + ' שנים';
	        }
	    },
	    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	    isPM : function (input) {
	        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 5) {
	            return 'לפנות בוקר';
	        } else if (hour < 10) {
	            return 'בבוקר';
	        } else if (hour < 12) {
	            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	        } else if (hour < 18) {
	            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	        } else {
	            return 'בערב';
	        }
	    }
	});

	return he;

	})));


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};

	var hi = moment.defineLocale('hi', {
	    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm बजे',
	        LTS : 'A h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[कल] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[कल] LT',
	        lastWeek : '[पिछले] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s में',
	        past : '%s पहले',
	        s : 'कुछ ही क्षण',
	        m : 'एक मिनट',
	        mm : '%d मिनट',
	        h : 'एक घंटा',
	        hh : '%d घंटे',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महीने',
	        MM : '%d महीने',
	        y : 'एक वर्ष',
	        yy : '%d वर्ष'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	    meridiemParse: /रात|सुबह|दोपहर|शाम/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सुबह') {
	            return hour;
	        } else if (meridiem === 'दोपहर') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'शाम') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात';
	        } else if (hour < 10) {
	            return 'सुबह';
	        } else if (hour < 17) {
	            return 'दोपहर';
	        } else if (hour < 20) {
	            return 'शाम';
	        } else {
	            return 'रात';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return hi;

	})));


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}

	var hr = moment.defineLocale('hr', {
	    months : {
	        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	    },
	    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return hr;

	})));


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	function translate(number, withoutSuffix, key, isFuture) {
	    var num = number,
	        suffix;
	    switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	    }
	    return '';
	}
	function week(isFuture) {
	    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	}

	var hu = moment.defineLocale('hu', {
	    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY.MM.DD.',
	        LL : 'YYYY. MMMM D.',
	        LLL : 'YYYY. MMMM D. H:mm',
	        LLLL : 'YYYY. MMMM D., dddd H:mm'
	    },
	    meridiemParse: /de|du/i,
	    isPM: function (input) {
	        return input.charAt(1).toLowerCase() === 'u';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower === true ? 'de' : 'DE';
	        } else {
	            return isLower === true ? 'du' : 'DU';
	        }
	    },
	    calendar : {
	        sameDay : '[ma] LT[-kor]',
	        nextDay : '[holnap] LT[-kor]',
	        nextWeek : function () {
	            return week.call(this, true);
	        },
	        lastDay : '[tegnap] LT[-kor]',
	        lastWeek : function () {
	            return week.call(this, false);
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s múlva',
	        past : '%s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return hu;

	})));


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var hyAm = moment.defineLocale('hy-am', {
	    months : {
	        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	    },
	    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY թ.',
	        LLL : 'D MMMM YYYY թ., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	    },
	    calendar : {
	        sameDay: '[այսօր] LT',
	        nextDay: '[վաղը] LT',
	        lastDay: '[երեկ] LT',
	        nextWeek: function () {
	            return 'dddd [օրը ժամը] LT';
	        },
	        lastWeek: function () {
	            return '[անցած] dddd [օրը ժամը] LT';
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s հետո',
	        past : '%s առաջ',
	        s : 'մի քանի վայրկյան',
	        m : 'րոպե',
	        mm : '%d րոպե',
	        h : 'ժամ',
	        hh : '%d ժամ',
	        d : 'օր',
	        dd : '%d օր',
	        M : 'ամիս',
	        MM : '%d ամիս',
	        y : 'տարի',
	        yy : '%d տարի'
	    },
	    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	    isPM: function (input) {
	        return /^(ցերեկվա|երեկոյան)$/.test(input);
	    },
	    meridiem : function (hour) {
	        if (hour < 4) {
	            return 'գիշերվա';
	        } else if (hour < 12) {
	            return 'առավոտվա';
	        } else if (hour < 17) {
	            return 'ցերեկվա';
	        } else {
	            return 'երեկոյան';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return hyAm;

	})));


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var id = moment.defineLocale('id', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|siang|sore|malam/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'siang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sore' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'siang';
	        } else if (hours < 19) {
	            return 'sore';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Besok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kemarin pukul] LT',
	        lastWeek : 'dddd [lalu pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lalu',
	        s : 'beberapa detik',
	        m : 'semenit',
	        mm : '%d menit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return id;

	})));


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(n) {
	    if (n % 100 === 11) {
	        return true;
	    } else if (n % 10 === 1) {
	        return false;
	    }
	    return true;
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	    }
	}

	var is = moment.defineLocale('is', {
	    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	    },
	    calendar : {
	        sameDay : '[í dag kl.] LT',
	        nextDay : '[á morgun kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[í gær kl.] LT',
	        lastWeek : '[síðasta] dddd [kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'eftir %s',
	        past : 'fyrir %s síðan',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : 'klukkustund',
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return is;

	})));


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var it = moment.defineLocale('it', {
	    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	    weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
	    weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	    weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Oggi alle] LT',
	        nextDay: '[Domani alle] LT',
	        nextWeek: 'dddd [alle] LT',
	        lastDay: '[Ieri alle] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[la scorsa] dddd [alle] LT';
	                default:
	                    return '[lo scorso] dddd [alle] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	        },
	        past : '%s fa',
	        s : 'alcuni secondi',
	        m : 'un minuto',
	        mm : '%d minuti',
	        h : 'un\'ora',
	        hh : '%d ore',
	        d : 'un giorno',
	        dd : '%d giorni',
	        M : 'un mese',
	        MM : '%d mesi',
	        y : 'un anno',
	        yy : '%d anni'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return it;

	})));


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ja = moment.defineLocale('ja', {
	    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日 HH:mm',
	        LLLL : 'YYYY年M月D日 HH:mm dddd',
	        l : 'YYYY/MM/DD',
	        ll : 'YYYY年M月D日',
	        lll : 'YYYY年M月D日 HH:mm',
	        llll : 'YYYY年M月D日 HH:mm dddd'
	    },
	    meridiemParse: /午前|午後/i,
	    isPM : function (input) {
	        return input === '午後';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return '午前';
	        } else {
	            return '午後';
	        }
	    },
	    calendar : {
	        sameDay : '[今日] LT',
	        nextDay : '[明日] LT',
	        nextWeek : '[来週]dddd LT',
	        lastDay : '[昨日] LT',
	        lastWeek : '[前週]dddd LT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}日/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s後',
	        past : '%s前',
	        s : '数秒',
	        m : '1分',
	        mm : '%d分',
	        h : '1時間',
	        hh : '%d時間',
	        d : '1日',
	        dd : '%d日',
	        M : '1ヶ月',
	        MM : '%dヶ月',
	        y : '1年',
	        yy : '%d年'
	    }
	});

	return ja;

	})));


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var jv = moment.defineLocale('jv', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /enjing|siyang|sonten|ndalu/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'enjing') {
	            return hour;
	        } else if (meridiem === 'siyang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'enjing';
	        } else if (hours < 15) {
	            return 'siyang';
	        } else if (hours < 19) {
	            return 'sonten';
	        } else {
	            return 'ndalu';
	        }
	    },
	    calendar : {
	        sameDay : '[Dinten puniko pukul] LT',
	        nextDay : '[Mbenjang pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kala wingi pukul] LT',
	        lastWeek : 'dddd [kepengker pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'wonten ing %s',
	        past : '%s ingkang kepengker',
	        s : 'sawetawis detik',
	        m : 'setunggal menit',
	        mm : '%d menit',
	        h : 'setunggal jam',
	        hh : '%d jam',
	        d : 'sedinten',
	        dd : '%d dinten',
	        M : 'sewulan',
	        MM : '%d wulan',
	        y : 'setaun',
	        yy : '%d taun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return jv;

	})));


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ka = moment.defineLocale('ka', {
	    months : {
	        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	    },
	    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	    weekdays : {
	        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	        isFormat: /(წინა|შემდეგ)/
	    },
	    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[დღეს] LT[-ზე]',
	        nextDay : '[ხვალ] LT[-ზე]',
	        lastDay : '[გუშინ] LT[-ზე]',
	        nextWeek : '[შემდეგ] dddd LT[-ზე]',
	        lastWeek : '[წინა] dddd LT-ზე',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                s.replace(/ი$/, 'ში') :
	                s + 'ში';
	        },
	        past : function (s) {
	            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                return s.replace(/(ი|ე)$/, 'ის უკან');
	            }
	            if ((/წელი/).test(s)) {
	                return s.replace(/წელი$/, 'წლის უკან');
	            }
	        },
	        s : 'რამდენიმე წამი',
	        m : 'წუთი',
	        mm : '%d წუთი',
	        h : 'საათი',
	        hh : '%d საათი',
	        d : 'დღე',
	        dd : '%d დღე',
	        M : 'თვე',
	        MM : '%d თვე',
	        y : 'წელი',
	        yy : '%d წელი'
	    },
	    dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	    ordinal : function (number) {
	        if (number === 0) {
	            return number;
	        }
	        if (number === 1) {
	            return number + '-ლი';
	        }
	        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	            return 'მე-' + number;
	        }
	        return number + '-ე';
	    },
	    week : {
	        dow : 1,
	        doy : 7
	    }
	});

	return ka;

	})));


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var suffixes = {
	    0: '-ші',
	    1: '-ші',
	    2: '-ші',
	    3: '-ші',
	    4: '-ші',
	    5: '-ші',
	    6: '-шы',
	    7: '-ші',
	    8: '-ші',
	    9: '-шы',
	    10: '-шы',
	    20: '-шы',
	    30: '-шы',
	    40: '-шы',
	    50: '-ші',
	    60: '-шы',
	    70: '-ші',
	    80: '-ші',
	    90: '-шы',
	    100: '-ші'
	};

	var kk = moment.defineLocale('kk', {
	    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгін сағат] LT',
	        nextDay : '[Ертең сағат] LT',
	        nextWeek : 'dddd [сағат] LT',
	        lastDay : '[Кеше сағат] LT',
	        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ішінде',
	        past : '%s бұрын',
	        s : 'бірнеше секунд',
	        m : 'бір минут',
	        mm : '%d минут',
	        h : 'бір сағат',
	        hh : '%d сағат',
	        d : 'бір күн',
	        dd : '%d күн',
	        M : 'бір ай',
	        MM : '%d ай',
	        y : 'бір жыл',
	        yy : '%d жыл'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return kk;

	})));


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var km = moment.defineLocale('km', {
	    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	        nextDay: '[ស្អែក ម៉ោង] LT',
	        nextWeek: 'dddd [ម៉ោង] LT',
	        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: '%sទៀត',
	        past: '%sមុន',
	        s: 'ប៉ុន្មានវិនាទី',
	        m: 'មួយនាទី',
	        mm: '%d នាទី',
	        h: 'មួយម៉ោង',
	        hh: '%d ម៉ោង',
	        d: 'មួយថ្ងៃ',
	        dd: '%d ថ្ងៃ',
	        M: 'មួយខែ',
	        MM: '%d ខែ',
	        y: 'មួយឆ្នាំ',
	        yy: '%d ឆ្នាំ'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return km;

	})));


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kannada [kn]
	//! author : Rajeev Naik : https://github.com/rajeevnaikte

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '೧',
	    '2': '೨',
	    '3': '೩',
	    '4': '೪',
	    '5': '೫',
	    '6': '೬',
	    '7': '೭',
	    '8': '೮',
	    '9': '೯',
	    '0': '೦'
	};
	var numberMap = {
	    '೧': '1',
	    '೨': '2',
	    '೩': '3',
	    '೪': '4',
	    '೫': '5',
	    '೬': '6',
	    '೭': '7',
	    '೮': '8',
	    '೯': '9',
	    '೦': '0'
	};

	var kn = moment.defineLocale('kn', {
	    months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
	    monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
	    weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	    weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[ಇಂದು] LT',
	        nextDay : '[ನಾಳೆ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ನಿನ್ನೆ] LT',
	        lastWeek : '[ಕೊನೆಯ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ನಂತರ',
	        past : '%s ಹಿಂದೆ',
	        s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
	        m : 'ಒಂದು ನಿಮಿಷ',
	        mm : '%d ನಿಮಿಷ',
	        h : 'ಒಂದು ಗಂಟೆ',
	        hh : '%d ಗಂಟೆ',
	        d : 'ಒಂದು ದಿನ',
	        dd : '%d ದಿನ',
	        M : 'ಒಂದು ತಿಂಗಳು',
	        MM : '%d ತಿಂಗಳು',
	        y : 'ಒಂದು ವರ್ಷ',
	        yy : '%d ವರ್ಷ'
	    },
	    preparse: function (string) {
	        return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ರಾತ್ರಿ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	            return hour;
	        } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ಸಂಜೆ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ರಾತ್ರಿ';
	        } else if (hour < 10) {
	            return 'ಬೆಳಿಗ್ಗೆ';
	        } else if (hour < 17) {
	            return 'ಮಧ್ಯಾಹ್ನ';
	        } else if (hour < 20) {
	            return 'ಸಂಜೆ';
	        } else {
	            return 'ರಾತ್ರಿ';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	    ordinal : function (number) {
	        return number + 'ನೇ';
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return kn;

	})));


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ko = moment.defineLocale('ko', {
	    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'YYYY.MM.DD',
	        LL : 'YYYY년 MMMM D일',
	        LLL : 'YYYY년 MMMM D일 A h:mm',
	        LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
	        l : 'YYYY.MM.DD',
	        ll : 'YYYY년 MMMM D일',
	        lll : 'YYYY년 MMMM D일 A h:mm',
	        llll : 'YYYY년 MMMM D일 dddd A h:mm'
	    },
	    calendar : {
	        sameDay : '오늘 LT',
	        nextDay : '내일 LT',
	        nextWeek : 'dddd LT',
	        lastDay : '어제 LT',
	        lastWeek : '지난주 dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s 후',
	        past : '%s 전',
	        s : '몇 초',
	        ss : '%d초',
	        m : '1분',
	        mm : '%d분',
	        h : '한 시간',
	        hh : '%d시간',
	        d : '하루',
	        dd : '%d일',
	        M : '한 달',
	        MM : '%d달',
	        y : '일 년',
	        yy : '%d년'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}일/,
	    ordinal : '%d일',
	    meridiemParse : /오전|오후/,
	    isPM : function (token) {
	        return token === '오후';
	    },
	    meridiem : function (hour, minute, isUpper) {
	        return hour < 12 ? '오전' : '오후';
	    }
	});

	return ko;

	})));


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';



	var suffixes = {
	    0: '-чү',
	    1: '-чи',
	    2: '-чи',
	    3: '-чү',
	    4: '-чү',
	    5: '-чи',
	    6: '-чы',
	    7: '-чи',
	    8: '-чи',
	    9: '-чу',
	    10: '-чу',
	    20: '-чы',
	    30: '-чу',
	    40: '-чы',
	    50: '-чү',
	    60: '-чы',
	    70: '-чи',
	    80: '-чи',
	    90: '-чу',
	    100: '-чү'
	};

	var ky = moment.defineLocale('ky', {
	    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгүн саат] LT',
	        nextDay : '[Эртең саат] LT',
	        nextWeek : 'dddd [саат] LT',
	        lastDay : '[Кече саат] LT',
	        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ичинде',
	        past : '%s мурун',
	        s : 'бирнече секунд',
	        m : 'бир мүнөт',
	        mm : '%d мүнөт',
	        h : 'бир саат',
	        hh : '%d саат',
	        d : 'бир күн',
	        dd : '%d күн',
	        M : 'бир ай',
	        MM : '%d ай',
	        y : 'бир жыл',
	        yy : '%d жыл'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ky;

	})));


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eng Minutt', 'enger Minutt'],
	        'h': ['eng Stonn', 'enger Stonn'],
	        'd': ['een Dag', 'engem Dag'],
	        'M': ['ee Mount', 'engem Mount'],
	        'y': ['ee Joer', 'engem Joer']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	function processFutureTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'a ' + string;
	    }
	    return 'an ' + string;
	}
	function processPastTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'viru ' + string;
	    }
	    return 'virun ' + string;
	}
	/**
	 * Returns true if the word before the given number loses the '-n' ending.
	 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	 *
	 * @param number {integer}
	 * @returns {boolean}
	 */
	function eifelerRegelAppliesToNumber(number) {
	    number = parseInt(number, 10);
	    if (isNaN(number)) {
	        return false;
	    }
	    if (number < 0) {
	        // Negative Number --> always true
	        return true;
	    } else if (number < 10) {
	        // Only 1 digit
	        if (4 <= number && number <= 7) {
	            return true;
	        }
	        return false;
	    } else if (number < 100) {
	        // 2 digits
	        var lastDigit = number % 10, firstDigit = number / 10;
	        if (lastDigit === 0) {
	            return eifelerRegelAppliesToNumber(firstDigit);
	        }
	        return eifelerRegelAppliesToNumber(lastDigit);
	    } else if (number < 10000) {
	        // 3 or 4 digits --> recursively check first digit
	        while (number >= 10) {
	            number = number / 10;
	        }
	        return eifelerRegelAppliesToNumber(number);
	    } else {
	        // Anything larger than 4 digits: recursively check first n-3 digits
	        number = number / 1000;
	        return eifelerRegelAppliesToNumber(number);
	    }
	}

	var lb = moment.defineLocale('lb', {
	    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm [Auer]',
	        LTS: 'H:mm:ss [Auer]',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm [Auer]',
	        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	    },
	    calendar: {
	        sameDay: '[Haut um] LT',
	        sameElse: 'L',
	        nextDay: '[Muer um] LT',
	        nextWeek: 'dddd [um] LT',
	        lastDay: '[Gëschter um] LT',
	        lastWeek: function () {
	            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	            switch (this.day()) {
	                case 2:
	                case 4:
	                    return '[Leschten] dddd [um] LT';
	                default:
	                    return '[Leschte] dddd [um] LT';
	            }
	        }
	    },
	    relativeTime : {
	        future : processFutureTime,
	        past : processPastTime,
	        s : 'e puer Sekonnen',
	        m : processRelativeTime,
	        mm : '%d Minutten',
	        h : processRelativeTime,
	        hh : '%d Stonnen',
	        d : processRelativeTime,
	        dd : '%d Deeg',
	        M : processRelativeTime,
	        MM : '%d Méint',
	        y : processRelativeTime,
	        yy : '%d Joer'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal: '%d.',
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return lb;

	})));


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var lo = moment.defineLocale('lo', {
	    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	    isPM: function (input) {
	        return input === 'ຕອນແລງ';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ຕອນເຊົ້າ';
	        } else {
	            return 'ຕອນແລງ';
	        }
	    },
	    calendar : {
	        sameDay : '[ມື້ນີ້ເວລາ] LT',
	        nextDay : '[ມື້ອື່ນເວລາ] LT',
	        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ອີກ %s',
	        past : '%sຜ່ານມາ',
	        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	        m : '1 ນາທີ',
	        mm : '%d ນາທີ',
	        h : '1 ຊົ່ວໂມງ',
	        hh : '%d ຊົ່ວໂມງ',
	        d : '1 ມື້',
	        dd : '%d ມື້',
	        M : '1 ເດືອນ',
	        MM : '%d ເດືອນ',
	        y : '1 ປີ',
	        yy : '%d ປີ'
	    },
	    dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	    ordinal : function (number) {
	        return 'ທີ່' + number;
	    }
	});

	return lo;

	})));


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var units = {
	    'm' : 'minutė_minutės_minutę',
	    'mm': 'minutės_minučių_minutes',
	    'h' : 'valanda_valandos_valandą',
	    'hh': 'valandos_valandų_valandas',
	    'd' : 'diena_dienos_dieną',
	    'dd': 'dienos_dienų_dienas',
	    'M' : 'mėnuo_mėnesio_mėnesį',
	    'MM': 'mėnesiai_mėnesių_mėnesius',
	    'y' : 'metai_metų_metus',
	    'yy': 'metai_metų_metus'
	};
	function translateSeconds(number, withoutSuffix, key, isFuture) {
	    if (withoutSuffix) {
	        return 'kelios sekundės';
	    } else {
	        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	    }
	}
	function translateSingular(number, withoutSuffix, key, isFuture) {
	    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	}
	function special(number) {
	    return number % 10 === 0 || (number > 10 && number < 20);
	}
	function forms(key) {
	    return units[key].split('_');
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    if (number === 1) {
	        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	    } else if (withoutSuffix) {
	        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	    } else {
	        if (isFuture) {
	            return result + forms(key)[1];
	        } else {
	            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	        }
	    }
	}
	var lt = moment.defineLocale('lt', {
	    months : {
	        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	    },
	    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	    weekdays : {
	        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	        isFormat: /dddd HH:mm/
	    },
	    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY [m.] MMMM D [d.]',
	        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY [m.] MMMM D [d.]',
	        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	    },
	    calendar : {
	        sameDay : '[Šiandien] LT',
	        nextDay : '[Rytoj] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[Vakar] LT',
	        lastWeek : '[Praėjusį] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'po %s',
	        past : 'prieš %s',
	        s : translateSeconds,
	        m : translateSingular,
	        mm : translate,
	        h : translateSingular,
	        hh : translate,
	        d : translateSingular,
	        dd : translate,
	        M : translateSingular,
	        MM : translate,
	        y : translateSingular,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	    ordinal : function (number) {
	        return number + '-oji';
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return lt;

	})));


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var units = {
	    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'h': 'stundas_stundām_stunda_stundas'.split('_'),
	    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	    'd': 'dienas_dienām_diena_dienas'.split('_'),
	    'dd': 'dienas_dienām_diena_dienas'.split('_'),
	    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'y': 'gada_gadiem_gads_gadi'.split('_'),
	    'yy': 'gada_gadiem_gads_gadi'.split('_')
	};
	/**
	 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	 */
	function format(forms, number, withoutSuffix) {
	    if (withoutSuffix) {
	        // E.g. "21 minūte", "3 minūtes".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	    } else {
	        // E.g. "21 minūtes" as in "pēc 21 minūtes".
	        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	    }
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    return number + ' ' + format(units[key], number, withoutSuffix);
	}
	function relativeTimeWithSingular(number, withoutSuffix, key) {
	    return format(units[key], number, withoutSuffix);
	}
	function relativeSeconds(number, withoutSuffix) {
	    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	}

	var lv = moment.defineLocale('lv', {
	    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY.',
	        LL : 'YYYY. [gada] D. MMMM',
	        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	    },
	    calendar : {
	        sameDay : '[Šodien pulksten] LT',
	        nextDay : '[Rīt pulksten] LT',
	        nextWeek : 'dddd [pulksten] LT',
	        lastDay : '[Vakar pulksten] LT',
	        lastWeek : '[Pagājušā] dddd [pulksten] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'pēc %s',
	        past : 'pirms %s',
	        s : relativeSeconds,
	        m : relativeTimeWithSingular,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithSingular,
	        hh : relativeTimeWithPlural,
	        d : relativeTimeWithSingular,
	        dd : relativeTimeWithPlural,
	        M : relativeTimeWithSingular,
	        MM : relativeTimeWithPlural,
	        y : relativeTimeWithSingular,
	        yy : relativeTimeWithPlural
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return lv;

	})));


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jednog minuta'],
	        mm: ['minut', 'minuta', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mjesec', 'mjeseca', 'mjeseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};

	var me = moment.defineLocale('me', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sjutra u] LT',

	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedjelje] [u] LT',
	                '[prošlog] [ponedjeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srijede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mjesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return me;

	})));


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var mi = moment.defineLocale('mi', {
	    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY [i] HH:mm',
	        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	    },
	    calendar: {
	        sameDay: '[i teie mahana, i] LT',
	        nextDay: '[apopo i] LT',
	        nextWeek: 'dddd [i] LT',
	        lastDay: '[inanahi i] LT',
	        lastWeek: 'dddd [whakamutunga i] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'i roto i %s',
	        past: '%s i mua',
	        s: 'te hēkona ruarua',
	        m: 'he meneti',
	        mm: '%d meneti',
	        h: 'te haora',
	        hh: '%d haora',
	        d: 'he ra',
	        dd: '%d ra',
	        M: 'he marama',
	        MM: '%d marama',
	        y: 'he tau',
	        yy: '%d tau'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return mi;

	})));


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var mk = moment.defineLocale('mk', {
	    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Денес во] LT',
	        nextDay : '[Утре во] LT',
	        nextWeek : '[Во] dddd [во] LT',
	        lastDay : '[Вчера во] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'после %s',
	        past : 'пред %s',
	        s : 'неколку секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дена',
	        M : 'месец',
	        MM : '%d месеци',
	        y : 'година',
	        yy : '%d години'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return mk;

	})));


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ml = moment.defineLocale('ml', {
	    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm -നു',
	        LTS : 'A h:mm:ss -നു',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm -നു',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	    },
	    calendar : {
	        sameDay : '[ഇന്ന്] LT',
	        nextDay : '[നാളെ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ഇന്നലെ] LT',
	        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s കഴിഞ്ഞ്',
	        past : '%s മുൻപ്',
	        s : 'അൽപ നിമിഷങ്ങൾ',
	        m : 'ഒരു മിനിറ്റ്',
	        mm : '%d മിനിറ്റ്',
	        h : 'ഒരു മണിക്കൂർ',
	        hh : '%d മണിക്കൂർ',
	        d : 'ഒരു ദിവസം',
	        dd : '%d ദിവസം',
	        M : 'ഒരു മാസം',
	        MM : '%d മാസം',
	        y : 'ഒരു വർഷം',
	        yy : '%d വർഷം'
	    },
	    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'രാത്രി';
	        } else if (hour < 12) {
	            return 'രാവിലെ';
	        } else if (hour < 17) {
	            return 'ഉച്ച കഴിഞ്ഞ്';
	        } else if (hour < 20) {
	            return 'വൈകുന്നേരം';
	        } else {
	            return 'രാത്രി';
	        }
	    }
	});

	return ml;

	})));


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};

	function relativeTimeMr(number, withoutSuffix, string, isFuture)
	{
	    var output = '';
	    if (withoutSuffix) {
	        switch (string) {
	            case 's': output = 'काही सेकंद'; break;
	            case 'm': output = 'एक मिनिट'; break;
	            case 'mm': output = '%d मिनिटे'; break;
	            case 'h': output = 'एक तास'; break;
	            case 'hh': output = '%d तास'; break;
	            case 'd': output = 'एक दिवस'; break;
	            case 'dd': output = '%d दिवस'; break;
	            case 'M': output = 'एक महिना'; break;
	            case 'MM': output = '%d महिने'; break;
	            case 'y': output = 'एक वर्ष'; break;
	            case 'yy': output = '%d वर्षे'; break;
	        }
	    }
	    else {
	        switch (string) {
	            case 's': output = 'काही सेकंदां'; break;
	            case 'm': output = 'एका मिनिटा'; break;
	            case 'mm': output = '%d मिनिटां'; break;
	            case 'h': output = 'एका तासा'; break;
	            case 'hh': output = '%d तासां'; break;
	            case 'd': output = 'एका दिवसा'; break;
	            case 'dd': output = '%d दिवसां'; break;
	            case 'M': output = 'एका महिन्या'; break;
	            case 'MM': output = '%d महिन्यां'; break;
	            case 'y': output = 'एका वर्षा'; break;
	            case 'yy': output = '%d वर्षां'; break;
	        }
	    }
	    return output.replace(/%d/i, number);
	}

	var mr = moment.defineLocale('mr', {
	    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm वाजता',
	        LTS : 'A h:mm:ss वाजता',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm वाजता',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[उद्या] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[काल] LT',
	        lastWeek: '[मागील] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future: '%sमध्ये',
	        past: '%sपूर्वी',
	        s: relativeTimeMr,
	        m: relativeTimeMr,
	        mm: relativeTimeMr,
	        h: relativeTimeMr,
	        hh: relativeTimeMr,
	        d: relativeTimeMr,
	        dd: relativeTimeMr,
	        M: relativeTimeMr,
	        MM: relativeTimeMr,
	        y: relativeTimeMr,
	        yy: relativeTimeMr
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात्री') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सकाळी') {
	            return hour;
	        } else if (meridiem === 'दुपारी') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'सायंकाळी') {
	            return hour + 12;
	        }
	    },
	    meridiem: function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात्री';
	        } else if (hour < 10) {
	            return 'सकाळी';
	        } else if (hour < 17) {
	            return 'दुपारी';
	        } else if (hour < 20) {
	            return 'सायंकाळी';
	        } else {
	            return 'रात्री';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return mr;

	})));


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ms = moment.defineLocale('ms', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ms;

	})));


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var msMy = moment.defineLocale('ms-my', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return msMy;

	})));


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '၁',
	    '2': '၂',
	    '3': '၃',
	    '4': '၄',
	    '5': '၅',
	    '6': '၆',
	    '7': '၇',
	    '8': '၈',
	    '9': '၉',
	    '0': '၀'
	};
	var numberMap = {
	    '၁': '1',
	    '၂': '2',
	    '၃': '3',
	    '၄': '4',
	    '၅': '5',
	    '၆': '6',
	    '၇': '7',
	    '၈': '8',
	    '၉': '9',
	    '၀': '0'
	};

	var my = moment.defineLocale('my', {
	    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ယနေ.] LT [မှာ]',
	        nextDay: '[မနက်ဖြန်] LT [မှာ]',
	        nextWeek: 'dddd LT [မှာ]',
	        lastDay: '[မနေ.က] LT [မှာ]',
	        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'လာမည့် %s မှာ',
	        past: 'လွန်ခဲ့သော %s က',
	        s: 'စက္ကန်.အနည်းငယ်',
	        m: 'တစ်မိနစ်',
	        mm: '%d မိနစ်',
	        h: 'တစ်နာရီ',
	        hh: '%d နာရီ',
	        d: 'တစ်ရက်',
	        dd: '%d ရက်',
	        M: 'တစ်လ',
	        MM: '%d လ',
	        y: 'တစ်နှစ်',
	        yy: '%d နှစ်'
	    },
	    preparse: function (string) {
	        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return my;

	})));


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var nb = moment.defineLocale('nb', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[i dag kl.] LT',
	        nextDay: '[i morgen kl.] LT',
	        nextWeek: 'dddd [kl.] LT',
	        lastDay: '[i går kl.] LT',
	        lastWeek: '[forrige] dddd [kl.] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'noen sekunder',
	        m : 'ett minutt',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dager',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nb;

	})));


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};

	var ne = moment.defineLocale('ne', {
	    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'Aको h:mm बजे',
	        LTS : 'Aको h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, Aको h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'राति') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'बिहान') {
	            return hour;
	        } else if (meridiem === 'दिउँसो') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'साँझ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 3) {
	            return 'राति';
	        } else if (hour < 12) {
	            return 'बिहान';
	        } else if (hour < 16) {
	            return 'दिउँसो';
	        } else if (hour < 20) {
	            return 'साँझ';
	        } else {
	            return 'राति';
	        }
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[भोलि] LT',
	        nextWeek : '[आउँदो] dddd[,] LT',
	        lastDay : '[हिजो] LT',
	        lastWeek : '[गएको] dddd[,] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sमा',
	        past : '%s अगाडि',
	        s : 'केही क्षण',
	        m : 'एक मिनेट',
	        mm : '%d मिनेट',
	        h : 'एक घण्टा',
	        hh : '%d घण्टा',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महिना',
	        MM : '%d महिना',
	        y : 'एक बर्ष',
	        yy : '%d बर्ष'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ne;

	})));


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	var nl = moment.defineLocale('nl', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },

	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,

	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nl;

	})));


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	var nlBe = moment.defineLocale('nl-be', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (!m) {
	            return monthsShortWithDots;
	        } else if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },

	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,

	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nlBe;

	})));


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var nn = moment.defineLocale('nn', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[I dag klokka] LT',
	        nextDay: '[I morgon klokka] LT',
	        nextWeek: 'dddd [klokka] LT',
	        lastDay: '[I går klokka] LT',
	        lastWeek: '[Føregåande] dddd [klokka] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s sidan',
	        s : 'nokre sekund',
	        m : 'eit minutt',
	        mm : '%d minutt',
	        h : 'ein time',
	        hh : '%d timar',
	        d : 'ein dag',
	        dd : '%d dagar',
	        M : 'ein månad',
	        MM : '%d månader',
	        y : 'eit år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return nn;

	})));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '੧',
	    '2': '੨',
	    '3': '੩',
	    '4': '੪',
	    '5': '੫',
	    '6': '੬',
	    '7': '੭',
	    '8': '੮',
	    '9': '੯',
	    '0': '੦'
	};
	var numberMap = {
	    '੧': '1',
	    '੨': '2',
	    '੩': '3',
	    '੪': '4',
	    '੫': '5',
	    '੬': '6',
	    '੭': '7',
	    '੮': '8',
	    '੯': '9',
	    '੦': '0'
	};

	var paIn = moment.defineLocale('pa-in', {
	    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm ਵਜੇ',
	        LTS : 'A h:mm:ss ਵਜੇ',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	    },
	    calendar : {
	        sameDay : '[ਅਜ] LT',
	        nextDay : '[ਕਲ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ਕਲ] LT',
	        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ਵਿੱਚ',
	        past : '%s ਪਿਛਲੇ',
	        s : 'ਕੁਝ ਸਕਿੰਟ',
	        m : 'ਇਕ ਮਿੰਟ',
	        mm : '%d ਮਿੰਟ',
	        h : 'ਇੱਕ ਘੰਟਾ',
	        hh : '%d ਘੰਟੇ',
	        d : 'ਇੱਕ ਦਿਨ',
	        dd : '%d ਦਿਨ',
	        M : 'ਇੱਕ ਮਹੀਨਾ',
	        MM : '%d ਮਹੀਨੇ',
	        y : 'ਇੱਕ ਸਾਲ',
	        yy : '%d ਸਾਲ'
	    },
	    preparse: function (string) {
	        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ਰਾਤ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ਸਵੇਰ') {
	            return hour;
	        } else if (meridiem === 'ਦੁਪਹਿਰ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ਸ਼ਾਮ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ਰਾਤ';
	        } else if (hour < 10) {
	            return 'ਸਵੇਰ';
	        } else if (hour < 17) {
	            return 'ਦੁਪਹਿਰ';
	        } else if (hour < 20) {
	            return 'ਸ਼ਾਮ';
	        } else {
	            return 'ਰਾਤ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return paIn;

	})));


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
	var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	function plural(n) {
	    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	}
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	    }
	}

	var pl = moment.defineLocale('pl', {
	    months : function (momentToFormat, format) {
	        if (!momentToFormat) {
	            return monthsNominative;
	        } else if (format === '') {
	            // Hack: if format empty we know this is used to generate
	            // RegExp by moment. Give then back both valid forms of months
	            // in RegExp ready format.
	            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	        } else if (/D MMMM/.test(format)) {
	            return monthsSubjective[momentToFormat.month()];
	        } else {
	            return monthsNominative[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Dziś o] LT',
	        nextDay: '[Jutro o] LT',
	        nextWeek: '[W] dddd [o] LT',
	        lastDay: '[Wczoraj o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : '%s temu',
	        s : 'kilka sekund',
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : '1 dzień',
	        dd : '%d dni',
	        M : 'miesiąc',
	        MM : translate,
	        y : 'rok',
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return pl;

	})));


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var pt = moment.defineLocale('pt', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : 'há %s',
	        s : 'segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return pt;

	})));


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var ptBr = moment.defineLocale('pt-br', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : '%s atrás',
	        s : 'poucos segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}º/,
	    ordinal : '%dº'
	});

	return ptBr;

	})));


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	        separator = ' ';
	    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	        separator = ' de ';
	    }
	    return number + separator + format[key];
	}

	var ro = moment.defineLocale('ro', {
	    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[azi la] LT',
	        nextDay: '[mâine la] LT',
	        nextWeek: 'dddd [la] LT',
	        lastDay: '[ieri la] LT',
	        lastWeek: '[fosta] dddd [la] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'peste %s',
	        past : '%s în urmă',
	        s : 'câteva secunde',
	        m : 'un minut',
	        mm : relativeTimeWithPlural,
	        h : 'o oră',
	        hh : relativeTimeWithPlural,
	        d : 'o zi',
	        dd : relativeTimeWithPlural,
	        M : 'o lună',
	        MM : relativeTimeWithPlural,
	        y : 'un an',
	        yy : relativeTimeWithPlural
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ro;

	})));


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	        'hh': 'час_часа_часов',
	        'dd': 'день_дня_дней',
	        'MM': 'месяц_месяца_месяцев',
	        'yy': 'год_года_лет'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'минута' : 'минуту';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

	// http://new.gramota.ru/spravka/rules/139-prop : § 103
	// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	var ru = moment.defineLocale('ru', {
	    months : {
	        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	    },
	    monthsShort : {
	        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	    },
	    weekdays : {
	        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	    },
	    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,

	    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	    // копия предыдущего
	    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	    // полные названия с падежами
	    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

	    // Выражение, которое соотвествует только сокращённым формам
	    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сегодня в] LT',
	        nextDay: '[Завтра в] LT',
	        lastDay: '[Вчера в] LT',
	        nextWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        lastWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'через %s',
	        past : '%s назад',
	        s : 'несколько секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'час',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночи|утра|дня|вечера/i,
	    isPM : function (input) {
	        return /^(дня|вечера)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночи';
	        } else if (hour < 12) {
	            return 'утра';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечера';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ru;

	})));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sindhi [sd]
	//! author : Narain Sagar : https://github.com/narainsagar

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = [
	    'جنوري',
	    'فيبروري',
	    'مارچ',
	    'اپريل',
	    'مئي',
	    'جون',
	    'جولاءِ',
	    'آگسٽ',
	    'سيپٽمبر',
	    'آڪٽوبر',
	    'نومبر',
	    'ڊسمبر'
	];
	var days = [
	    'آچر',
	    'سومر',
	    'اڱارو',
	    'اربع',
	    'خميس',
	    'جمع',
	    'ڇنڇر'
	];

	var sd = moment.defineLocale('sd', {
	    months : months,
	    monthsShort : months,
	    weekdays : days,
	    weekdaysShort : days,
	    weekdaysMin : days,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd، D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /صبح|شام/,
	    isPM : function (input) {
	        return 'شام' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'صبح';
	        }
	        return 'شام';
	    },
	    calendar : {
	        sameDay : '[اڄ] LT',
	        nextDay : '[سڀاڻي] LT',
	        nextWeek : 'dddd [اڳين هفتي تي] LT',
	        lastDay : '[ڪالهه] LT',
	        lastWeek : '[گزريل هفتي] dddd [تي] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s پوء',
	        past : '%s اڳ',
	        s : 'چند سيڪنڊ',
	        m : 'هڪ منٽ',
	        mm : '%d منٽ',
	        h : 'هڪ ڪلاڪ',
	        hh : '%d ڪلاڪ',
	        d : 'هڪ ڏينهن',
	        dd : '%d ڏينهن',
	        M : 'هڪ مهينو',
	        MM : '%d مهينا',
	        y : 'هڪ سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sd;

	})));


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';



	var se = moment.defineLocale('se', {
	    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'MMMM D. [b.] YYYY',
	        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[otne ti] LT',
	        nextDay: '[ihttin ti] LT',
	        nextWeek: 'dddd [ti] LT',
	        lastDay: '[ikte ti] LT',
	        lastWeek: '[ovddit] dddd [ti] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s geažes',
	        past : 'maŋit %s',
	        s : 'moadde sekunddat',
	        m : 'okta minuhta',
	        mm : '%d minuhtat',
	        h : 'okta diimmu',
	        hh : '%d diimmut',
	        d : 'okta beaivi',
	        dd : '%d beaivvit',
	        M : 'okta mánnu',
	        MM : '%d mánut',
	        y : 'okta jahki',
	        yy : '%d jagit'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return se;

	})));


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	/*jshint -W100*/
	var si = moment.defineLocale('si', {
	    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'a h:mm',
	        LTS : 'a h:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY MMMM D',
	        LLL : 'YYYY MMMM D, a h:mm',
	        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	    },
	    calendar : {
	        sameDay : '[අද] LT[ට]',
	        nextDay : '[හෙට] LT[ට]',
	        nextWeek : 'dddd LT[ට]',
	        lastDay : '[ඊයේ] LT[ට]',
	        lastWeek : '[පසුගිය] dddd LT[ට]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sකින්',
	        past : '%sකට පෙර',
	        s : 'තත්පර කිහිපය',
	        m : 'මිනිත්තුව',
	        mm : 'මිනිත්තු %d',
	        h : 'පැය',
	        hh : 'පැය %d',
	        d : 'දිනය',
	        dd : 'දින %d',
	        M : 'මාසය',
	        MM : 'මාස %d',
	        y : 'වසර',
	        yy : 'වසර %d'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	    ordinal : function (number) {
	        return number + ' වැනි';
	    },
	    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	    isPM : function (input) {
	        return input === 'ප.ව.' || input === 'පස් වරු';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'ප.ව.' : 'පස් වරු';
	        } else {
	            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	        }
	    }
	});

	return si;

	})));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
	var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	    }
	}

	var sk = moment.defineLocale('sk', {
	    months : months,
	    monthsShort : monthsShort,
	    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[dnes o] LT',
	        nextDay: '[zajtra o] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	            }
	        },
	        lastDay: '[včera o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'pred %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sk;

	})));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	    }
	}

	var sl = moment.defineLocale('sl', {
	    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danes ob] LT',
	        nextDay  : '[jutri ob] LT',

	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	            }
	        },
	        lastDay  : '[včeraj ob] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'čez %s',
	        past   : 'pred %s',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : processRelativeTime,
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return sl;

	})));


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var sq = moment.defineLocale('sq', {
	    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /PD|MD/,
	    isPM: function (input) {
	        return input.charAt(0) === 'M';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        return hours < 12 ? 'PD' : 'MD';
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Sot në] LT',
	        nextDay : '[Nesër në] LT',
	        nextWeek : 'dddd [në] LT',
	        lastDay : '[Dje në] LT',
	        lastWeek : 'dddd [e kaluar në] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'në %s',
	        past : '%s më parë',
	        s : 'disa sekonda',
	        m : 'një minutë',
	        mm : '%d minuta',
	        h : 'një orë',
	        hh : '%d orë',
	        d : 'një ditë',
	        dd : '%d ditë',
	        M : 'një muaj',
	        MM : '%d muaj',
	        y : 'një vit',
	        yy : '%d vite'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sq;

	})));


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jedne minute'],
	        mm: ['minut', 'minute', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mesec', 'meseca', 'meseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};

	var sr = moment.defineLocale('sr', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sutra u] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedelje] [u] LT',
	                '[prošlog] [ponedeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'pre %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return sr;

	})));


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var translator = {
	    words: { //Different grammatical cases
	        m: ['један минут', 'једне минуте'],
	        mm: ['минут', 'минуте', 'минута'],
	        h: ['један сат', 'једног сата'],
	        hh: ['сат', 'сата', 'сати'],
	        dd: ['дан', 'дана', 'дана'],
	        MM: ['месец', 'месеца', 'месеци'],
	        yy: ['година', 'године', 'година']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};

	var srCyrl = moment.defineLocale('sr-cyrl', {
	    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[данас у] LT',
	        nextDay: '[сутра у] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	            }
	        },
	        lastDay  : '[јуче у] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[прошле] [недеље] [у] LT',
	                '[прошлог] [понедељка] [у] LT',
	                '[прошлог] [уторка] [у] LT',
	                '[прошле] [среде] [у] LT',
	                '[прошлог] [четвртка] [у] LT',
	                '[прошлог] [петка] [у] LT',
	                '[прошле] [суботе] [у] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past   : 'пре %s',
	        s      : 'неколико секунди',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'дан',
	        dd     : translator.translate,
	        M      : 'месец',
	        MM     : translator.translate,
	        y      : 'годину',
	        yy     : translator.translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return srCyrl;

	})));


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';



	var ss = moment.defineLocale('ss', {
	    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Namuhla nga] LT',
	        nextDay : '[Kusasa nga] LT',
	        nextWeek : 'dddd [nga] LT',
	        lastDay : '[Itolo nga] LT',
	        lastWeek : 'dddd [leliphelile] [nga] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'nga %s',
	        past : 'wenteka nga %s',
	        s : 'emizuzwana lomcane',
	        m : 'umzuzu',
	        mm : '%d emizuzu',
	        h : 'lihora',
	        hh : '%d emahora',
	        d : 'lilanga',
	        dd : '%d emalanga',
	        M : 'inyanga',
	        MM : '%d tinyanga',
	        y : 'umnyaka',
	        yy : '%d iminyaka'
	    },
	    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'ekuseni';
	        } else if (hours < 15) {
	            return 'emini';
	        } else if (hours < 19) {
	            return 'entsambama';
	        } else {
	            return 'ebusuku';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ekuseni') {
	            return hour;
	        } else if (meridiem === 'emini') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	            if (hour === 0) {
	                return 0;
	            }
	            return hour + 12;
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : '%d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return ss;

	})));


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var sv = moment.defineLocale('sv', {
	    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Idag] LT',
	        nextDay: '[Imorgon] LT',
	        lastDay: '[Igår] LT',
	        nextWeek: '[På] dddd LT',
	        lastWeek: '[I] dddd[s] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : 'för %s sedan',
	        s : 'några sekunder',
	        m : 'en minut',
	        mm : '%d minuter',
	        h : 'en timme',
	        hh : '%d timmar',
	        d : 'en dag',
	        dd : '%d dagar',
	        M : 'en månad',
	        MM : '%d månader',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'e' :
	            (b === 1) ? 'a' :
	            (b === 2) ? 'a' :
	            (b === 3) ? 'e' : 'e';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return sv;

	})));


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var sw = moment.defineLocale('sw', {
	    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[leo saa] LT',
	        nextDay : '[kesho saa] LT',
	        nextWeek : '[wiki ijayo] dddd [saat] LT',
	        lastDay : '[jana] LT',
	        lastWeek : '[wiki iliyopita] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s baadaye',
	        past : 'tokea %s',
	        s : 'hivi punde',
	        m : 'dakika moja',
	        mm : 'dakika %d',
	        h : 'saa limoja',
	        hh : 'masaa %d',
	        d : 'siku moja',
	        dd : 'masiku %d',
	        M : 'mwezi mmoja',
	        MM : 'miezi %d',
	        y : 'mwaka mmoja',
	        yy : 'miaka %d'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return sw;

	})));


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var symbolMap = {
	    '1': '௧',
	    '2': '௨',
	    '3': '௩',
	    '4': '௪',
	    '5': '௫',
	    '6': '௬',
	    '7': '௭',
	    '8': '௮',
	    '9': '௯',
	    '0': '௦'
	};
	var numberMap = {
	    '௧': '1',
	    '௨': '2',
	    '௩': '3',
	    '௪': '4',
	    '௫': '5',
	    '௬': '6',
	    '௭': '7',
	    '௮': '8',
	    '௯': '9',
	    '௦': '0'
	};

	var ta = moment.defineLocale('ta', {
	    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, HH:mm',
	        LLLL : 'dddd, D MMMM YYYY, HH:mm'
	    },
	    calendar : {
	        sameDay : '[இன்று] LT',
	        nextDay : '[நாளை] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[நேற்று] LT',
	        lastWeek : '[கடந்த வாரம்] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s இல்',
	        past : '%s முன்',
	        s : 'ஒரு சில விநாடிகள்',
	        m : 'ஒரு நிமிடம்',
	        mm : '%d நிமிடங்கள்',
	        h : 'ஒரு மணி நேரம்',
	        hh : '%d மணி நேரம்',
	        d : 'ஒரு நாள்',
	        dd : '%d நாட்கள்',
	        M : 'ஒரு மாதம்',
	        MM : '%d மாதங்கள்',
	        y : 'ஒரு வருடம்',
	        yy : '%d ஆண்டுகள்'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}வது/,
	    ordinal : function (number) {
	        return number + 'வது';
	    },
	    preparse: function (string) {
	        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // refer http://ta.wikipedia.org/s/1er1
	    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 2) {
	            return ' யாமம்';
	        } else if (hour < 6) {
	            return ' வைகறை';  // வைகறை
	        } else if (hour < 10) {
	            return ' காலை'; // காலை
	        } else if (hour < 14) {
	            return ' நண்பகல்'; // நண்பகல்
	        } else if (hour < 18) {
	            return ' எற்பாடு'; // எற்பாடு
	        } else if (hour < 22) {
	            return ' மாலை'; // மாலை
	        } else {
	            return ' யாமம்';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'யாமம்') {
	            return hour < 2 ? hour : hour + 12;
	        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	            return hour;
	        } else if (meridiem === 'நண்பகல்') {
	            return hour >= 10 ? hour : hour + 12;
	        } else {
	            return hour + 12;
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return ta;

	})));


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var te = moment.defineLocale('te', {
	    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[నేడు] LT',
	        nextDay : '[రేపు] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[నిన్న] LT',
	        lastWeek : '[గత] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s లో',
	        past : '%s క్రితం',
	        s : 'కొన్ని క్షణాలు',
	        m : 'ఒక నిమిషం',
	        mm : '%d నిమిషాలు',
	        h : 'ఒక గంట',
	        hh : '%d గంటలు',
	        d : 'ఒక రోజు',
	        dd : '%d రోజులు',
	        M : 'ఒక నెల',
	        MM : '%d నెలలు',
	        y : 'ఒక సంవత్సరం',
	        yy : '%d సంవత్సరాలు'
	    },
	    dayOfMonthOrdinalParse : /\d{1,2}వ/,
	    ordinal : '%dవ',
	    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'రాత్రి') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ఉదయం') {
	            return hour;
	        } else if (meridiem === 'మధ్యాహ్నం') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'సాయంత్రం') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'రాత్రి';
	        } else if (hour < 10) {
	            return 'ఉదయం';
	        } else if (hour < 17) {
	            return 'మధ్యాహ్నం';
	        } else if (hour < 20) {
	            return 'సాయంత్రం';
	        } else {
	            return 'రాత్రి';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return te;

	})));


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tet = moment.defineLocale('tet', {
	    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
	    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Ohin iha] LT',
	        nextDay: '[Aban iha] LT',
	        nextWeek: 'dddd [iha] LT',
	        lastDay: '[Horiseik iha] LT',
	        lastWeek: 'dddd [semana kotuk] [iha] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'iha %s',
	        past : '%s liuba',
	        s : 'minutu balun',
	        m : 'minutu ida',
	        mm : 'minutus %d',
	        h : 'horas ida',
	        hh : 'horas %d',
	        d : 'loron ida',
	        dd : 'loron %d',
	        M : 'fulan ida',
	        MM : 'fulan %d',
	        y : 'tinan ida',
	        yy : 'tinan %d'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return tet;

	})));


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var th = moment.defineLocale('th', {
	    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY เวลา H:mm',
	        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	    },
	    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	    isPM: function (input) {
	        return input === 'หลังเที่ยง';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ก่อนเที่ยง';
	        } else {
	            return 'หลังเที่ยง';
	        }
	    },
	    calendar : {
	        sameDay : '[วันนี้ เวลา] LT',
	        nextDay : '[พรุ่งนี้ เวลา] LT',
	        nextWeek : 'dddd[หน้า เวลา] LT',
	        lastDay : '[เมื่อวานนี้ เวลา] LT',
	        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'อีก %s',
	        past : '%sที่แล้ว',
	        s : 'ไม่กี่วินาที',
	        m : '1 นาที',
	        mm : '%d นาที',
	        h : '1 ชั่วโมง',
	        hh : '%d ชั่วโมง',
	        d : '1 วัน',
	        dd : '%d วัน',
	        M : '1 เดือน',
	        MM : '%d เดือน',
	        y : '1 ปี',
	        yy : '%d ปี'
	    }
	});

	return th;

	})));


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tlPh = moment.defineLocale('tl-ph', {
	    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'MM/D/YYYY',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY HH:mm',
	        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: 'LT [ngayong araw]',
	        nextDay: '[Bukas ng] LT',
	        nextWeek: 'LT [sa susunod na] dddd',
	        lastDay: 'LT [kahapon]',
	        lastWeek: 'LT [noong nakaraang] dddd',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'sa loob ng %s',
	        past : '%s ang nakalipas',
	        s : 'ilang segundo',
	        m : 'isang minuto',
	        mm : '%d minuto',
	        h : 'isang oras',
	        hh : '%d oras',
	        d : 'isang araw',
	        dd : '%d araw',
	        M : 'isang buwan',
	        MM : '%d buwan',
	        y : 'isang taon',
	        yy : '%d taon'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return tlPh;

	})));


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

	function translateFuture(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'leS' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'waQ' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'nem' :
	    time + ' pIq';
	    return time;
	}

	function translatePast(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'Hu’' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'wen' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'ben' :
	    time + ' ret';
	    return time;
	}

	function translate(number, withoutSuffix, string, isFuture) {
	    var numberNoun = numberAsNoun(number);
	    switch (string) {
	        case 'mm':
	            return numberNoun + ' tup';
	        case 'hh':
	            return numberNoun + ' rep';
	        case 'dd':
	            return numberNoun + ' jaj';
	        case 'MM':
	            return numberNoun + ' jar';
	        case 'yy':
	            return numberNoun + ' DIS';
	    }
	}

	function numberAsNoun(number) {
	    var hundred = Math.floor((number % 1000) / 100),
	    ten = Math.floor((number % 100) / 10),
	    one = number % 10,
	    word = '';
	    if (hundred > 0) {
	        word += numbersNouns[hundred] + 'vatlh';
	    }
	    if (ten > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	    }
	    if (one > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	    }
	    return (word === '') ? 'pagh' : word;
	}

	var tlh = moment.defineLocale('tlh', {
	    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[DaHjaj] LT',
	        nextDay: '[wa’leS] LT',
	        nextWeek: 'LLL',
	        lastDay: '[wa’Hu’] LT',
	        lastWeek: 'LLL',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : translateFuture,
	        past : translatePast,
	        s : 'puS lup',
	        m : 'wa’ tup',
	        mm : translate,
	        h : 'wa’ rep',
	        hh : translate,
	        d : 'wa’ jaj',
	        dd : translate,
	        M : 'wa’ jar',
	        MM : translate,
	        y : 'wa’ DIS',
	        yy : translate
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return tlh;

	})));


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var suffixes = {
	    1: '\'inci',
	    5: '\'inci',
	    8: '\'inci',
	    70: '\'inci',
	    80: '\'inci',
	    2: '\'nci',
	    7: '\'nci',
	    20: '\'nci',
	    50: '\'nci',
	    3: '\'üncü',
	    4: '\'üncü',
	    100: '\'üncü',
	    6: '\'ncı',
	    9: '\'uncu',
	    10: '\'uncu',
	    30: '\'uncu',
	    60: '\'ıncı',
	    90: '\'ıncı'
	};

	var tr = moment.defineLocale('tr', {
	    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[yarın saat] LT',
	        nextWeek : '[haftaya] dddd [saat] LT',
	        lastDay : '[dün] LT',
	        lastWeek : '[geçen hafta] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s önce',
	        s : 'birkaç saniye',
	        m : 'bir dakika',
	        mm : '%d dakika',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir yıl',
	        yy : '%d yıl'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '\'ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return tr;

	})));


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	// This is currently too difficult (maybe even impossible) to add.
	var tzl = moment.defineLocale('tzl', {
	    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM [dallas] YYYY',
	        LLL : 'D. MMMM [dallas] YYYY HH.mm',
	        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	    },
	    meridiemParse: /d\'o|d\'a/i,
	    isPM : function (input) {
	        return 'd\'o' === input.toLowerCase();
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'd\'o' : 'D\'O';
	        } else {
	            return isLower ? 'd\'a' : 'D\'A';
	        }
	    },
	    calendar : {
	        sameDay : '[oxhi à] LT',
	        nextDay : '[demà à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[ieiri à] LT',
	        lastWeek : '[sür el] dddd [lasteu à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'osprei %s',
	        past : 'ja%s',
	        s : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['viensas secunds', '\'iensas secunds'],
	        'm': ['\'n míut', '\'iens míut'],
	        'mm': [number + ' míuts', '' + number + ' míuts'],
	        'h': ['\'n þora', '\'iensa þora'],
	        'hh': [number + ' þoras', '' + number + ' þoras'],
	        'd': ['\'n ziua', '\'iensa ziua'],
	        'dd': [number + ' ziuas', '' + number + ' ziuas'],
	        'M': ['\'n mes', '\'iens mes'],
	        'MM': [number + ' mesen', '' + number + ' mesen'],
	        'y': ['\'n ar', '\'iens ar'],
	        'yy': [number + ' ars', '' + number + ' ars']
	    };
	    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	}

	return tzl;

	})));


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tzm = moment.defineLocale('tzm', {
	    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	        nextWeek: 'dddd [ⴴ] LT',
	        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	        lastWeek: 'dddd [ⴴ] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	        past : 'ⵢⴰⵏ %s',
	        s : 'ⵉⵎⵉⴽ',
	        m : 'ⵎⵉⵏⵓⴺ',
	        mm : '%d ⵎⵉⵏⵓⴺ',
	        h : 'ⵙⴰⵄⴰ',
	        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	        d : 'ⴰⵙⵙ',
	        dd : '%d oⵙⵙⴰⵏ',
	        M : 'ⴰⵢoⵓⵔ',
	        MM : '%d ⵉⵢⵢⵉⵔⵏ',
	        y : 'ⴰⵙⴳⴰⵙ',
	        yy : '%d ⵉⵙⴳⴰⵙⵏ'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return tzm;

	})));


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var tzmLatn = moment.defineLocale('tzm-latn', {
	    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[asdkh g] LT',
	        nextDay: '[aska g] LT',
	        nextWeek: 'dddd [g] LT',
	        lastDay: '[assant g] LT',
	        lastWeek: 'dddd [g] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dadkh s yan %s',
	        past : 'yan %s',
	        s : 'imik',
	        m : 'minuḍ',
	        mm : '%d minuḍ',
	        h : 'saɛa',
	        hh : '%d tassaɛin',
	        d : 'ass',
	        dd : '%d ossan',
	        M : 'ayowr',
	        MM : '%d iyyirn',
	        y : 'asgas',
	        yy : '%d isgasn'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return tzmLatn;

	})));


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	        'dd': 'день_дні_днів',
	        'MM': 'місяць_місяці_місяців',
	        'yy': 'рік_роки_років'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвилина' : 'хвилину';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'година' : 'годину';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	function weekdaysCaseReplace(m, format) {
	    var weekdays = {
	        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	    };

	    if (!m) {
	        return weekdays['nominative'];
	    }

	    var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	        'accusative' :
	        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	            'genitive' :
	            'nominative');
	    return weekdays[nounCase][m.day()];
	}
	function processHoursFunction(str) {
	    return function () {
	        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	    };
	}

	var uk = moment.defineLocale('uk', {
	    months : {
	        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	    },
	    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	    weekdays : weekdaysCaseReplace,
	    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY р.',
	        LLL : 'D MMMM YYYY р., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	    },
	    calendar : {
	        sameDay: processHoursFunction('[Сьогодні '),
	        nextDay: processHoursFunction('[Завтра '),
	        lastDay: processHoursFunction('[Вчора '),
	        nextWeek: processHoursFunction('[У] dddd ['),
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past : '%s тому',
	        s : 'декілька секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'годину',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'місяць',
	        MM : relativeTimeWithPlural,
	        y : 'рік',
	        yy : relativeTimeWithPlural
	    },
	    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	    meridiemParse: /ночі|ранку|дня|вечора/,
	    isPM: function (input) {
	        return /^(дня|вечора)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночі';
	        } else if (hour < 12) {
	            return 'ранку';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечора';
	        }
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return uk;

	})));


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Urdu [ur]
	//! author : Sawood Alam : https://github.com/ibnesayeed
	//! author : Zack : https://github.com/ZackVision

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var months = [
	    'جنوری',
	    'فروری',
	    'مارچ',
	    'اپریل',
	    'مئی',
	    'جون',
	    'جولائی',
	    'اگست',
	    'ستمبر',
	    'اکتوبر',
	    'نومبر',
	    'دسمبر'
	];
	var days = [
	    'اتوار',
	    'پیر',
	    'منگل',
	    'بدھ',
	    'جمعرات',
	    'جمعہ',
	    'ہفتہ'
	];

	var ur = moment.defineLocale('ur', {
	    months : months,
	    monthsShort : months,
	    weekdays : days,
	    weekdaysShort : days,
	    weekdaysMin : days,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd، D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /صبح|شام/,
	    isPM : function (input) {
	        return 'شام' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'صبح';
	        }
	        return 'شام';
	    },
	    calendar : {
	        sameDay : '[آج بوقت] LT',
	        nextDay : '[کل بوقت] LT',
	        nextWeek : 'dddd [بوقت] LT',
	        lastDay : '[گذشتہ روز بوقت] LT',
	        lastWeek : '[گذشتہ] dddd [بوقت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s بعد',
	        past : '%s قبل',
	        s : 'چند سیکنڈ',
	        m : 'ایک منٹ',
	        mm : '%d منٹ',
	        h : 'ایک گھنٹہ',
	        hh : '%d گھنٹے',
	        d : 'ایک دن',
	        dd : '%d دن',
	        M : 'ایک ماہ',
	        MM : '%d ماہ',
	        y : 'ایک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return ur;

	})));


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var uz = moment.defineLocale('uz', {
	    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бугун соат] LT [да]',
	        nextDay : '[Эртага] LT [да]',
	        nextWeek : 'dddd [куни соат] LT [да]',
	        lastDay : '[Кеча соат] LT [да]',
	        lastWeek : '[Утган] dddd [куни соат] LT [да]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Якин %s ичида',
	        past : 'Бир неча %s олдин',
	        s : 'фурсат',
	        m : 'бир дакика',
	        mm : '%d дакика',
	        h : 'бир соат',
	        hh : '%d соат',
	        d : 'бир кун',
	        dd : '%d кун',
	        M : 'бир ой',
	        MM : '%d ой',
	        y : 'бир йил',
	        yy : '%d йил'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return uz;

	})));


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek Latin [uz-latn]
	//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var uzLatn = moment.defineLocale('uz-latn', {
	    months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
	    monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	    weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
	    weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	    weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Bugun soat] LT [da]',
	        nextDay : '[Ertaga] LT [da]',
	        nextWeek : 'dddd [kuni soat] LT [da]',
	        lastDay : '[Kecha soat] LT [da]',
	        lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Yaqin %s ichida',
	        past : 'Bir necha %s oldin',
	        s : 'soniya',
	        m : 'bir daqiqa',
	        mm : '%d daqiqa',
	        h : 'bir soat',
	        hh : '%d soat',
	        d : 'bir kun',
	        dd : '%d kun',
	        M : 'bir oy',
	        MM : '%d oy',
	        y : 'bir yil',
	        yy : '%d yil'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});

	return uzLatn;

	})));


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var vi = moment.defineLocale('vi', {
	    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /sa|ch/i,
	    isPM : function (input) {
	        return /^ch$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'sa' : 'SA';
	        } else {
	            return isLower ? 'ch' : 'CH';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM [năm] YYYY',
	        LLL : 'D MMMM [năm] YYYY HH:mm',
	        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	        l : 'DD/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hôm nay lúc] LT',
	        nextDay: '[Ngày mai lúc] LT',
	        nextWeek: 'dddd [tuần tới lúc] LT',
	        lastDay: '[Hôm qua lúc] LT',
	        lastWeek: 'dddd [tuần rồi lúc] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s tới',
	        past : '%s trước',
	        s : 'vài giây',
	        m : 'một phút',
	        mm : '%d phút',
	        h : 'một giờ',
	        hh : '%d giờ',
	        d : 'một ngày',
	        dd : '%d ngày',
	        M : 'một tháng',
	        MM : '%d tháng',
	        y : 'một năm',
	        yy : '%d năm'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return vi;

	})));


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var xPseudo = moment.defineLocale('x-pseudo', {
	    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[T~ódá~ý át] LT',
	        nextDay : '[T~ómó~rró~w át] LT',
	        nextWeek : 'dddd [át] LT',
	        lastDay : '[Ý~ést~érdá~ý át] LT',
	        lastWeek : '[L~ást] dddd [át] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'í~ñ %s',
	        past : '%s á~gó',
	        s : 'á ~féw ~sécó~ñds',
	        m : 'á ~míñ~úté',
	        mm : '%d m~íñú~tés',
	        h : 'á~ñ hó~úr',
	        hh : '%d h~óúrs',
	        d : 'á ~dáý',
	        dd : '%d d~áýs',
	        M : 'á ~móñ~th',
	        MM : '%d m~óñt~hs',
	        y : 'á ~ýéár',
	        yy : '%d ý~éárs'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return xPseudo;

	})));


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var yo = moment.defineLocale('yo', {
	    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Ònì ni] LT',
	        nextDay : '[Ọ̀la ni] LT',
	        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	        lastDay : '[Àna ni] LT',
	        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ní %s',
	        past : '%s kọjá',
	        s : 'ìsẹjú aayá die',
	        m : 'ìsẹjú kan',
	        mm : 'ìsẹjú %d',
	        h : 'wákati kan',
	        hh : 'wákati %d',
	        d : 'ọjọ́ kan',
	        dd : 'ọjọ́ %d',
	        M : 'osù kan',
	        MM : 'osù %d',
	        y : 'ọdún kan',
	        yy : 'ọdún %d'
	    },
	    dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
	    ordinal : 'ọjọ́ %d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return yo;

	})));


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var zhCn = moment.defineLocale('zh-cn', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah点mm分',
	        LLLL : 'YYYY年MMMD日ddddAh点mm分',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日 HH:mm',
	        llll : 'YYYY年MMMD日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' ||
	                meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        } else {
	            // '中午'
	            return hour >= 11 ? hour : hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s内',
	        past : '%s前',
	        s : '几秒',
	        m : '1 分钟',
	        mm : '%d 分钟',
	        h : '1 小时',
	        hh : '%d 小时',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 个月',
	        MM : '%d 个月',
	        y : '1 年',
	        yy : '%d 年'
	    },
	    week : {
	        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});

	return zhCn;

	})));


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var zhHk = moment.defineLocale('zh-hk', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日 HH:mm',
	        LLLL : 'YYYY年MMMD日dddd HH:mm',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日 HH:mm',
	        llll : 'YYYY年MMMD日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});

	return zhHk;

	})));


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(70)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';


	var zhTw = moment.defineLocale('zh-tw', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日 HH:mm',
	        LLLL : 'YYYY年MMMD日dddd HH:mm',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日 HH:mm',
	        llll : 'YYYY年MMMD日dddd HH:mm'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});

	return zhTw;

	})));


/***/ })
/******/ ]);